
Voltmeter V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00001b8a  00001c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000062  0080018c  0080018c  00001caa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000870  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000bbd8  00000000  00000000  00002576  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003175  00000000  00000000  0000e14e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000153f4  00000000  00000000  000112c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000013b4  00000000  00000000  000266b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001bc6e  00000000  00000000  00027a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007059  00000000  00000000  000436da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000878  00000000  00000000  0004a733  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000bad9  00000000  00000000  0004afab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a5 c0       	rjmp	.+330    	; 0x14c <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__vector_1>
       8:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__vector_2>
       c:	bc c0       	rjmp	.+376    	; 0x186 <__bad_interrupt>
       e:	00 00       	nop
      10:	ba c0       	rjmp	.+372    	; 0x186 <__bad_interrupt>
      12:	00 00       	nop
      14:	b8 c0       	rjmp	.+368    	; 0x186 <__bad_interrupt>
      16:	00 00       	nop
      18:	b6 c0       	rjmp	.+364    	; 0x186 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b4 c0       	rjmp	.+360    	; 0x186 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b2 c0       	rjmp	.+356    	; 0x186 <__bad_interrupt>
      22:	00 00       	nop
      24:	b0 c0       	rjmp	.+352    	; 0x186 <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c5       	rjmp	.+2658   	; 0xa8c <__vector_10>
      2a:	00 00       	nop
      2c:	fa c5       	rjmp	.+3060   	; 0xc22 <__vector_11>
      2e:	00 00       	nop
      30:	aa c0       	rjmp	.+340    	; 0x186 <__bad_interrupt>
      32:	00 00       	nop
      34:	a8 c0       	rjmp	.+336    	; 0x186 <__bad_interrupt>
      36:	00 00       	nop
      38:	a6 c0       	rjmp	.+332    	; 0x186 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a4 c0       	rjmp	.+328    	; 0x186 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a2 c0       	rjmp	.+324    	; 0x186 <__bad_interrupt>
      42:	00 00       	nop
      44:	a0 c0       	rjmp	.+320    	; 0x186 <__bad_interrupt>
      46:	00 00       	nop
      48:	9e c0       	rjmp	.+316    	; 0x186 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9c c0       	rjmp	.+312    	; 0x186 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9a c0       	rjmp	.+308    	; 0x186 <__bad_interrupt>
      52:	00 00       	nop
      54:	98 c0       	rjmp	.+304    	; 0x186 <__bad_interrupt>
      56:	00 00       	nop
      58:	96 c0       	rjmp	.+300    	; 0x186 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	94 c0       	rjmp	.+296    	; 0x186 <__bad_interrupt>
      5e:	00 00       	nop
      60:	92 c0       	rjmp	.+292    	; 0x186 <__bad_interrupt>
      62:	00 00       	nop
      64:	15 c1       	rjmp	.+554    	; 0x290 <__vector_25>
      66:	00 00       	nop
      68:	3e c1       	rjmp	.+636    	; 0x2e6 <__vector_26>
      6a:	00 00       	nop
      6c:	8c c0       	rjmp	.+280    	; 0x186 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8a c0       	rjmp	.+276    	; 0x186 <__bad_interrupt>
      72:	00 00       	nop
      74:	88 c0       	rjmp	.+272    	; 0x186 <__bad_interrupt>
      76:	00 00       	nop
      78:	86 c0       	rjmp	.+268    	; 0x186 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	84 c0       	rjmp	.+264    	; 0x186 <__bad_interrupt>
      7e:	00 00       	nop
      80:	82 c0       	rjmp	.+260    	; 0x186 <__bad_interrupt>
      82:	00 00       	nop
      84:	80 c0       	rjmp	.+256    	; 0x186 <__bad_interrupt>
      86:	00 00       	nop
      88:	7e c0       	rjmp	.+252    	; 0x186 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7c c0       	rjmp	.+248    	; 0x186 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7a c0       	rjmp	.+244    	; 0x186 <__bad_interrupt>
      92:	00 00       	nop
      94:	78 c0       	rjmp	.+240    	; 0x186 <__bad_interrupt>
      96:	00 00       	nop
      98:	76 c0       	rjmp	.+236    	; 0x186 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	74 c0       	rjmp	.+232    	; 0x186 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	72 c0       	rjmp	.+228    	; 0x186 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	70 c0       	rjmp	.+224    	; 0x186 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6e c0       	rjmp	.+220    	; 0x186 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	73 06       	cpc	r7, r19
      ae:	95 06       	cpc	r9, r21
      b0:	79 07       	cpc	r23, r25
      b2:	95 06       	cpc	r9, r21
      b4:	79 07       	cpc	r23, r25
      b6:	d7 06       	cpc	r13, r23
      b8:	f9 06       	cpc	r15, r25
      ba:	79 07       	cpc	r23, r25
      bc:	4b 07       	cpc	r20, r27
      be:	5d 07       	cpc	r21, r29

000000c0 <ProductString>:
      c0:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      d0:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000de <ManufacturerString>:
      de:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ee:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f8 <LanguageString>:
      f8:	04 03 09 04                                         ....

000000fc <ConfigurationDescriptor>:
      fc:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     10c:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     11c:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     12c:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000013a <DeviceDescriptor>:
     13a:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     14a:	dc 01                                               ..

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	da e0       	ldi	r29, 0x0A	; 10
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	ea e8       	ldi	r30, 0x8A	; 138
     160:	fb e1       	ldi	r31, 0x1B	; 27
     162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x10>
     164:	05 90       	lpm	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	ac 38       	cpi	r26, 0x8C	; 140
     16a:	b1 07       	cpc	r27, r17
     16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0xc>

0000016e <__do_clear_bss>:
     16e:	21 e0       	ldi	r18, 0x01	; 1
     170:	ac e8       	ldi	r26, 0x8C	; 140
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	ae 3e       	cpi	r26, 0xEE	; 238
     17a:	b2 07       	cpc	r27, r18
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
     17e:	0e 94 a3 09 	call	0x1346	; 0x1346 <main>
     182:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <_exit>

00000186 <__bad_interrupt>:
     186:	3c cf       	rjmp	.-392    	; 0x0 <__vectors>

00000188 <ADC_Start>:
	//ADMUX |= (1<<REFS0)|(1<<ADLAR); // Ref: AVcc, ADC Left adjust, 
}

// Starts the ADC unit with the provided channel
uint16_t ADC_Start(uint8_t channel){
	CLEARBITMASK(ADMUX, (1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0)); // clear ADMUX first!!
     188:	90 91 7c 00 	lds	r25, 0x007C
     18c:	9f 7e       	andi	r25, 0xEF	; 239
     18e:	90 93 7c 00 	sts	0x007C, r25
	SETBITMASK(ADMUX, (1<<REFS0)|channel);  // Ref: AVcc, channel as the selected pin
     192:	90 91 7c 00 	lds	r25, 0x007C
     196:	90 64       	ori	r25, 0x40	; 64
     198:	98 2b       	or	r25, r24
     19a:	90 93 7c 00 	sts	0x007C, r25
	SETBITMASK(ADCSRA, (1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)); // Turn ADC on, Start Conversion,  clk/128 scale = 125khz ADC clock
     19e:	80 91 7a 00 	lds	r24, 0x007A
     1a2:	87 6c       	ori	r24, 0xC7	; 199
     1a4:	80 93 7a 00 	sts	0x007A, r24
	
	// ok ADC started, now wait for result
	while(!CHECKBIT(ADCSRA, ADIF)){
     1a8:	80 91 7a 00 	lds	r24, 0x007A
     1ac:	84 ff       	sbrs	r24, 4
     1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <ADC_Start+0x20>
		// wait for bit to go 1
	}
	SETBIT(ADCSRA, ADIF); // clear flag by writing 1
     1b0:	80 91 7a 00 	lds	r24, 0x007A
     1b4:	80 61       	ori	r24, 0x10	; 16
     1b6:	80 93 7a 00 	sts	0x007A, r24
	// turn ADC off
	//ADCSRA = 0;
	CLEARBIT(ADCSRA,ADEN);
     1ba:	80 91 7a 00 	lds	r24, 0x007A
     1be:	8f 77       	andi	r24, 0x7F	; 127
     1c0:	80 93 7a 00 	sts	0x007A, r24
	
	return ADC; // send back the adc result!
     1c4:	80 91 78 00 	lds	r24, 0x0078
     1c8:	90 91 79 00 	lds	r25, 0x0079
	
     1cc:	08 95       	ret

000001ce <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     1ce:	29 2f       	mov	r18, r25
     1d0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     1d2:	22 30       	cpi	r18, 0x02	; 2
     1d4:	31 05       	cpc	r19, r1
     1d6:	59 f0       	breq	.+22     	; 0x1ee <CALLBACK_USB_GetDescriptor+0x20>
     1d8:	23 30       	cpi	r18, 0x03	; 3
     1da:	31 05       	cpc	r19, r1
     1dc:	69 f0       	breq	.+26     	; 0x1f8 <CALLBACK_USB_GetDescriptor+0x2a>
     1de:	21 30       	cpi	r18, 0x01	; 1
     1e0:	31 05       	cpc	r19, r1
     1e2:	f9 f4       	brne	.+62     	; 0x222 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     1e4:	82 e1       	ldi	r24, 0x12	; 18
     1e6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1e8:	2a e3       	ldi	r18, 0x3A	; 58
     1ea:	31 e0       	ldi	r19, 0x01	; 1
     1ec:	1e c0       	rjmp	.+60     	; 0x22a <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1ee:	8e e3       	ldi	r24, 0x3E	; 62
     1f0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1f2:	2c ef       	ldi	r18, 0xFC	; 252
     1f4:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1f6:	19 c0       	rjmp	.+50     	; 0x22a <CALLBACK_USB_GetDescriptor+0x5c>
     1f8:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	91 05       	cpc	r25, r1
     1fe:	41 f0       	breq	.+16     	; 0x210 <CALLBACK_USB_GetDescriptor+0x42>
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	91 05       	cpc	r25, r1
     204:	41 f0       	breq	.+16     	; 0x216 <CALLBACK_USB_GetDescriptor+0x48>
     206:	89 2b       	or	r24, r25
     208:	61 f4       	brne	.+24     	; 0x222 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     20a:	e8 ef       	ldi	r30, 0xF8	; 248
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	05 c0       	rjmp	.+10     	; 0x21a <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     210:	ee ed       	ldi	r30, 0xDE	; 222
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     216:	e0 ec       	ldi	r30, 0xC0	; 192
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	84 91       	lpm	r24, Z
     21c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     21e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     220:	04 c0       	rjmp	.+8      	; 0x22a <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     22a:	fa 01       	movw	r30, r20
     22c:	31 83       	std	Z+1, r19	; 0x01
     22e:	20 83       	st	Z, r18
	return Size;
}
     230:	08 95       	ret

00000232 <ENC_Init>:
 */ 
#include "Encoder.h"

/* Init rotary encoder hardware */
void ENC_Init(void){
	CLEARBITMASK(ENC_DDR, (1<<ENC_A)|(1<<ENC_B)); // set encoder pins as inputs
     232:	51 98       	cbi	0x0a, 1	; 10
	SETBITMASK(ENC_PORT, (1<<ENC_A)|(1<<ENC_B));  // enable pull ups on encoder
     234:	8b b1       	in	r24, 0x0b	; 11
     236:	83 60       	ori	r24, 0x03	; 3
     238:	8b b9       	out	0x0b, r24	; 11
	EICRA |= (1<<ISC10)|(1<<ISC00);				  // enable interrupts on any edge for INT0 and INT1
     23a:	e9 e6       	ldi	r30, 0x69	; 105
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	85 60       	ori	r24, 0x05	; 5
     242:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1)|(1<<INT0);				  // set interrupt flag mask for INT1:0
     244:	8d b3       	in	r24, 0x1d	; 29
     246:	83 60       	ori	r24, 0x03	; 3
     248:	8d bb       	out	0x1d, r24	; 29
     24a:	08 95       	ret

0000024c <ENC_ISR>:
	static uint8_t old_AB = 3;  //lookup table index
	static int8_t encval = 0;   //encoder value
	static const int8_t enc_states[ ]=
	{0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0};  //encoder lookup table
	/**/
	old_AB <<=2;  //remember previous state
     24c:	80 91 00 01 	lds	r24, 0x0100
     250:	88 0f       	add	r24, r24
     252:	88 0f       	add	r24, r24
     254:	80 93 00 01 	sts	0x0100, r24
	old_AB |= ( ENC_PIN & 0x03 );
     258:	e9 b1       	in	r30, 0x09	; 9
     25a:	e3 70       	andi	r30, 0x03	; 3
     25c:	e8 2b       	or	r30, r24
     25e:	e0 93 00 01 	sts	0x0100, r30
	encval += enc_states[( old_AB & 0x0f )];
     262:	ef 70       	andi	r30, 0x0F	; 15
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	e3 5e       	subi	r30, 0xE3	; 227
     268:	fe 4f       	sbci	r31, 0xFE	; 254
     26a:	80 81       	ld	r24, Z
     26c:	90 91 8c 01 	lds	r25, 0x018C
     270:	89 0f       	add	r24, r25
     272:	80 93 8c 01 	sts	0x018C, r24
	/* post "Navigation forward/reverse" event */
	if( encval > 3 ) {  //four steps forward
     276:	84 30       	cpi	r24, 0x04	; 4
     278:	24 f0       	brlt	.+8      	; 0x282 <ENC_ISR+0x36>
		encval = 0;
     27a:	10 92 8c 01 	sts	0x018C, r1
		return 1;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	08 95       	ret
	}
	else if( encval < -3 ) {  //four steps backwards
     282:	8d 3f       	cpi	r24, 0xFD	; 253
     284:	24 f4       	brge	.+8      	; 0x28e <ENC_ISR+0x42>
		encval = 0;
     286:	10 92 8c 01 	sts	0x018C, r1
		return -1;
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	08 95       	ret
	}
     28e:	08 95       	ret

00000290 <__vector_25>:
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    
    return (UART1_LastRxError << 8) + data;

}/* uart1_getc */
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	2f 93       	push	r18
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	ef 93       	push	r30
     2a2:	ff 93       	push	r31
     2a4:	80 91 c8 00 	lds	r24, 0x00C8
     2a8:	90 91 ce 00 	lds	r25, 0x00CE
     2ac:	88 71       	andi	r24, 0x18	; 24
     2ae:	e0 91 8f 01 	lds	r30, 0x018F
     2b2:	ef 5f       	subi	r30, 0xFF	; 255
     2b4:	ef 71       	andi	r30, 0x1F	; 31
     2b6:	20 91 8e 01 	lds	r18, 0x018E
     2ba:	e2 17       	cp	r30, r18
     2bc:	39 f0       	breq	.+14     	; 0x2cc <__vector_25+0x3c>
     2be:	e0 93 8f 01 	sts	0x018F, r30
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	ee 56       	subi	r30, 0x6E	; 110
     2c6:	fe 4f       	sbci	r31, 0xFE	; 254
     2c8:	90 83       	st	Z, r25
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <__vector_25+0x3e>
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	80 93 8d 01 	sts	0x018D, r24
     2d2:	ff 91       	pop	r31
     2d4:	ef 91       	pop	r30
     2d6:	9f 91       	pop	r25
     2d8:	8f 91       	pop	r24
     2da:	2f 91       	pop	r18
     2dc:	0f 90       	pop	r0
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	0f 90       	pop	r0
     2e2:	1f 90       	pop	r1
     2e4:	18 95       	reti

000002e6 <__vector_26>:
     2e6:	1f 92       	push	r1
     2e8:	0f 92       	push	r0
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	0f 92       	push	r0
     2ee:	11 24       	eor	r1, r1
     2f0:	8f 93       	push	r24
     2f2:	9f 93       	push	r25
     2f4:	ef 93       	push	r30
     2f6:	ff 93       	push	r31
     2f8:	90 91 91 01 	lds	r25, 0x0191
     2fc:	80 91 90 01 	lds	r24, 0x0190
     300:	98 17       	cp	r25, r24
     302:	69 f0       	breq	.+26     	; 0x31e <__vector_26+0x38>
     304:	e0 91 90 01 	lds	r30, 0x0190
     308:	ef 5f       	subi	r30, 0xFF	; 255
     30a:	ef 71       	andi	r30, 0x1F	; 31
     30c:	e0 93 90 01 	sts	0x0190, r30
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	ee 54       	subi	r30, 0x4E	; 78
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	80 81       	ld	r24, Z
     318:	80 93 ce 00 	sts	0x00CE, r24
     31c:	05 c0       	rjmp	.+10     	; 0x328 <__vector_26+0x42>
     31e:	80 91 c9 00 	lds	r24, 0x00C9
     322:	8f 7d       	andi	r24, 0xDF	; 223
     324:	80 93 c9 00 	sts	0x00C9, r24
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	9f 91       	pop	r25
     32e:	8f 91       	pop	r24
     330:	0f 90       	pop	r0
     332:	0f be       	out	0x3f, r0	; 63
     334:	0f 90       	pop	r0
     336:	1f 90       	pop	r1
     338:	18 95       	reti

0000033a <uart1_init>:
     33a:	10 92 91 01 	sts	0x0191, r1
     33e:	10 92 90 01 	sts	0x0190, r1
     342:	10 92 8f 01 	sts	0x018F, r1
     346:	10 92 8e 01 	sts	0x018E, r1
     34a:	97 ff       	sbrs	r25, 7
     34c:	04 c0       	rjmp	.+8      	; 0x356 <uart1_init+0x1c>
     34e:	22 e0       	ldi	r18, 0x02	; 2
     350:	20 93 c8 00 	sts	0x00C8, r18
     354:	9f 77       	andi	r25, 0x7F	; 127
     356:	90 93 cd 00 	sts	0x00CD, r25
     35a:	80 93 cc 00 	sts	0x00CC, r24
     35e:	88 e9       	ldi	r24, 0x98	; 152
     360:	80 93 c9 00 	sts	0x00C9, r24
     364:	86 e0       	ldi	r24, 0x06	; 6
     366:	80 93 ca 00 	sts	0x00CA, r24
     36a:	08 95       	ret

0000036c <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
     36c:	90 91 91 01 	lds	r25, 0x0191
     370:	9f 5f       	subi	r25, 0xFF	; 255
     372:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
     374:	20 91 90 01 	lds	r18, 0x0190
     378:	92 17       	cp	r25, r18
     37a:	e1 f3       	breq	.-8      	; 0x374 <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
     37c:	e9 2f       	mov	r30, r25
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ee 54       	subi	r30, 0x4E	; 78
     382:	fe 4f       	sbci	r31, 0xFE	; 254
     384:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
     386:	90 93 91 01 	sts	0x0191, r25

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
     38a:	80 91 c9 00 	lds	r24, 0x00C9
     38e:	80 62       	ori	r24, 0x20	; 32
     390:	80 93 c9 00 	sts	0x00C9, r24
     394:	08 95       	ret

00000396 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	ec 01       	movw	r28, r24
     39c:	fc 01       	movw	r30, r24
     39e:	70 96       	adiw	r30, 0x10	; 16
     3a0:	8b e0       	ldi	r24, 0x0B	; 11
     3a2:	df 01       	movw	r26, r30
     3a4:	1d 92       	st	X+, r1
     3a6:	8a 95       	dec	r24
     3a8:	e9 f7       	brne	.-6      	; 0x3a4 <CDC_Device_ConfigureEndpoints+0xe>
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	8c 83       	std	Y+4, r24	; 0x04
     3ae:	89 87       	std	Y+9, r24	; 0x09
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	8e 87       	std	Y+14, r24	; 0x0e
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	7d d2       	rcall	.+1274   	; 0x8b6 <Endpoint_ConfigureEndpointTable>
     3bc:	88 23       	and	r24, r24
     3be:	61 f0       	breq	.+24     	; 0x3d8 <CDC_Device_ConfigureEndpoints+0x42>
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	ce 01       	movw	r24, r28
     3c4:	06 96       	adiw	r24, 0x06	; 6
     3c6:	77 d2       	rcall	.+1262   	; 0x8b6 <Endpoint_ConfigureEndpointTable>
     3c8:	88 23       	and	r24, r24
     3ca:	31 f0       	breq	.+12     	; 0x3d8 <CDC_Device_ConfigureEndpoints+0x42>
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	ce 01       	movw	r24, r28
     3d0:	0b 96       	adiw	r24, 0x0b	; 11
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	6f c2       	rjmp	.+1246   	; 0x8b6 <Endpoint_ConfigureEndpointTable>
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <CDC_Device_SendByte>:
     3e0:	cf 93       	push	r28
     3e2:	c6 2f       	mov	r28, r22
     3e4:	20 91 e5 01 	lds	r18, 0x01E5
     3e8:	24 30       	cpi	r18, 0x04	; 4
     3ea:	f1 f4       	brne	.+60     	; 0x428 <CDC_Device_SendByte+0x48>
     3ec:	fc 01       	movw	r30, r24
     3ee:	44 89       	ldd	r20, Z+20	; 0x14
     3f0:	55 89       	ldd	r21, Z+21	; 0x15
     3f2:	66 89       	ldd	r22, Z+22	; 0x16
     3f4:	77 89       	ldd	r23, Z+23	; 0x17
     3f6:	45 2b       	or	r20, r21
     3f8:	46 2b       	or	r20, r22
     3fa:	47 2b       	or	r20, r23
     3fc:	a9 f0       	breq	.+42     	; 0x428 <CDC_Device_SendByte+0x48>
     3fe:	81 81       	ldd	r24, Z+1	; 0x01
     400:	8f 70       	andi	r24, 0x0F	; 15
     402:	80 93 e9 00 	sts	0x00E9, r24
     406:	80 91 e8 00 	lds	r24, 0x00E8
     40a:	85 ff       	sbrs	r24, 5
     40c:	04 c0       	rjmp	.+8      	; 0x416 <CDC_Device_SendByte+0x36>
     40e:	c0 93 f1 00 	sts	0x00F1, r28
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0a c0       	rjmp	.+20     	; 0x42a <CDC_Device_SendByte+0x4a>
     416:	80 91 e8 00 	lds	r24, 0x00E8
     41a:	8e 77       	andi	r24, 0x7E	; 126
     41c:	80 93 e8 00 	sts	0x00E8, r24
     420:	a8 d2       	rcall	.+1360   	; 0x972 <Endpoint_WaitUntilReady>
     422:	88 23       	and	r24, r24
     424:	a1 f3       	breq	.-24     	; 0x40e <CDC_Device_SendByte+0x2e>
     426:	01 c0       	rjmp	.+2      	; 0x42a <CDC_Device_SendByte+0x4a>
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <CDC_Device_putchar>:
     42e:	fb 01       	movw	r30, r22
     430:	68 2f       	mov	r22, r24
     432:	84 85       	ldd	r24, Z+12	; 0x0c
     434:	95 85       	ldd	r25, Z+13	; 0x0d
     436:	d4 df       	rcall	.-88     	; 0x3e0 <CDC_Device_SendByte>
     438:	21 e0       	ldi	r18, 0x01	; 1
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	81 11       	cpse	r24, r1
     43e:	02 c0       	rjmp	.+4      	; 0x444 <CDC_Device_putchar+0x16>
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	88 27       	eor	r24, r24
     446:	99 27       	eor	r25, r25
     448:	82 1b       	sub	r24, r18
     44a:	93 0b       	sbc	r25, r19
     44c:	08 95       	ret

0000044e <CDC_Device_Flush>:
     44e:	20 91 e5 01 	lds	r18, 0x01E5
     452:	24 30       	cpi	r18, 0x04	; 4
     454:	41 f5       	brne	.+80     	; 0x4a6 <CDC_Device_Flush+0x58>
     456:	fc 01       	movw	r30, r24
     458:	44 89       	ldd	r20, Z+20	; 0x14
     45a:	55 89       	ldd	r21, Z+21	; 0x15
     45c:	66 89       	ldd	r22, Z+22	; 0x16
     45e:	77 89       	ldd	r23, Z+23	; 0x17
     460:	45 2b       	or	r20, r21
     462:	46 2b       	or	r20, r22
     464:	47 2b       	or	r20, r23
     466:	f9 f0       	breq	.+62     	; 0x4a6 <CDC_Device_Flush+0x58>
     468:	81 81       	ldd	r24, Z+1	; 0x01
     46a:	8f 70       	andi	r24, 0x0F	; 15
     46c:	80 93 e9 00 	sts	0x00E9, r24
     470:	20 91 f3 00 	lds	r18, 0x00F3
     474:	80 91 f2 00 	lds	r24, 0x00F2
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	92 2b       	or	r25, r18
     47c:	89 2b       	or	r24, r25
     47e:	89 f0       	breq	.+34     	; 0x4a2 <CDC_Device_Flush+0x54>
     480:	90 91 e8 00 	lds	r25, 0x00E8
     484:	80 91 e8 00 	lds	r24, 0x00E8
     488:	8e 77       	andi	r24, 0x7E	; 126
     48a:	80 93 e8 00 	sts	0x00E8, r24
     48e:	95 fd       	sbrc	r25, 5
     490:	08 c0       	rjmp	.+16     	; 0x4a2 <CDC_Device_Flush+0x54>
     492:	6f d2       	rcall	.+1246   	; 0x972 <Endpoint_WaitUntilReady>
     494:	81 11       	cpse	r24, r1
     496:	08 c0       	rjmp	.+16     	; 0x4a8 <CDC_Device_Flush+0x5a>
     498:	80 91 e8 00 	lds	r24, 0x00E8
     49c:	8e 77       	andi	r24, 0x7E	; 126
     49e:	80 93 e8 00 	sts	0x00E8, r24
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	08 95       	ret
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	08 95       	ret

000004aa <CDC_Device_USBTask>:
     4aa:	20 91 e5 01 	lds	r18, 0x01E5
     4ae:	24 30       	cpi	r18, 0x04	; 4
     4b0:	89 f4       	brne	.+34     	; 0x4d4 <CDC_Device_USBTask+0x2a>
     4b2:	fc 01       	movw	r30, r24
     4b4:	44 89       	ldd	r20, Z+20	; 0x14
     4b6:	55 89       	ldd	r21, Z+21	; 0x15
     4b8:	66 89       	ldd	r22, Z+22	; 0x16
     4ba:	77 89       	ldd	r23, Z+23	; 0x17
     4bc:	45 2b       	or	r20, r21
     4be:	46 2b       	or	r20, r22
     4c0:	47 2b       	or	r20, r23
     4c2:	41 f0       	breq	.+16     	; 0x4d4 <CDC_Device_USBTask+0x2a>
     4c4:	21 81       	ldd	r18, Z+1	; 0x01
     4c6:	2f 70       	andi	r18, 0x0F	; 15
     4c8:	20 93 e9 00 	sts	0x00E9, r18
     4cc:	20 91 e8 00 	lds	r18, 0x00E8
     4d0:	20 fd       	sbrc	r18, 0
     4d2:	bd cf       	rjmp	.-134    	; 0x44e <CDC_Device_Flush>
     4d4:	08 95       	ret

000004d6 <CDC_Device_ReceiveByte>:
     4d6:	20 91 e5 01 	lds	r18, 0x01E5
     4da:	24 30       	cpi	r18, 0x04	; 4
     4dc:	19 f0       	breq	.+6      	; 0x4e4 <CDC_Device_ReceiveByte+0xe>
     4de:	8f ef       	ldi	r24, 0xFF	; 255
     4e0:	9f ef       	ldi	r25, 0xFF	; 255
     4e2:	08 95       	ret
     4e4:	fc 01       	movw	r30, r24
     4e6:	44 89       	ldd	r20, Z+20	; 0x14
     4e8:	55 89       	ldd	r21, Z+21	; 0x15
     4ea:	66 89       	ldd	r22, Z+22	; 0x16
     4ec:	77 89       	ldd	r23, Z+23	; 0x17
     4ee:	45 2b       	or	r20, r21
     4f0:	46 2b       	or	r20, r22
     4f2:	47 2b       	or	r20, r23
     4f4:	a1 f3       	breq	.-24     	; 0x4de <CDC_Device_ReceiveByte+0x8>
     4f6:	86 81       	ldd	r24, Z+6	; 0x06
     4f8:	8f 70       	andi	r24, 0x0F	; 15
     4fa:	80 93 e9 00 	sts	0x00E9, r24
     4fe:	80 91 e8 00 	lds	r24, 0x00E8
     502:	82 ff       	sbrs	r24, 2
     504:	ec cf       	rjmp	.-40     	; 0x4de <CDC_Device_ReceiveByte+0x8>
     506:	20 91 f3 00 	lds	r18, 0x00F3
     50a:	80 91 f2 00 	lds	r24, 0x00F2
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	92 2b       	or	r25, r18
     512:	89 2b       	or	r24, r25
     514:	21 f0       	breq	.+8      	; 0x51e <CDC_Device_ReceiveByte+0x48>
     516:	20 91 f1 00 	lds	r18, 0x00F1
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	02 c0       	rjmp	.+4      	; 0x522 <CDC_Device_ReceiveByte+0x4c>
     51e:	2f ef       	ldi	r18, 0xFF	; 255
     520:	3f ef       	ldi	r19, 0xFF	; 255
     522:	40 91 f3 00 	lds	r20, 0x00F3
     526:	80 91 f2 00 	lds	r24, 0x00F2
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	94 2b       	or	r25, r20
     52e:	89 2b       	or	r24, r25
     530:	29 f4       	brne	.+10     	; 0x53c <CDC_Device_ReceiveByte+0x66>
     532:	80 91 e8 00 	lds	r24, 0x00E8
     536:	8b 77       	andi	r24, 0x7B	; 123
     538:	80 93 e8 00 	sts	0x00E8, r24
     53c:	c9 01       	movw	r24, r18
     53e:	08 95       	ret

00000540 <CDC_Device_getchar>:
     540:	fc 01       	movw	r30, r24
     542:	84 85       	ldd	r24, Z+12	; 0x0c
     544:	95 85       	ldd	r25, Z+13	; 0x0d
     546:	c7 df       	rcall	.-114    	; 0x4d6 <CDC_Device_ReceiveByte>
     548:	97 ff       	sbrs	r25, 7
     54a:	02 c0       	rjmp	.+4      	; 0x550 <CDC_Device_getchar+0x10>
     54c:	8e ef       	ldi	r24, 0xFE	; 254
     54e:	9f ef       	ldi	r25, 0xFF	; 255
     550:	08 95       	ret

00000552 <CDC_Device_CreateStream>:
     552:	fb 01       	movw	r30, r22
     554:	2e e0       	ldi	r18, 0x0E	; 14
     556:	db 01       	movw	r26, r22
     558:	1d 92       	st	X+, r1
     55a:	2a 95       	dec	r18
     55c:	e9 f7       	brne	.-6      	; 0x558 <CDC_Device_CreateStream+0x6>
     55e:	23 e0       	ldi	r18, 0x03	; 3
     560:	23 83       	std	Z+3, r18	; 0x03
     562:	27 e1       	ldi	r18, 0x17	; 23
     564:	32 e0       	ldi	r19, 0x02	; 2
     566:	31 87       	std	Z+9, r19	; 0x09
     568:	20 87       	std	Z+8, r18	; 0x08
     56a:	20 ea       	ldi	r18, 0xA0	; 160
     56c:	32 e0       	ldi	r19, 0x02	; 2
     56e:	33 87       	std	Z+11, r19	; 0x0b
     570:	22 87       	std	Z+10, r18	; 0x0a
     572:	95 87       	std	Z+13, r25	; 0x0d
     574:	84 87       	std	Z+12, r24	; 0x0c
     576:	08 95       	ret

00000578 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     578:	08 95       	ret

0000057a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     580:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     584:	83 ff       	sbrs	r24, 3
     586:	a6 c0       	rjmp	.+332    	; 0x6d4 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     588:	88 81       	ld	r24, Y
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	20 91 ea 01 	lds	r18, 0x01EA
     590:	30 91 eb 01 	lds	r19, 0x01EB
     594:	28 17       	cp	r18, r24
     596:	39 07       	cpc	r19, r25
     598:	09 f0       	breq	.+2      	; 0x59c <CDC_Device_ProcessControlRequest+0x22>
     59a:	9c c0       	rjmp	.+312    	; 0x6d4 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     59c:	80 91 e7 01 	lds	r24, 0x01E7
     5a0:	81 32       	cpi	r24, 0x21	; 33
     5a2:	61 f0       	breq	.+24     	; 0x5bc <CDC_Device_ProcessControlRequest+0x42>
     5a4:	20 f4       	brcc	.+8      	; 0x5ae <CDC_Device_ProcessControlRequest+0x34>
     5a6:	80 32       	cpi	r24, 0x20	; 32
     5a8:	09 f4       	brne	.+2      	; 0x5ac <CDC_Device_ProcessControlRequest+0x32>
     5aa:	3e c0       	rjmp	.+124    	; 0x628 <CDC_Device_ProcessControlRequest+0xae>
     5ac:	93 c0       	rjmp	.+294    	; 0x6d4 <CDC_Device_ProcessControlRequest+0x15a>
     5ae:	82 32       	cpi	r24, 0x22	; 34
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <CDC_Device_ProcessControlRequest+0x3a>
     5b2:	6c c0       	rjmp	.+216    	; 0x68c <CDC_Device_ProcessControlRequest+0x112>
     5b4:	83 32       	cpi	r24, 0x23	; 35
     5b6:	09 f4       	brne	.+2      	; 0x5ba <CDC_Device_ProcessControlRequest+0x40>
     5b8:	7d c0       	rjmp	.+250    	; 0x6b4 <CDC_Device_ProcessControlRequest+0x13a>
     5ba:	8c c0       	rjmp	.+280    	; 0x6d4 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     5bc:	80 91 e6 01 	lds	r24, 0x01E6
     5c0:	81 3a       	cpi	r24, 0xA1	; 161
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <CDC_Device_ProcessControlRequest+0x4c>
     5c4:	87 c0       	rjmp	.+270    	; 0x6d4 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     5c6:	80 91 e8 00 	lds	r24, 0x00E8
     5ca:	87 7f       	andi	r24, 0xF7	; 247
     5cc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5d0:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     5d4:	80 ff       	sbrs	r24, 0
     5d6:	fc cf       	rjmp	.-8      	; 0x5d0 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     5d8:	4c 89       	ldd	r20, Y+20	; 0x14
     5da:	5d 89       	ldd	r21, Y+21	; 0x15
     5dc:	6e 89       	ldd	r22, Y+22	; 0x16
     5de:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     5e0:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     5e4:	bb 27       	eor	r27, r27
     5e6:	a7 2f       	mov	r26, r23
     5e8:	96 2f       	mov	r25, r22
     5ea:	85 2f       	mov	r24, r21
     5ec:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     5f0:	cb 01       	movw	r24, r22
     5f2:	aa 27       	eor	r26, r26
     5f4:	bb 27       	eor	r27, r27
     5f6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     5fa:	47 2f       	mov	r20, r23
     5fc:	55 27       	eor	r21, r21
     5fe:	66 27       	eor	r22, r22
     600:	77 27       	eor	r23, r23
     602:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     606:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     608:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     60c:	89 8d       	ldd	r24, Y+25	; 0x19
     60e:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     612:	8a 8d       	ldd	r24, Y+26	; 0x1a
     614:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     618:	80 91 e8 00 	lds	r24, 0x00E8
     61c:	8e 77       	andi	r24, 0x7E	; 126
     61e:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     626:	84 c1       	rjmp	.+776    	; 0x930 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     628:	80 91 e6 01 	lds	r24, 0x01E6
     62c:	81 32       	cpi	r24, 0x21	; 33
     62e:	09 f0       	breq	.+2      	; 0x632 <CDC_Device_ProcessControlRequest+0xb8>
     630:	51 c0       	rjmp	.+162    	; 0x6d4 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     632:	80 91 e8 00 	lds	r24, 0x00E8
     636:	87 7f       	andi	r24, 0xF7	; 247
     638:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     63c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     640:	82 fd       	sbrc	r24, 2
     642:	05 c0       	rjmp	.+10     	; 0x64e <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     644:	80 91 e5 01 	lds	r24, 0x01E5
     648:	81 11       	cpse	r24, r1
     64a:	f8 cf       	rjmp	.-16     	; 0x63c <CDC_Device_ProcessControlRequest+0xc2>
     64c:	43 c0       	rjmp	.+134    	; 0x6d4 <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     64e:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     652:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     656:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     65a:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     65e:	3c 8b       	std	Y+20, r19	; 0x14
     660:	2d 8b       	std	Y+21, r18	; 0x15
     662:	9e 8b       	std	Y+22, r25	; 0x16
     664:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     666:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     66a:	88 8f       	std	Y+24, r24	; 0x18
     66c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     670:	89 8f       	std	Y+25, r24	; 0x19
     672:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     676:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     678:	80 91 e8 00 	lds	r24, 0x00E8
     67c:	8b 77       	andi	r24, 0x7B	; 123
     67e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     682:	56 d1       	rcall	.+684    	; 0x930 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     684:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     68a:	76 cf       	rjmp	.-276    	; 0x578 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     68c:	80 91 e6 01 	lds	r24, 0x01E6
     690:	81 32       	cpi	r24, 0x21	; 33
     692:	01 f5       	brne	.+64     	; 0x6d4 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     694:	80 91 e8 00 	lds	r24, 0x00E8
     698:	87 7f       	andi	r24, 0xF7	; 247
     69a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     69e:	48 d1       	rcall	.+656    	; 0x930 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     6a0:	80 91 e8 01 	lds	r24, 0x01E8
     6a4:	90 91 e9 01 	lds	r25, 0x01E9
     6a8:	99 8b       	std	Y+17, r25	; 0x11
     6aa:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     6ac:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     6b2:	62 cf       	rjmp	.-316    	; 0x578 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6b4:	80 91 e6 01 	lds	r24, 0x01E6
     6b8:	81 32       	cpi	r24, 0x21	; 33
     6ba:	61 f4       	brne	.+24     	; 0x6d4 <CDC_Device_ProcessControlRequest+0x15a>
     6bc:	80 91 e8 00 	lds	r24, 0x00E8
     6c0:	87 7f       	andi	r24, 0xF7	; 247
     6c2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     6c6:	34 d1       	rcall	.+616    	; 0x930 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     6c8:	60 91 e8 01 	lds	r22, 0x01E8
     6cc:	ce 01       	movw	r24, r28
			}

			break;
	}
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     6d2:	52 cf       	rjmp	.-348    	; 0x578 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6da:	20 91 ec 01 	lds	r18, 0x01EC
     6de:	30 91 ed 01 	lds	r19, 0x01ED
     6e2:	26 17       	cp	r18, r22
     6e4:	37 07       	cpc	r19, r23
     6e6:	48 f0       	brcs	.+18     	; 0x6fa <Endpoint_Write_Control_Stream_LE+0x20>
     6e8:	61 15       	cp	r22, r1
     6ea:	71 05       	cpc	r23, r1
     6ec:	39 f4       	brne	.+14     	; 0x6fc <Endpoint_Write_Control_Stream_LE+0x22>
     6ee:	20 91 e8 00 	lds	r18, 0x00E8
     6f2:	2e 77       	andi	r18, 0x7E	; 126
     6f4:	20 93 e8 00 	sts	0x00E8, r18
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <Endpoint_Write_Control_Stream_LE+0x22>
     6fa:	b9 01       	movw	r22, r18
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	61 15       	cp	r22, r1
     702:	71 05       	cpc	r23, r1
     704:	a9 f1       	breq	.+106    	; 0x770 <Endpoint_Write_Control_Stream_LE+0x96>
     706:	80 91 e5 01 	lds	r24, 0x01E5
     70a:	88 23       	and	r24, r24
     70c:	e9 f1       	breq	.+122    	; 0x788 <Endpoint_Write_Control_Stream_LE+0xae>
     70e:	85 30       	cpi	r24, 0x05	; 5
     710:	e9 f1       	breq	.+122    	; 0x78c <Endpoint_Write_Control_Stream_LE+0xb2>
     712:	80 91 e8 00 	lds	r24, 0x00E8
     716:	83 fd       	sbrc	r24, 3
     718:	35 c0       	rjmp	.+106    	; 0x784 <Endpoint_Write_Control_Stream_LE+0xaa>
     71a:	80 91 e8 00 	lds	r24, 0x00E8
     71e:	82 ff       	sbrs	r24, 2
     720:	06 c0       	rjmp	.+12     	; 0x72e <Endpoint_Write_Control_Stream_LE+0x54>
     722:	80 91 e8 00 	lds	r24, 0x00E8
     726:	82 ff       	sbrs	r24, 2
     728:	26 c0       	rjmp	.+76     	; 0x776 <Endpoint_Write_Control_Stream_LE+0x9c>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 95       	ret
     72e:	80 91 e8 00 	lds	r24, 0x00E8
     732:	80 ff       	sbrs	r24, 0
     734:	e5 cf       	rjmp	.-54     	; 0x700 <Endpoint_Write_Control_Stream_LE+0x26>
     736:	20 91 f3 00 	lds	r18, 0x00F3
     73a:	80 91 f2 00 	lds	r24, 0x00F2
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	92 2b       	or	r25, r18
     742:	61 15       	cp	r22, r1
     744:	71 05       	cpc	r23, r1
     746:	51 f0       	breq	.+20     	; 0x75c <Endpoint_Write_Control_Stream_LE+0x82>
     748:	88 30       	cpi	r24, 0x08	; 8
     74a:	91 05       	cpc	r25, r1
     74c:	38 f4       	brcc	.+14     	; 0x75c <Endpoint_Write_Control_Stream_LE+0x82>
     74e:	21 91       	ld	r18, Z+
     750:	20 93 f1 00 	sts	0x00F1, r18
     754:	61 50       	subi	r22, 0x01	; 1
     756:	71 09       	sbc	r23, r1
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	f3 cf       	rjmp	.-26     	; 0x742 <Endpoint_Write_Control_Stream_LE+0x68>
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	08 97       	sbiw	r24, 0x08	; 8
     760:	09 f0       	breq	.+2      	; 0x764 <Endpoint_Write_Control_Stream_LE+0x8a>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	80 91 e8 00 	lds	r24, 0x00E8
     768:	8e 77       	andi	r24, 0x7E	; 126
     76a:	80 93 e8 00 	sts	0x00E8, r24
     76e:	c8 cf       	rjmp	.-112    	; 0x700 <Endpoint_Write_Control_Stream_LE+0x26>
     770:	21 11       	cpse	r18, r1
     772:	c9 cf       	rjmp	.-110    	; 0x706 <Endpoint_Write_Control_Stream_LE+0x2c>
     774:	d6 cf       	rjmp	.-84     	; 0x722 <Endpoint_Write_Control_Stream_LE+0x48>
     776:	80 91 e5 01 	lds	r24, 0x01E5
     77a:	88 23       	and	r24, r24
     77c:	29 f0       	breq	.+10     	; 0x788 <Endpoint_Write_Control_Stream_LE+0xae>
     77e:	85 30       	cpi	r24, 0x05	; 5
     780:	81 f6       	brne	.-96     	; 0x722 <Endpoint_Write_Control_Stream_LE+0x48>
     782:	04 c0       	rjmp	.+8      	; 0x78c <Endpoint_Write_Control_Stream_LE+0xb2>
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	08 95       	ret
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	08 95       	ret
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	08 95       	ret

00000790 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     790:	20 91 ec 01 	lds	r18, 0x01EC
     794:	30 91 ed 01 	lds	r19, 0x01ED
     798:	26 17       	cp	r18, r22
     79a:	37 07       	cpc	r19, r23
     79c:	48 f0       	brcs	.+18     	; 0x7b0 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     79e:	61 15       	cp	r22, r1
     7a0:	71 05       	cpc	r23, r1
     7a2:	39 f4       	brne	.+14     	; 0x7b2 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7a4:	20 91 e8 00 	lds	r18, 0x00E8
     7a8:	2e 77       	andi	r18, 0x7E	; 126
     7aa:	20 93 e8 00 	sts	0x00E8, r18
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <Endpoint_Write_Control_PStream_LE+0x22>
     7b0:	b9 01       	movw	r22, r18
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7b6:	61 15       	cp	r22, r1
     7b8:	71 05       	cpc	r23, r1
     7ba:	c1 f1       	breq	.+112    	; 0x82c <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7bc:	80 91 e5 01 	lds	r24, 0x01E5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7c0:	88 23       	and	r24, r24
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <Endpoint_Write_Control_PStream_LE+0x36>
     7c4:	3f c0       	rjmp	.+126    	; 0x844 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7c6:	85 30       	cpi	r24, 0x05	; 5
     7c8:	09 f4       	brne	.+2      	; 0x7cc <Endpoint_Write_Control_PStream_LE+0x3c>
     7ca:	3e c0       	rjmp	.+124    	; 0x848 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7cc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7d0:	83 fd       	sbrc	r24, 3
     7d2:	36 c0       	rjmp	.+108    	; 0x840 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7d4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7d8:	82 ff       	sbrs	r24, 2
     7da:	06 c0       	rjmp	.+12     	; 0x7e8 <Endpoint_Write_Control_PStream_LE+0x58>
     7dc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     7e0:	82 ff       	sbrs	r24, 2
     7e2:	27 c0       	rjmp	.+78     	; 0x832 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7e8:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     7ec:	80 ff       	sbrs	r24, 0
     7ee:	e3 cf       	rjmp	.-58     	; 0x7b6 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     7f0:	20 91 f3 00 	lds	r18, 0x00F3
     7f4:	80 91 f2 00 	lds	r24, 0x00F2
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7fc:	61 15       	cp	r22, r1
     7fe:	71 05       	cpc	r23, r1
     800:	59 f0       	breq	.+22     	; 0x818 <Endpoint_Write_Control_PStream_LE+0x88>
     802:	88 30       	cpi	r24, 0x08	; 8
     804:	91 05       	cpc	r25, r1
     806:	40 f4       	brcc	.+16     	; 0x818 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     808:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     80a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     80e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     810:	61 50       	subi	r22, 0x01	; 1
     812:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	f2 cf       	rjmp	.-28     	; 0x7fc <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     818:	21 e0       	ldi	r18, 0x01	; 1
     81a:	08 97       	sbiw	r24, 0x08	; 8
     81c:	09 f0       	breq	.+2      	; 0x820 <Endpoint_Write_Control_PStream_LE+0x90>
     81e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     820:	80 91 e8 00 	lds	r24, 0x00E8
     824:	8e 77       	andi	r24, 0x7E	; 126
     826:	80 93 e8 00 	sts	0x00E8, r24
     82a:	c5 cf       	rjmp	.-118    	; 0x7b6 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     82c:	21 11       	cpse	r18, r1
     82e:	c6 cf       	rjmp	.-116    	; 0x7bc <Endpoint_Write_Control_PStream_LE+0x2c>
     830:	d5 cf       	rjmp	.-86     	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     832:	80 91 e5 01 	lds	r24, 0x01E5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     836:	88 23       	and	r24, r24
     838:	29 f0       	breq	.+10     	; 0x844 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     83a:	85 30       	cpi	r24, 0x05	; 5
     83c:	79 f6       	brne	.-98     	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x4c>
     83e:	04 c0       	rjmp	.+8      	; 0x848 <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     848:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     84a:	08 95       	ret

0000084c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     84c:	98 2f       	mov	r25, r24
     84e:	97 30       	cpi	r25, 0x07	; 7
     850:	58 f5       	brcc	.+86     	; 0x8a8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     852:	90 93 e9 00 	sts	0x00E9, r25
     856:	98 17       	cp	r25, r24
     858:	39 f0       	breq	.+14     	; 0x868 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     85a:	70 91 ec 00 	lds	r23, 0x00EC
     85e:	20 91 ed 00 	lds	r18, 0x00ED
     862:	50 91 f0 00 	lds	r21, 0x00F0
     866:	03 c0       	rjmp	.+6      	; 0x86e <Endpoint_ConfigureEndpoint_Prv+0x22>
     868:	24 2f       	mov	r18, r20
     86a:	76 2f       	mov	r23, r22
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	21 ff       	sbrs	r18, 1
     870:	19 c0       	rjmp	.+50     	; 0x8a4 <Endpoint_ConfigureEndpoint_Prv+0x58>
     872:	30 91 eb 00 	lds	r19, 0x00EB
     876:	3e 7f       	andi	r19, 0xFE	; 254
     878:	30 93 eb 00 	sts	0x00EB, r19
     87c:	30 91 ed 00 	lds	r19, 0x00ED
     880:	3d 7f       	andi	r19, 0xFD	; 253
     882:	30 93 ed 00 	sts	0x00ED, r19
     886:	30 91 eb 00 	lds	r19, 0x00EB
     88a:	31 60       	ori	r19, 0x01	; 1
     88c:	30 93 eb 00 	sts	0x00EB, r19
     890:	70 93 ec 00 	sts	0x00EC, r23
     894:	20 93 ed 00 	sts	0x00ED, r18
     898:	50 93 f0 00 	sts	0x00F0, r21
     89c:	20 91 ee 00 	lds	r18, 0x00EE
     8a0:	27 ff       	sbrs	r18, 7
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <Endpoint_ConfigureEndpoint_Prv+0x66>
     8a4:	9f 5f       	subi	r25, 0xFF	; 255
     8a6:	d3 cf       	rjmp	.-90     	; 0x84e <Endpoint_ConfigureEndpoint_Prv+0x2>
     8a8:	8f 70       	andi	r24, 0x0F	; 15
     8aa:	80 93 e9 00 	sts	0x00E9, r24
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	08 95       	ret
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	08 95       	ret

000008b6 <Endpoint_ConfigureEndpointTable>:
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	06 2f       	mov	r16, r22
     8c0:	ec 01       	movw	r28, r24
     8c2:	10 e0       	ldi	r17, 0x00	; 0
     8c4:	10 17       	cp	r17, r16
     8c6:	71 f1       	breq	.+92     	; 0x924 <Endpoint_ConfigureEndpointTable+0x6e>
     8c8:	98 81       	ld	r25, Y
     8ca:	99 23       	and	r25, r25
     8cc:	41 f1       	breq	.+80     	; 0x91e <Endpoint_ConfigureEndpointTable+0x68>
     8ce:	2c 81       	ldd	r18, Y+4	; 0x04
     8d0:	e9 81       	ldd	r30, Y+1	; 0x01
     8d2:	fa 81       	ldd	r31, Y+2	; 0x02
     8d4:	7b 81       	ldd	r23, Y+3	; 0x03
     8d6:	89 2f       	mov	r24, r25
     8d8:	8f 70       	andi	r24, 0x0F	; 15
     8da:	87 30       	cpi	r24, 0x07	; 7
     8dc:	10 f0       	brcs	.+4      	; 0x8e2 <Endpoint_ConfigureEndpointTable+0x2c>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	22 c0       	rjmp	.+68     	; 0x926 <Endpoint_ConfigureEndpointTable+0x70>
     8e2:	22 30       	cpi	r18, 0x02	; 2
     8e4:	10 f0       	brcs	.+4      	; 0x8ea <Endpoint_ConfigureEndpointTable+0x34>
     8e6:	56 e0       	ldi	r21, 0x06	; 6
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <Endpoint_ConfigureEndpointTable+0x36>
     8ea:	52 e0       	ldi	r21, 0x02	; 2
     8ec:	28 e0       	ldi	r18, 0x08	; 8
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	2e 17       	cp	r18, r30
     8f4:	3f 07       	cpc	r19, r31
     8f6:	20 f4       	brcc	.+8      	; 0x900 <Endpoint_ConfigureEndpointTable+0x4a>
     8f8:	4f 5f       	subi	r20, 0xFF	; 255
     8fa:	22 0f       	add	r18, r18
     8fc:	33 1f       	adc	r19, r19
     8fe:	f9 cf       	rjmp	.-14     	; 0x8f2 <Endpoint_ConfigureEndpointTable+0x3c>
     900:	42 95       	swap	r20
     902:	40 7f       	andi	r20, 0xF0	; 240
     904:	45 2b       	or	r20, r21
     906:	69 2f       	mov	r22, r25
     908:	66 1f       	adc	r22, r22
     90a:	66 27       	eor	r22, r22
     90c:	66 1f       	adc	r22, r22
     90e:	90 e4       	ldi	r25, 0x40	; 64
     910:	79 9f       	mul	r23, r25
     912:	90 01       	movw	r18, r0
     914:	11 24       	eor	r1, r1
     916:	62 2b       	or	r22, r18
     918:	99 df       	rcall	.-206    	; 0x84c <Endpoint_ConfigureEndpoint_Prv>
     91a:	88 23       	and	r24, r24
     91c:	01 f3       	breq	.-64     	; 0x8de <Endpoint_ConfigureEndpointTable+0x28>
     91e:	1f 5f       	subi	r17, 0xFF	; 255
     920:	25 96       	adiw	r28, 0x05	; 5
     922:	d0 cf       	rjmp	.-96     	; 0x8c4 <Endpoint_ConfigureEndpointTable+0xe>
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	08 95       	ret

00000930 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     930:	80 91 e6 01 	lds	r24, 0x01E6
     934:	87 fd       	sbrc	r24, 7
     936:	05 c0       	rjmp	.+10     	; 0x942 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     938:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     93c:	80 ff       	sbrs	r24, 0
     93e:	0e c0       	rjmp	.+28     	; 0x95c <Endpoint_ClearStatusStage+0x2c>
     940:	12 c0       	rjmp	.+36     	; 0x966 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     942:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     946:	82 fd       	sbrc	r24, 2
     948:	05 c0       	rjmp	.+10     	; 0x954 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     94a:	80 91 e5 01 	lds	r24, 0x01E5
     94e:	81 11       	cpse	r24, r1
     950:	f8 cf       	rjmp	.-16     	; 0x942 <Endpoint_ClearStatusStage+0x12>
     952:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     954:	80 91 e8 00 	lds	r24, 0x00E8
     958:	8b 77       	andi	r24, 0x7B	; 123
     95a:	08 c0       	rjmp	.+16     	; 0x96c <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     95c:	80 91 e5 01 	lds	r24, 0x01E5
     960:	81 11       	cpse	r24, r1
     962:	ea cf       	rjmp	.-44     	; 0x938 <Endpoint_ClearStatusStage+0x8>
     964:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     966:	80 91 e8 00 	lds	r24, 0x00E8
     96a:	8e 77       	andi	r24, 0x7E	; 126
     96c:	80 93 e8 00 	sts	0x00E8, r24
     970:	08 95       	ret

00000972 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     972:	80 91 e4 00 	lds	r24, 0x00E4
     976:	90 91 e5 00 	lds	r25, 0x00E5
     97a:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     97c:	20 91 ec 00 	lds	r18, 0x00EC
     980:	20 ff       	sbrs	r18, 0
     982:	21 c0       	rjmp	.+66     	; 0x9c6 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     984:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     988:	20 fd       	sbrc	r18, 0
     98a:	21 c0       	rjmp	.+66     	; 0x9ce <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     98c:	20 91 e5 01 	lds	r18, 0x01E5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     990:	22 23       	and	r18, r18
     992:	89 f0       	breq	.+34     	; 0x9b6 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     994:	25 30       	cpi	r18, 0x05	; 5
     996:	89 f0       	breq	.+34     	; 0x9ba <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     998:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     99c:	25 fd       	sbrc	r18, 5
     99e:	0f c0       	rjmp	.+30     	; 0x9be <Endpoint_WaitUntilReady+0x4c>
     9a0:	20 91 e4 00 	lds	r18, 0x00E4
     9a4:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     9a8:	28 17       	cp	r18, r24
     9aa:	39 07       	cpc	r19, r25
     9ac:	39 f3       	breq	.-50     	; 0x97c <Endpoint_WaitUntilReady+0xa>
     9ae:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     9b0:	41 f0       	breq	.+16     	; 0x9c2 <Endpoint_WaitUntilReady+0x50>
     9b2:	c9 01       	movw	r24, r18
     9b4:	e3 cf       	rjmp	.-58     	; 0x97c <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     9c2:	84 e0       	ldi	r24, 0x04	; 4
     9c4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9c6:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     9ca:	22 ff       	sbrs	r18, 2
     9cc:	df cf       	rjmp	.-66     	; 0x98c <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	08 95       	ret

000009d2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     9da:	4b d0       	rcall	.+150    	; 0xa72 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9dc:	52 d0       	rcall	.+164    	; 0xa82 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     9de:	c8 ed       	ldi	r28, 0xD8	; 216
     9e0:	d0 e0       	ldi	r29, 0x00	; 0
     9e2:	88 81       	ld	r24, Y
     9e4:	8f 77       	andi	r24, 0x7F	; 127
     9e6:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     9e8:	88 81       	ld	r24, Y
     9ea:	80 68       	ori	r24, 0x80	; 128
     9ec:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9ee:	88 81       	ld	r24, Y
     9f0:	8f 7d       	andi	r24, 0xDF	; 223
     9f2:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9f4:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     9f6:	10 92 e5 01 	sts	0x01E5, r1
	USB_Device_ConfigurationNumber  = 0;
     9fa:	10 92 e1 01 	sts	0x01E1, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     9fe:	10 92 e3 01 	sts	0x01E3, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     a02:	10 92 e2 01 	sts	0x01E2, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     a06:	00 ee       	ldi	r16, 0xE0	; 224
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	f8 01       	movw	r30, r16
     a0c:	80 81       	ld	r24, Z
     a0e:	8b 7f       	andi	r24, 0xFB	; 251
     a10:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     a12:	88 81       	ld	r24, Y
     a14:	81 60       	ori	r24, 0x01	; 1
     a16:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a18:	42 e0       	ldi	r20, 0x02	; 2
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	16 df       	rcall	.-468    	; 0x84c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a20:	e1 ee       	ldi	r30, 0xE1	; 225
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	8e 7f       	andi	r24, 0xFE	; 254
     a28:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a2a:	e2 ee       	ldi	r30, 0xE2	; 226
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	81 60       	ori	r24, 0x01	; 1
     a32:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a34:	80 81       	ld	r24, Z
     a36:	88 60       	ori	r24, 0x08	; 8
     a38:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a3a:	f8 01       	movw	r30, r16
     a3c:	80 81       	ld	r24, Z
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a42:	88 81       	ld	r24, Y
     a44:	80 61       	ori	r24, 0x10	; 16
     a46:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     a52:	e8 ed       	ldi	r30, 0xD8	; 216
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	8f 7e       	andi	r24, 0xEF	; 239
     a5a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     a5c:	e7 ed       	ldi	r30, 0xD7	; 215
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	81 60       	ori	r24, 0x01	; 1
     a64:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     a66:	84 e0       	ldi	r24, 0x04	; 4
     a68:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 e4 01 	sts	0x01E4, r24

	USB_ResetInterface();
     a70:	b0 cf       	rjmp	.-160    	; 0x9d2 <USB_ResetInterface>

00000a72 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     a72:	e8 ed       	ldi	r30, 0xD8	; 216
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a7c:	10 92 e2 00 	sts	0x00E2, r1
     a80:	08 95       	ret

00000a82 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     a82:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a86:	10 92 e1 00 	sts	0x00E1, r1
     a8a:	08 95       	ret

00000a8c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	ef 93       	push	r30
     aac:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     aae:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     ab2:	82 ff       	sbrs	r24, 2
     ab4:	0a c0       	rjmp	.+20     	; 0xaca <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     ab6:	80 91 e2 00 	lds	r24, 0x00E2
     aba:	82 ff       	sbrs	r24, 2
     abc:	06 c0       	rjmp	.+12     	; 0xaca <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     abe:	80 91 e1 00 	lds	r24, 0x00E1
     ac2:	8b 7f       	andi	r24, 0xFB	; 251
     ac4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ac8:	2c d2       	rcall	.+1112   	; 0xf22 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     aca:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     ace:	80 ff       	sbrs	r24, 0
     ad0:	1d c0       	rjmp	.+58     	; 0xb0c <__stack+0xd>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     ad2:	80 91 d8 00 	lds	r24, 0x00D8
     ad6:	80 ff       	sbrs	r24, 0
     ad8:	19 c0       	rjmp	.+50     	; 0xb0c <__stack+0xd>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     ada:	80 91 da 00 	lds	r24, 0x00DA
     ade:	8e 7f       	andi	r24, 0xFE	; 254
     ae0:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     ae4:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     ae8:	80 ff       	sbrs	r24, 0
     aea:	0c c0       	rjmp	.+24     	; 0xb04 <__stack+0x5>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     aec:	80 e1       	ldi	r24, 0x10	; 16
     aee:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     af0:	82 e1       	ldi	r24, 0x12	; 18
     af2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     af4:	09 b4       	in	r0, 0x29	; 41
     af6:	00 fe       	sbrs	r0, 0
     af8:	fd cf       	rjmp	.-6      	; 0xaf4 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	80 93 e5 01 	sts	0x01E5, r24
			EVENT_USB_Device_Connect();
     b00:	6f d4       	rcall	.+2270   	; 0x13e0 <EVENT_USB_Device_Connect>
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <__stack+0xd>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b04:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     b06:	10 92 e5 01 	sts	0x01E5, r1
			EVENT_USB_Device_Disconnect();
     b0a:	6c d4       	rcall	.+2264   	; 0x13e4 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     b0c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     b10:	80 ff       	sbrs	r24, 0
     b12:	18 c0       	rjmp	.+48     	; 0xb44 <__stack+0x45>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     b14:	80 91 e2 00 	lds	r24, 0x00E2
     b18:	80 ff       	sbrs	r24, 0
     b1a:	14 c0       	rjmp	.+40     	; 0xb44 <__stack+0x45>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b1c:	80 91 e2 00 	lds	r24, 0x00E2
     b20:	8e 7f       	andi	r24, 0xFE	; 254
     b22:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b26:	80 91 e2 00 	lds	r24, 0x00E2
     b2a:	80 61       	ori	r24, 0x10	; 16
     b2c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     b30:	80 91 d8 00 	lds	r24, 0x00D8
     b34:	80 62       	ori	r24, 0x20	; 32
     b36:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b3a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     b3c:	85 e0       	ldi	r24, 0x05	; 5
     b3e:	80 93 e5 01 	sts	0x01E5, r24
		EVENT_USB_Device_Suspend();
     b42:	ef d1       	rcall	.+990    	; 0xf22 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b44:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b48:	84 ff       	sbrs	r24, 4
     b4a:	2f c0       	rjmp	.+94     	; 0xbaa <__stack+0xab>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b4c:	80 91 e2 00 	lds	r24, 0x00E2
     b50:	84 ff       	sbrs	r24, 4
     b52:	2b c0       	rjmp	.+86     	; 0xbaa <__stack+0xab>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b58:	82 e1       	ldi	r24, 0x12	; 18
     b5a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b5c:	09 b4       	in	r0, 0x29	; 41
     b5e:	00 fe       	sbrs	r0, 0
     b60:	fd cf       	rjmp	.-6      	; 0xb5c <__stack+0x5d>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b62:	80 91 d8 00 	lds	r24, 0x00D8
     b66:	8f 7d       	andi	r24, 0xDF	; 223
     b68:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     b6c:	80 91 e1 00 	lds	r24, 0x00E1
     b70:	8f 7e       	andi	r24, 0xEF	; 239
     b72:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     b76:	80 91 e2 00 	lds	r24, 0x00E2
     b7a:	8f 7e       	andi	r24, 0xEF	; 239
     b7c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b80:	80 91 e2 00 	lds	r24, 0x00E2
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b8a:	80 91 e1 01 	lds	r24, 0x01E1
     b8e:	88 23       	and	r24, r24
     b90:	11 f0       	breq	.+4      	; 0xb96 <__stack+0x97>
		  USB_DeviceState = DEVICE_STATE_Configured;
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	07 c0       	rjmp	.+14     	; 0xba4 <__stack+0xa5>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b96:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     b9a:	87 ff       	sbrs	r24, 7
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <__stack+0xa3>
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <__stack+0xa5>
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	80 93 e5 01 	sts	0x01E5, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     ba8:	bc d1       	rcall	.+888    	; 0xf22 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     baa:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     bae:	83 ff       	sbrs	r24, 3
     bb0:	27 c0       	rjmp	.+78     	; 0xc00 <__stack+0x101>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     bb2:	80 91 e2 00 	lds	r24, 0x00E2
     bb6:	83 ff       	sbrs	r24, 3
     bb8:	23 c0       	rjmp	.+70     	; 0xc00 <__stack+0x101>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     bba:	80 91 e1 00 	lds	r24, 0x00E1
     bbe:	87 7f       	andi	r24, 0xF7	; 247
     bc0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	80 93 e5 01 	sts	0x01E5, r24
		USB_Device_ConfigurationNumber = 0;
     bca:	10 92 e1 01 	sts	0x01E1, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     bce:	80 91 e1 00 	lds	r24, 0x00E1
     bd2:	8e 7f       	andi	r24, 0xFE	; 254
     bd4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     bd8:	80 91 e2 00 	lds	r24, 0x00E2
     bdc:	8e 7f       	andi	r24, 0xFE	; 254
     bde:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     be2:	80 91 e2 00 	lds	r24, 0x00E2
     be6:	80 61       	ori	r24, 0x10	; 16
     be8:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     bec:	42 e0       	ldi	r20, 0x02	; 2
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	2c de       	rcall	.-936    	; 0x84c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     bf4:	80 91 f0 00 	lds	r24, 0x00F0
     bf8:	88 60       	ori	r24, 0x08	; 8
     bfa:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     bfe:	91 d1       	rcall	.+802    	; 0xf22 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c00:	ff 91       	pop	r31
     c02:	ef 91       	pop	r30
     c04:	bf 91       	pop	r27
     c06:	af 91       	pop	r26
     c08:	9f 91       	pop	r25
     c0a:	8f 91       	pop	r24
     c0c:	7f 91       	pop	r23
     c0e:	6f 91       	pop	r22
     c10:	5f 91       	pop	r21
     c12:	4f 91       	pop	r20
     c14:	3f 91       	pop	r19
     c16:	2f 91       	pop	r18
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	0f 90       	pop	r0
     c1e:	1f 90       	pop	r1
     c20:	18 95       	reti

00000c22 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	0f 92       	push	r0
     c2a:	11 24       	eor	r1, r1
     c2c:	2f 93       	push	r18
     c2e:	3f 93       	push	r19
     c30:	4f 93       	push	r20
     c32:	5f 93       	push	r21
     c34:	6f 93       	push	r22
     c36:	7f 93       	push	r23
     c38:	8f 93       	push	r24
     c3a:	9f 93       	push	r25
     c3c:	af 93       	push	r26
     c3e:	bf 93       	push	r27
     c40:	cf 93       	push	r28
     c42:	ef 93       	push	r30
     c44:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c46:	c0 91 e9 00 	lds	r28, 0x00E9
     c4a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c4c:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c50:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     c54:	80 91 f0 00 	lds	r24, 0x00F0
     c58:	87 7f       	andi	r24, 0xF7	; 247
     c5a:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     c5e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     c60:	1b d0       	rcall	.+54     	; 0xc98 <USB_Device_ProcessControlRequest>
     c62:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c66:	80 91 f0 00 	lds	r24, 0x00F0
     c6a:	88 60       	ori	r24, 0x08	; 8
     c6c:	80 93 f0 00 	sts	0x00F0, r24
     c70:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     c74:	ff 91       	pop	r31
     c76:	ef 91       	pop	r30
     c78:	cf 91       	pop	r28
     c7a:	bf 91       	pop	r27
     c7c:	af 91       	pop	r26
     c7e:	9f 91       	pop	r25
     c80:	8f 91       	pop	r24
     c82:	7f 91       	pop	r23
     c84:	6f 91       	pop	r22
     c86:	5f 91       	pop	r21
     c88:	4f 91       	pop	r20
     c8a:	3f 91       	pop	r19
     c8c:	2f 91       	pop	r18
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	aa 97       	sbiw	r28, 0x2a	; 42
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	e6 ee       	ldi	r30, 0xE6	; 230
     cb0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     cb2:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     cb6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     cb8:	21 e0       	ldi	r18, 0x01	; 1
     cba:	ee 3e       	cpi	r30, 0xEE	; 238
     cbc:	f2 07       	cpc	r31, r18
     cbe:	c9 f7       	brne	.-14     	; 0xcb2 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     cc0:	9d d3       	rcall	.+1850   	; 0x13fc <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cc2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     cc6:	83 ff       	sbrs	r24, 3
     cc8:	14 c1       	rjmp	.+552    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     cca:	20 91 e6 01 	lds	r18, 0x01E6

		switch (USB_ControlRequest.bRequest)
     cce:	30 91 e7 01 	lds	r19, 0x01E7
     cd2:	83 2f       	mov	r24, r19
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	8a 30       	cpi	r24, 0x0A	; 10
     cd8:	91 05       	cpc	r25, r1
     cda:	08 f0       	brcs	.+2      	; 0xcde <USB_Device_ProcessControlRequest+0x46>
     cdc:	0a c1       	rjmp	.+532    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
     cde:	fc 01       	movw	r30, r24
     ce0:	ea 5a       	subi	r30, 0xAA	; 170
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	15 c4       	rjmp	.+2090   	; 0x1510 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ce6:	20 38       	cpi	r18, 0x80	; 128
     ce8:	81 f0       	breq	.+32     	; 0xd0a <USB_Device_ProcessControlRequest+0x72>
     cea:	22 38       	cpi	r18, 0x82	; 130
     cec:	09 f0       	breq	.+2      	; 0xcf0 <USB_Device_ProcessControlRequest+0x58>
     cee:	01 c1       	rjmp	.+514    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cf0:	80 91 ea 01 	lds	r24, 0x01EA
     cf4:	8f 70       	andi	r24, 0x0F	; 15
     cf6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     cfa:	80 91 eb 00 	lds	r24, 0x00EB
     cfe:	85 fb       	bst	r24, 5
     d00:	88 27       	eor	r24, r24
     d02:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d04:	10 92 e9 00 	sts	0x00E9, r1
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     d0a:	80 91 e2 01 	lds	r24, 0x01E2
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     d0e:	90 91 e3 01 	lds	r25, 0x01E3
     d12:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     d14:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d16:	90 91 e8 00 	lds	r25, 0x00E8
     d1a:	97 7f       	andi	r25, 0xF7	; 247
     d1c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     d20:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     d24:	10 92 f1 00 	sts	0x00F1, r1
     d28:	c1 c0       	rjmp	.+386    	; 0xeac <USB_Device_ProcessControlRequest+0x214>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d2a:	82 2f       	mov	r24, r18
     d2c:	8d 7f       	andi	r24, 0xFD	; 253
     d2e:	09 f0       	breq	.+2      	; 0xd32 <USB_Device_ProcessControlRequest+0x9a>
     d30:	e0 c0       	rjmp	.+448    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     d32:	22 23       	and	r18, r18
     d34:	19 f0       	breq	.+6      	; 0xd3c <USB_Device_ProcessControlRequest+0xa4>
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	61 f0       	breq	.+24     	; 0xd52 <USB_Device_ProcessControlRequest+0xba>
     d3a:	db c0       	rjmp	.+438    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     d3c:	80 91 e8 01 	lds	r24, 0x01E8
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	09 f0       	breq	.+2      	; 0xd46 <USB_Device_ProcessControlRequest+0xae>
     d44:	d6 c0       	rjmp	.+428    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     d46:	33 30       	cpi	r19, 0x03	; 3
     d48:	09 f0       	breq	.+2      	; 0xd4c <USB_Device_ProcessControlRequest+0xb4>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	80 93 e3 01 	sts	0x01E3, r24
     d50:	28 c0       	rjmp	.+80     	; 0xda2 <USB_Device_ProcessControlRequest+0x10a>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     d52:	80 91 e8 01 	lds	r24, 0x01E8
     d56:	81 11       	cpse	r24, r1
     d58:	24 c0       	rjmp	.+72     	; 0xda2 <USB_Device_ProcessControlRequest+0x10a>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     d5a:	20 91 ea 01 	lds	r18, 0x01EA
     d5e:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     d60:	09 f4       	brne	.+2      	; 0xd64 <USB_Device_ProcessControlRequest+0xcc>
     d62:	c7 c0       	rjmp	.+398    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d64:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     d68:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     d6c:	80 ff       	sbrs	r24, 0
     d6e:	19 c0       	rjmp	.+50     	; 0xda2 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d70:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     d74:	33 30       	cpi	r19, 0x03	; 3
     d76:	11 f4       	brne	.+4      	; 0xd7c <USB_Device_ProcessControlRequest+0xe4>
     d78:	80 62       	ori	r24, 0x20	; 32
     d7a:	11 c0       	rjmp	.+34     	; 0xd9e <USB_Device_ProcessControlRequest+0x106>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     d7c:	80 61       	ori	r24, 0x10	; 16
     d7e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <USB_Device_ProcessControlRequest+0xf4>
     d8a:	88 0f       	add	r24, r24
     d8c:	0a 94       	dec	r0
     d8e:	ea f7       	brpl	.-6      	; 0xd8a <USB_Device_ProcessControlRequest+0xf2>
     d90:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     d94:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     d98:	80 91 eb 00 	lds	r24, 0x00EB
     d9c:	88 60       	ori	r24, 0x08	; 8
     d9e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     da2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     da6:	80 91 e8 00 	lds	r24, 0x00E8
     daa:	87 7f       	andi	r24, 0xF7	; 247
     dac:	82 c0       	rjmp	.+260    	; 0xeb2 <USB_Device_ProcessControlRequest+0x21a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     dae:	21 11       	cpse	r18, r1
     db0:	a0 c0       	rjmp	.+320    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     db2:	10 91 e8 01 	lds	r17, 0x01E8
     db6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     db8:	80 91 e3 00 	lds	r24, 0x00E3
     dbc:	80 78       	andi	r24, 0x80	; 128
     dbe:	81 2b       	or	r24, r17
     dc0:	80 93 e3 00 	sts	0x00E3, r24
     dc4:	80 91 e8 00 	lds	r24, 0x00E8
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     dce:	b0 dd       	rcall	.-1184   	; 0x930 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dd0:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     dd4:	80 ff       	sbrs	r24, 0
     dd6:	fc cf       	rjmp	.-8      	; 0xdd0 <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     dd8:	80 91 e3 00 	lds	r24, 0x00E3
     ddc:	80 68       	ori	r24, 0x80	; 128
     dde:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     de2:	11 23       	and	r17, r17
     de4:	11 f0       	breq	.+4      	; 0xdea <USB_Device_ProcessControlRequest+0x152>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	01 c0       	rjmp	.+2      	; 0xdec <USB_Device_ProcessControlRequest+0x154>
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	80 93 e5 01 	sts	0x01E5, r24
     df0:	80 c0       	rjmp	.+256    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     df2:	20 58       	subi	r18, 0x80	; 128
     df4:	22 30       	cpi	r18, 0x02	; 2
     df6:	08 f0       	brcs	.+2      	; 0xdfa <USB_Device_ProcessControlRequest+0x162>
     df8:	7c c0       	rjmp	.+248    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     dfa:	80 91 e8 01 	lds	r24, 0x01E8
     dfe:	90 91 e9 01 	lds	r25, 0x01E9
     e02:	8c 3d       	cpi	r24, 0xDC	; 220
     e04:	23 e0       	ldi	r18, 0x03	; 3
     e06:	92 07       	cpc	r25, r18
     e08:	71 f5       	brne	.+92     	; 0xe66 <USB_Device_ProcessControlRequest+0x1ce>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     e0e:	8a e2       	ldi	r24, 0x2A	; 42
     e10:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e12:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e14:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     e16:	de 01       	movw	r26, r28
     e18:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e1a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     e1c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e1e:	51 e2       	ldi	r21, 0x21	; 33
     e20:	e3 2f       	mov	r30, r19
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	50 93 57 00 	sts	0x0057, r21
     e28:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     e2a:	20 ff       	sbrs	r18, 0
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <USB_Device_ProcessControlRequest+0x19c>
					{
						SerialByte >>= 4;
     e2e:	e2 95       	swap	r30
     e30:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     e32:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     e34:	ef 70       	andi	r30, 0x0F	; 15
     e36:	8e 2f       	mov	r24, r30
     e38:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     e3a:	ea 30       	cpi	r30, 0x0A	; 10
     e3c:	10 f0       	brcs	.+4      	; 0xe42 <USB_Device_ProcessControlRequest+0x1aa>
     e3e:	c7 96       	adiw	r24, 0x37	; 55
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <USB_Device_ProcessControlRequest+0x1ac>
     e42:	c0 96       	adiw	r24, 0x30	; 48
     e44:	8d 93       	st	X+, r24
     e46:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e48:	2f 5f       	subi	r18, 0xFF	; 255
     e4a:	24 31       	cpi	r18, 0x14	; 20
     e4c:	49 f7       	brne	.-46     	; 0xe20 <USB_Device_ProcessControlRequest+0x188>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e4e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e50:	80 91 e8 00 	lds	r24, 0x00E8
     e54:	87 7f       	andi	r24, 0xF7	; 247
     e56:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     e5a:	6a e2       	ldi	r22, 0x2A	; 42
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	ce 01       	movw	r24, r28
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	3b dc       	rcall	.-1930   	; 0x6da <Endpoint_Write_Control_Stream_LE>
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <USB_Device_ProcessControlRequest+0x1f2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     e66:	ae 01       	movw	r20, r28
     e68:	4f 5f       	subi	r20, 0xFF	; 255
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	60 91 ea 01 	lds	r22, 0x01EA
     e70:	ae d9       	rcall	.-3236   	; 0x1ce <CALLBACK_USB_GetDescriptor>
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	09 f4       	brne	.+2      	; 0xe78 <USB_Device_ProcessControlRequest+0x1e0>
     e76:	3d c0       	rjmp	.+122    	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
     e78:	20 91 e8 00 	lds	r18, 0x00E8
     e7c:	27 7f       	andi	r18, 0xF7	; 247
     e7e:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     e82:	bc 01       	movw	r22, r24
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	83 dc       	rcall	.-1786   	; 0x790 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e8a:	80 91 e8 00 	lds	r24, 0x00E8
     e8e:	8b 77       	andi	r24, 0x7B	; 123
     e90:	80 93 e8 00 	sts	0x00E8, r24
     e94:	2e c0       	rjmp	.+92     	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     e96:	20 38       	cpi	r18, 0x80	; 128
     e98:	61 f5       	brne	.+88     	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e9a:	80 91 e8 00 	lds	r24, 0x00E8
     e9e:	87 7f       	andi	r24, 0xF7	; 247
     ea0:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     ea4:	80 91 e1 01 	lds	r24, 0x01E1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ea8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     eac:	80 91 e8 00 	lds	r24, 0x00E8
     eb0:	8e 77       	andi	r24, 0x7E	; 126
     eb2:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     eb6:	3c dd       	rcall	.-1416   	; 0x930 <Endpoint_ClearStatusStage>
     eb8:	1c c0       	rjmp	.+56     	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     eba:	21 11       	cpse	r18, r1
     ebc:	1a c0       	rjmp	.+52     	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     ebe:	90 91 e8 01 	lds	r25, 0x01E8
     ec2:	92 30       	cpi	r25, 0x02	; 2
     ec4:	b0 f4       	brcc	.+44     	; 0xef2 <USB_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ec6:	80 91 e8 00 	lds	r24, 0x00E8
     eca:	87 7f       	andi	r24, 0xF7	; 247
     ecc:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     ed0:	90 93 e1 01 	sts	0x01E1, r25

	Endpoint_ClearStatusStage();
     ed4:	2d dd       	rcall	.-1446   	; 0x930 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     ed6:	80 91 e1 01 	lds	r24, 0x01E1
     eda:	81 11       	cpse	r24, r1
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <USB_Device_ProcessControlRequest+0x24e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ede:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ee2:	87 ff       	sbrs	r24, 7
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <USB_Device_ProcessControlRequest+0x252>
     ee6:	84 e0       	ldi	r24, 0x04	; 4
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <USB_Device_ProcessControlRequest+0x254>
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	80 93 e5 01 	sts	0x01E5, r24

	EVENT_USB_Device_ConfigurationChanged();
     ef0:	7b d2       	rcall	.+1270   	; 0x13e8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ef2:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     ef6:	83 ff       	sbrs	r24, 3
     ef8:	0a c0       	rjmp	.+20     	; 0xf0e <USB_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     efa:	80 91 e8 00 	lds	r24, 0x00E8
     efe:	87 7f       	andi	r24, 0xF7	; 247
     f00:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f04:	80 91 eb 00 	lds	r24, 0x00EB
     f08:	80 62       	ori	r24, 0x20	; 32
     f0a:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     f0e:	aa 96       	adiw	r28, 0x2a	; 42
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	08 95       	ret

00000f22 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     f22:	08 95       	ret

00000f24 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     f24:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     f26:	80 91 e5 01 	lds	r24, 0x01E5
     f2a:	88 23       	and	r24, r24
     f2c:	a9 f0       	breq	.+42     	; 0xf58 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f2e:	80 91 e9 00 	lds	r24, 0x00E9
     f32:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f34:	90 91 ec 00 	lds	r25, 0x00EC
     f38:	90 ff       	sbrs	r25, 0
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <USB_USBTask+0x1c>
     f3c:	90 e8       	ldi	r25, 0x80	; 128
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <USB_USBTask+0x1e>
     f40:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f42:	c9 2f       	mov	r28, r25
     f44:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f46:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f4a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     f4e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     f50:	a3 de       	rcall	.-698    	; 0xc98 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f52:	cf 70       	andi	r28, 0x0F	; 15
     f54:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <init_timer3>:


// sets up timer 3 for capture
void init_timer3(void){
	
	TCCR3A = 0; // default
     f5c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = (1<<ICNC3); // Input Capture Noise Filter on
     f60:	80 e8       	ldi	r24, 0x80	; 128
     f62:	80 93 91 00 	sts	0x0091, r24
	TCCR3C = 0; // default	
     f66:	10 92 92 00 	sts	0x0092, r1
     f6a:	08 95       	ret

00000f6c <trig_rising>:
}

// sets timer to trigger on rising edge ICP3
void trig_rising(void){
	TCCR3B |= (1<<ICES3);
     f6c:	e1 e9       	ldi	r30, 0x91	; 145
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 64       	ori	r24, 0x40	; 64
     f74:	80 83       	st	Z, r24
     f76:	08 95       	ret

00000f78 <trig_falling>:
}

// sets timer to trigger on falling edge ICP3
void trig_falling(void){
	TCCR3B &= !(1<<ICES3);
     f78:	e1 e9       	ldi	r30, 0x91	; 145
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	10 82       	st	Z, r1
     f80:	08 95       	ret

00000f82 <start_input_capture>:
}

// starts the input capture timer system
void start_input_capture(void){
	// make sure we start from zero
	TCNT3 = 0; 
     f82:	10 92 95 00 	sts	0x0095, r1
     f86:	10 92 94 00 	sts	0x0094, r1
	TIFR3 |= (1<<ICF3)|(1<<TOV3); // clear flags by writing '1'
     f8a:	88 b3       	in	r24, 0x18	; 24
     f8c:	81 62       	ori	r24, 0x21	; 33
     f8e:	88 bb       	out	0x18, r24	; 24
	
	// set the prescaler to start the timer
	// set to clk/64. For 16MHz we have 4uS period or ticks
	// for 16bit timer max time is 0.262144 S
	// and for 160mS dint time we have 40 000 counts :) 
	TCCR3B &= !(1<<CS32);
     f90:	e1 e9       	ldi	r30, 0x91	; 145
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	10 82       	st	Z, r1
	TCCR3B |= (1<<CS31)|(1<<CS30);
     f98:	80 81       	ld	r24, Z
     f9a:	83 60       	ori	r24, 0x03	; 3
     f9c:	80 83       	st	Z, r24
     f9e:	08 95       	ret

00000fa0 <stop_and_clear_input_capture>:
}

// stops the timer and clears any outstanding flags
void stop_and_clear_input_capture(void){
	TCCR3B &= !((1<<CS32)|(1<<CS31)|(1<<CS30)); // turn off by dissconnecting the clock
     fa0:	e1 e9       	ldi	r30, 0x91	; 145
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	10 82       	st	Z, r1
	TIFR3 |= (1<<ICF3)|(1<<TOV3); // clear flags by writing '1'
     fa8:	88 b3       	in	r24, 0x18	; 24
     faa:	81 62       	ori	r24, 0x21	; 33
     fac:	88 bb       	out	0x18, r24	; 24
     fae:	08 95       	ret

00000fb0 <get_capture_time>:
}

// returns the input capture register value
uint16_t get_capture_time(void){
	uint16_t cap = ICR3;
     fb0:	80 91 96 00 	lds	r24, 0x0096
     fb4:	90 91 97 00 	lds	r25, 0x0097
	return cap;
     fb8:	08 95       	ret

00000fba <LEDs_SetAllLEDs>:
				PORTD &= ~(LEDMask & LEDS_PORTD_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
     fba:	25 b1       	in	r18, 0x05	; 5
     fbc:	98 2f       	mov	r25, r24
     fbe:	91 78       	andi	r25, 0x81	; 129
     fc0:	90 95       	com	r25
     fc2:	21 68       	ori	r18, 0x81	; 129
     fc4:	92 23       	and	r25, r18
     fc6:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD & ~LEDS_PORTD_LEDS) |  (LEDMask & LEDS_PORTD_LEDS));
     fc8:	9b b1       	in	r25, 0x0b	; 11
     fca:	80 72       	andi	r24, 0x20	; 32
     fcc:	9f 7d       	andi	r25, 0xDF	; 223
     fce:	89 2b       	or	r24, r25
     fd0:	8b b9       	out	0x0b, r24	; 11
     fd2:	08 95       	ret

00000fd4 <Beep>:
		}
		
		
		/* makes a quick beep */ 
		static inline void Beep(void){
			C_CLEARBIT(BUZZ);
     fd4:	89 98       	cbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd6:	8f e3       	ldi	r24, 0x3F	; 63
     fd8:	9c e9       	ldi	r25, 0x9C	; 156
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <Beep+0x6>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <Beep+0xc>
     fe0:	00 00       	nop
			_delay_ms(10);
			C_SETBIT(BUZZ);
     fe2:	89 9a       	sbi	0x11, 1	; 17
     fe4:	08 95       	ret

00000fe6 <SetupUSART1>:
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart1_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
     fe6:	87 e6       	ldi	r24, 0x67	; 103
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a7 c9       	rjmp	.-3250   	; 0x33a <uart1_init>

00000fec <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     fec:	84 b7       	in	r24, 0x34	; 52
     fee:	87 7f       	andi	r24, 0xF7	; 247
     ff0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     ff2:	88 e1       	ldi	r24, 0x18	; 24
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	80 93 60 00 	sts	0x0060, r24
     ffc:	10 92 60 00 	sts	0x0060, r1
    1000:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	80 e8       	ldi	r24, 0x80	; 128
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	80 93 61 00 	sts	0x0061, r24
    100e:	90 93 61 00 	sts	0x0061, r25
    1012:	0f be       	out	0x3f, r0	; 63
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	
	SetupUSART1();
    1014:	e8 df       	rcall	.-48     	; 0xfe6 <SetupUSART1>
	init_timer3();
    1016:	a2 df       	rcall	.-188    	; 0xf5c <init_timer3>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
    1018:	84 b1       	in	r24, 0x04	; 4
    101a:	81 68       	ori	r24, 0x81	; 129
    101c:	84 b9       	out	0x04, r24	; 4
				PORTB |=  LEDS_PORTB_LEDS;
    101e:	85 b1       	in	r24, 0x05	; 5
    1020:	81 68       	ori	r24, 0x81	; 129
    1022:	85 b9       	out	0x05, r24	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
    1024:	55 9a       	sbi	0x0a, 5	; 10
				PORTD &=  ~LEDS_PORTD_LEDS;
    1026:	5d 98       	cbi	0x0b, 5	; 11
	
	LEDs_Init();
	USB_Init();
    1028:	14 dd       	rcall	.-1496   	; 0xa52 <USB_Init>
	
	//** Sets up the pins and hardware for the dual slope front end
	static inline void Dual_Slope_Init(void)
		{
			// set PORTB I/O
			SETBITMASK(DDRB, PORTB_OUTS);
    102a:	84 b1       	in	r24, 0x04	; 4
    102c:	81 6f       	ori	r24, 0xF1	; 241
    102e:	84 b9       	out	0x04, r24	; 4
			//CLEARBITMASK(DDRB, PORTB_INS);
			
			// set PORTC I/O
			SETBITMASK(DDRC, PORTC_OUTS);
    1030:	3e 9a       	sbi	0x07, 6	; 7
			CLEARBITMASK(DDRC, PORTC_INS);
    1032:	3f 98       	cbi	0x07, 7	; 7
			
			// set PORTD I/O
			SETBITMASK(DDRD, PORTD_OUTS);
    1034:	8a b1       	in	r24, 0x0a	; 10
    1036:	84 6e       	ori	r24, 0xE4	; 228
    1038:	8a b9       	out	0x0a, r24	; 10
			CLEARBITMASK(DDRD, PORTD_INS);
    103a:	50 98       	cbi	0x0a, 0	; 10
			
			// set PORTE I/O
			//SETBITMASK(DDRE, PORTE_OUTS);
			CLEARBITMASK(DDRE, PORTE_INS);
    103c:	6a 98       	cbi	0x0d, 2	; 13
			
			// set PORTF I/O
			SETBITMASK(DDRF, PORTF_OUTS);
    103e:	80 b3       	in	r24, 0x10	; 16
    1040:	82 6f       	ori	r24, 0xF2	; 242
    1042:	80 bb       	out	0x10, r24	; 16
			CLEARBITMASK(DDRF, PORTF_INS);
    1044:	80 98       	cbi	0x10, 0	; 16
			
			C_SETBIT(BUZZ);		//Buzzer off
    1046:	89 9a       	sbi	0x11, 1	; 17
			
			C_SETBIT(ARInh);		//Inh input
    1048:	8f 9a       	sbi	0x11, 7	; 17
			// dont need worry about A/B/C then!
			C_SETBIT(IntInhSwt);	//Disable Input
    104a:	5e 9a       	sbi	0x0b, 6	; 11
			
			C_SETBIT(ZeroSwt);		//Zero Cap
    104c:	5f 9a       	sbi	0x0b, 7	; 11
	Dual_Slope_Init();
	ENC_Init(); // setup encoder pins and interupts 
    104e:	f1 c8       	rjmp	.-3614   	; 0x232 <ENC_Init>

00001050 <SendInt16LCD>:
		return result;
	}
	
}

void SendInt16LCD(int16_t val, uint8_t cmd0, uint8_t cmd1){
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	1f 92       	push	r1
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	8c 01       	movw	r16, r24
    1060:	86 2f       	mov	r24, r22
	// we need to send data to the lcd in the correct structure
	
	// send command first
	uart1_putc(cmd0);
    1062:	49 83       	std	Y+1, r20	; 0x01
    1064:	83 d9       	rcall	.-3322   	; 0x36c <uart1_putc>
	uart1_putc(cmd1);
    1066:	49 81       	ldd	r20, Y+1	; 0x01
    1068:	84 2f       	mov	r24, r20
    106a:	80 d9       	rcall	.-3328   	; 0x36c <uart1_putc>
	
	// now send data
	uart1_putc(0x0F & val >> 12);
    106c:	81 2f       	mov	r24, r17
    106e:	82 95       	swap	r24
    1070:	8f 70       	andi	r24, 0x0F	; 15
    1072:	7c d9       	rcall	.-3336   	; 0x36c <uart1_putc>
	uart1_putc(0x0F & val >> 8);
    1074:	81 2f       	mov	r24, r17
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	79 d9       	rcall	.-3342   	; 0x36c <uart1_putc>
	uart1_putc(0x0F & val >> 4);
    107a:	c8 01       	movw	r24, r16
    107c:	24 e0       	ldi	r18, 0x04	; 4
    107e:	95 95       	asr	r25
    1080:	87 95       	ror	r24
    1082:	2a 95       	dec	r18
    1084:	e1 f7       	brne	.-8      	; 0x107e <SendInt16LCD+0x2e>
    1086:	8f 70       	andi	r24, 0x0F	; 15
    1088:	71 d9       	rcall	.-3358   	; 0x36c <uart1_putc>
	uart1_putc(0x0F & val );
    108a:	80 2f       	mov	r24, r16
    108c:	8f 70       	andi	r24, 0x0F	; 15
}
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
	
	// now send data
	uart1_putc(0x0F & val >> 12);
	uart1_putc(0x0F & val >> 8);
	uart1_putc(0x0F & val >> 4);
	uart1_putc(0x0F & val );
    1098:	69 c9       	rjmp	.-3374   	; 0x36c <uart1_putc>

0000109a <SendUInt8LCD>:
}

void SendUInt8LCD(uint8_t byte, uint8_t cmd0, uint8_t cmd1){
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	1f 92       	push	r1
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	18 2f       	mov	r17, r24
    10a8:	86 2f       	mov	r24, r22
		// send command first
		uart1_putc(cmd0);
    10aa:	49 83       	std	Y+1, r20	; 0x01
    10ac:	5f d9       	rcall	.-3394   	; 0x36c <uart1_putc>
		uart1_putc(cmd1);
    10ae:	49 81       	ldd	r20, Y+1	; 0x01
    10b0:	84 2f       	mov	r24, r20
    10b2:	5c d9       	rcall	.-3400   	; 0x36c <uart1_putc>
		
		// now send data
		uart1_putc(0x0F & byte >> 4);
    10b4:	81 2f       	mov	r24, r17
    10b6:	82 95       	swap	r24
    10b8:	8f 70       	andi	r24, 0x0F	; 15
    10ba:	58 d9       	rcall	.-3408   	; 0x36c <uart1_putc>
		uart1_putc(0x0F & byte);
    10bc:	81 2f       	mov	r24, r17
    10be:	8f 70       	andi	r24, 0x0F	; 15
}
    10c0:	0f 90       	pop	r0
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
		uart1_putc(cmd0);
		uart1_putc(cmd1);
		
		// now send data
		uart1_putc(0x0F & byte >> 4);
		uart1_putc(0x0F & byte);
    10c8:	51 c9       	rjmp	.-3422   	; 0x36c <uart1_putc>

000010ca <CheckBatt>:
}

void CheckBatt(void){
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	2a 97       	sbiw	r28, 0x0a	; 10
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
	uint32_t vbatt = ADC_Start(ADC_VBAT_CHANNEL); // read the ADC voltage
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	4f d8       	rcall	.-3938   	; 0x188 <ADC_Start>
	vbatt = vbatt*ADC_AVcc_VALUE; // * ~5000mV
    10ea:	9c 01       	movw	r18, r24
    10ec:	aa eb       	ldi	r26, 0xBA	; 186
    10ee:	b3 e1       	ldi	r27, 0x13	; 19
    10f0:	15 d2       	rcall	.+1066   	; 0x151c <__umulhisi3>
    10f2:	6b 01       	movw	r12, r22
    10f4:	7c 01       	movw	r14, r24
	vbatt = vbatt >> 10; // /1024 , thus vbatt * 5000/1024 to scale
    10f6:	3a e0       	ldi	r19, 0x0A	; 10
    10f8:	f6 94       	lsr	r15
    10fa:	e7 94       	ror	r14
    10fc:	d7 94       	ror	r13
    10fe:	c7 94       	ror	r12
    1100:	3a 95       	dec	r19
    1102:	d1 f7       	brne	.-12     	; 0x10f8 <CheckBatt+0x2e>
	SendInt16LCD(vbatt, CMD_BATT0, CMD_BATT1); // should only take lower 16bits?
    1104:	48 ef       	ldi	r20, 0xF8	; 248
    1106:	67 ef       	ldi	r22, 0xF7	; 247
    1108:	c6 01       	movw	r24, r12
    110a:	a2 df       	rcall	.-188    	; 0x1050 <SendInt16LCD>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    110c:	2a e0       	ldi	r18, 0x0A	; 10
    110e:	ae 01       	movw	r20, r28
    1110:	4f 5f       	subi	r20, 0xFF	; 255
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
    1114:	c7 01       	movw	r24, r14
    1116:	b6 01       	movw	r22, r12
    1118:	24 d2       	rcall	.+1096   	; 0x1562 <__ultoa_ncheck>
	char buffer[10];
	ultoa(vbatt, buffer, 10);
	fputs(buffer, &USBSerialStream);
    111a:	63 ed       	ldi	r22, 0xD3	; 211
    111c:	71 e0       	ldi	r23, 0x01	; 1
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	59 d2       	rcall	.+1202   	; 0x15d6 <fputs>
	fputs(" mV Batt\r\n", &USBSerialStream);
    1124:	63 ed       	ldi	r22, 0xD3	; 211
    1126:	71 e0       	ldi	r23, 0x01	; 1
    1128:	8d e2       	ldi	r24, 0x2D	; 45
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	54 d2       	rcall	.+1192   	; 0x15d6 <fputs>
}
    112e:	2a 96       	adiw	r28, 0x0a	; 10
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	df 90       	pop	r13
    1144:	cf 90       	pop	r12
    1146:	08 95       	ret

00001148 <SelectRange>:



void SelectRange(uint8_t div){
	if(div == RANGE4){ // lowest range
    1148:	81 11       	cpse	r24, r1
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <SelectRange+0xa>
		C_CLEARBIT(ARX);
    114c:	8c 98       	cbi	0x11, 4	; 17
		C_CLEARBIT(ARY);
    114e:	8d 98       	cbi	0x11, 5	; 17
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <SelectRange+0x1a>
	}else if(div == RANGE40){
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	11 f4       	brne	.+4      	; 0x115a <SelectRange+0x12>
		C_CLEARBIT(ARX);
    1156:	8c 98       	cbi	0x11, 4	; 17
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <SelectRange+0x18>
		C_SETBIT(ARY);
	}else if(div == RANGE400){
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	11 f4       	brne	.+4      	; 0x1162 <SelectRange+0x1a>
		C_SETBIT(ARX);
    115e:	8c 9a       	sbi	0x11, 4	; 17
		C_SETBIT(ARY);
    1160:	8d 9a       	sbi	0x11, 5	; 17
	}else{ 
		//huh? 
	}
	SendUInt8LCD(div, CMD_RANGE0, CMD_RANGE1); // send range to lcd
    1162:	41 ef       	ldi	r20, 0xF1	; 241
    1164:	69 ef       	ldi	r22, 0xF9	; 249
    1166:	99 cf       	rjmp	.-206    	; 0x109a <SendUInt8LCD>

00001168 <SelectHigherRange>:
}

void SelectHigherRange(void){
	if(range == RANGE4){
    1168:	80 91 d2 01 	lds	r24, 0x01D2
    116c:	81 11       	cpse	r24, r1
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <SelectHigherRange+0xc>
		range = RANGE40;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	05 c0       	rjmp	.+10     	; 0x117e <SelectHigherRange+0x16>
	}else if(range == RANGE40){
    1174:	80 91 d2 01 	lds	r24, 0x01D2
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	19 f4       	brne	.+6      	; 0x1182 <SelectHigherRange+0x1a>
		range = RANGE400;
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	80 93 d2 01 	sts	0x01D2, r24
	}
	SelectRange(range);
    1182:	80 91 d2 01 	lds	r24, 0x01D2
    1186:	e0 cf       	rjmp	.-64     	; 0x1148 <SelectRange>

00001188 <SelectLowerRange>:
}

void SelectLowerRange(void){
	if(range == RANGE400){
    1188:	80 91 d2 01 	lds	r24, 0x01D2
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	21 f4       	brne	.+8      	; 0x1198 <SelectLowerRange+0x10>
		range = RANGE40;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 93 d2 01 	sts	0x01D2, r24
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <SelectLowerRange+0x1c>
	}else if(range == RANGE40){
    1198:	80 91 d2 01 	lds	r24, 0x01D2
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	11 f4       	brne	.+4      	; 0x11a4 <SelectLowerRange+0x1c>
		range = RANGE4;
    11a0:	10 92 d2 01 	sts	0x01D2, r1
	}
	SelectRange(range);
    11a4:	80 91 d2 01 	lds	r24, 0x01D2
    11a8:	cf cf       	rjmp	.-98     	; 0x1148 <SelectRange>

000011aa <Read_DualSlope>:
}


/** Function to make measurement with Dual Slope hardware. Returns Nana Terayza if error value. Duh. #BaconPancakes */
int16_t Read_DualSlope(void)
{
    11aa:	cf 92       	push	r12
    11ac:	df 92       	push	r13
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	2a 97       	sbiw	r28, 0x0a	; 10
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
	C_CLEARBIT(ARInh);      // input on
    11c8:	8f 98       	cbi	0x11, 7	; 17
	bool polFlag = 0;		// used to track polarity
	// step 0, auto zero
	C_SETBIT(IntInhSwt);		// disconnect input
    11ca:	5e 9a       	sbi	0x0b, 6	; 11
	C_SETBIT(ZeroSwt);		// zero cap
    11cc:	5f 9a       	sbi	0x0b, 7	; 11
    11ce:	2f ef       	ldi	r18, 0xFF	; 255
    11d0:	86 e7       	ldi	r24, 0x76	; 118
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	21 50       	subi	r18, 0x01	; 1
    11d6:	80 40       	sbci	r24, 0x00	; 0
    11d8:	90 40       	sbci	r25, 0x00	; 0
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <Read_DualSlope+0x2a>
    11dc:	00 c0       	rjmp	.+0      	; 0x11de <Read_DualSlope+0x34>
    11de:	00 00       	nop
	_delay_ms(ZERO_TIME);	// wait some time
	C_CLEARBIT(ZeroSwt);	// zero off
    11e0:	5f 98       	cbi	0x0b, 7	; 11

	// step 1, int for INT_TIME mS (80mS ?) 
	C_CLEARBIT(ARSwt);		// select input
    11e2:	2e 98       	cbi	0x05, 6	; 5
	C_CLEARBIT(RefSwt);		// select input
    11e4:	2d 98       	cbi	0x05, 5	; 5
	C_SETBIT(IntSwt);		// select input
    11e6:	2c 9a       	sbi	0x05, 4	; 5
	
	C_CLEARBIT(IntInhSwt);		// turn switch on
    11e8:	5e 98       	cbi	0x0b, 6	; 11
    11ea:	2f ef       	ldi	r18, 0xFF	; 255
    11ec:	83 ef       	ldi	r24, 0xF3	; 243
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	21 50       	subi	r18, 0x01	; 1
    11f2:	80 40       	sbci	r24, 0x00	; 0
    11f4:	90 40       	sbci	r25, 0x00	; 0
    11f6:	e1 f7       	brne	.-8      	; 0x11f0 <Read_DualSlope+0x46>
    11f8:	00 c0       	rjmp	.+0      	; 0x11fa <Read_DualSlope+0x50>
    11fa:	00 00       	nop
	
	
	_delay_ms(INT_TIME/2);	// wait int time/2
	// half way, check polarity
	if(C_CHECKBIT(CompIn)){ // -ve pol
    11fc:	37 9b       	sbis	0x06, 7	; 6
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <Read_DualSlope+0x5e>
		C_SETBIT(RefPolSwt);
    1200:	46 9a       	sbi	0x08, 6	; 8
		trig_falling();
    1202:	ba de       	rcall	.-652    	; 0xf78 <trig_falling>
		polFlag = 1;
    1204:	11 e0       	ldi	r17, 0x01	; 1
    1206:	03 c0       	rjmp	.+6      	; 0x120e <Read_DualSlope+0x64>
	}else{ // +ve pol
		C_CLEARBIT(RefPolSwt);
    1208:	46 98       	cbi	0x08, 6	; 8
		trig_rising();
    120a:	b0 de       	rcall	.-672    	; 0xf6c <trig_rising>
		polFlag = 0;
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	2f ef       	ldi	r18, 0xFF	; 255
    1210:	83 ef       	ldi	r24, 0xF3	; 243
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	80 40       	sbci	r24, 0x00	; 0
    1218:	90 40       	sbci	r25, 0x00	; 0
    121a:	e1 f7       	brne	.-8      	; 0x1214 <Read_DualSlope+0x6a>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <Read_DualSlope+0x74>
    121e:	00 00       	nop
	}
	_delay_ms(INT_TIME/2); // wait int time/2
	
	// step 2, dint for up to 160mS waiting for 0 crossing
	C_CLEARBIT(IntSwt);		// select dint
    1220:	2c 98       	cbi	0x05, 4	; 5
	C_SETBIT(RefSwt);
    1222:	2d 9a       	sbi	0x05, 5	; 5
	start_input_capture();  // start the timer and wait for capture
    1224:	ae de       	rcall	.-676    	; 0xf82 <start_input_capture>
	
	uint16_t capture =0;
	
	while(!(CHECKBITMASK(TIFR3, (1<<ICF3)|(1<<TOV3)))); // wait for a flag to fire
    1226:	88 b3       	in	r24, 0x18	; 24
    1228:	81 72       	andi	r24, 0x21	; 33
    122a:	e9 f3       	breq	.-6      	; 0x1226 <Read_DualSlope+0x7c>
	if(CHECKBIT(TIFR3, ICF3)){ // we have expected input capture
    122c:	c5 9b       	sbis	0x18, 5	; 24
    122e:	15 c0       	rjmp	.+42     	; 0x125a <Read_DualSlope+0xb0>
		capture = get_capture_time();
    1230:	bf de       	rcall	.-642    	; 0xfb0 <get_capture_time>
    1232:	6c 01       	movw	r12, r24
		char buffer[10];
		ultoa(capture, buffer, 10);
    1234:	bc 01       	movw	r22, r24
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	2a e0       	ldi	r18, 0x0A	; 10
    123c:	ae 01       	movw	r20, r28
    123e:	4f 5f       	subi	r20, 0xFF	; 255
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	8f d1       	rcall	.+798    	; 0x1562 <__ultoa_ncheck>
		fputs(buffer, &USBSerialStream);
    1244:	63 ed       	ldi	r22, 0xD3	; 211
    1246:	71 e0       	ldi	r23, 0x01	; 1
    1248:	ce 01       	movw	r24, r28
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	c4 d1       	rcall	.+904    	; 0x15d6 <fputs>
		fputs("cap\n", &USBSerialStream);
    124e:	63 ed       	ldi	r22, 0xD3	; 211
    1250:	71 e0       	ldi	r23, 0x01	; 1
    1252:	88 e3       	ldi	r24, 0x38	; 56
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	bf d1       	rcall	.+894    	; 0x15d6 <fputs>
    1258:	09 c0       	rjmp	.+18     	; 0x126c <Read_DualSlope+0xc2>
	}else if(CHECKBIT(TIFR3, TOV3)){// Overflow! something went wrong!
    125a:	c0 99       	sbic	0x18, 0	; 24
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <Read_DualSlope+0xba>
	// step 2, dint for up to 160mS waiting for 0 crossing
	C_CLEARBIT(IntSwt);		// select dint
	C_SETBIT(RefSwt);
	start_input_capture();  // start the timer and wait for capture
	
	uint16_t capture =0;
    125e:	c1 2c       	mov	r12, r1
    1260:	d1 2c       	mov	r13, r1
    1262:	04 c0       	rjmp	.+8      	; 0x126c <Read_DualSlope+0xc2>
		char buffer[10];
		ultoa(capture, buffer, 10);
		fputs(buffer, &USBSerialStream);
		fputs("cap\n", &USBSerialStream);
	}else if(CHECKBIT(TIFR3, TOV3)){// Overflow! something went wrong!
		capture = 10000;
    1264:	60 e1       	ldi	r22, 0x10	; 16
    1266:	c6 2e       	mov	r12, r22
    1268:	67 e2       	ldi	r22, 0x27	; 39
    126a:	d6 2e       	mov	r13, r22
	}
	// finally stop timer and clear flags
	stop_and_clear_input_capture();
    126c:	99 de       	rcall	.-718    	; 0xfa0 <stop_and_clear_input_capture>
	
	// step 3, calc and output
	// formula is (T2/T1) * Vref
	// first we need T2:
	uint32_t T2 = capture; // 4uS per 'tick' so capture time * 4 gives T2 in uS
	T2 = T2 *4;
    126e:	e1 2c       	mov	r14, r1
    1270:	f1 2c       	mov	r15, r1
    1272:	42 e0       	ldi	r20, 0x02	; 2
    1274:	cc 0c       	add	r12, r12
    1276:	dd 1c       	adc	r13, r13
    1278:	ee 1c       	adc	r14, r14
    127a:	ff 1c       	adc	r15, r15
    127c:	4a 95       	dec	r20
    127e:	d1 f7       	brne	.-12     	; 0x1274 <Read_DualSlope+0xca>
    1280:	2a e0       	ldi	r18, 0x0A	; 10
    1282:	ae 01       	movw	r20, r28
    1284:	4f 5f       	subi	r20, 0xFF	; 255
    1286:	5f 4f       	sbci	r21, 0xFF	; 255
    1288:	c7 01       	movw	r24, r14
    128a:	b6 01       	movw	r22, r12
    128c:	6a d1       	rcall	.+724    	; 0x1562 <__ultoa_ncheck>
	char buffer[10];
	ultoa(T2, buffer, 10);
	fputs(buffer, &USBSerialStream);
    128e:	63 ed       	ldi	r22, 0xD3	; 211
    1290:	71 e0       	ldi	r23, 0x01	; 1
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	9f d1       	rcall	.+830    	; 0x15d6 <fputs>
	fputs("T2\n", &USBSerialStream);
    1298:	63 ed       	ldi	r22, 0xD3	; 211
    129a:	71 e0       	ldi	r23, 0x01	; 1
    129c:	8d e3       	ldi	r24, 0x3D	; 61
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	9a d1       	rcall	.+820    	; 0x15d6 <fputs>
	// do calc (no floating point please! )
	T2 = (T2*VREF_MV)/INT_TIME_US;
    12a2:	ae e3       	ldi	r26, 0x3E	; 62
    12a4:	b4 e0       	ldi	r27, 0x04	; 4
    12a6:	a7 01       	movw	r20, r14
    12a8:	96 01       	movw	r18, r12
    12aa:	47 d1       	rcall	.+654    	; 0x153a <__muluhisi3>
    12ac:	20 e8       	ldi	r18, 0x80	; 128
    12ae:	38 e3       	ldi	r19, 0x38	; 56
    12b0:	41 e0       	ldi	r20, 0x01	; 1
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	0b d1       	rcall	.+534    	; 0x14cc <__udivmodsi4>
    12b6:	69 01       	movw	r12, r18
    12b8:	7a 01       	movw	r14, r20
    12ba:	2a e0       	ldi	r18, 0x0A	; 10
    12bc:	ae 01       	movw	r20, r28
    12be:	4f 5f       	subi	r20, 0xFF	; 255
    12c0:	5f 4f       	sbci	r21, 0xFF	; 255
    12c2:	c7 01       	movw	r24, r14
    12c4:	b6 01       	movw	r22, r12
    12c6:	4d d1       	rcall	.+666    	; 0x1562 <__ultoa_ncheck>
	ultoa(T2, buffer, 10);
	fputs(buffer, &USBSerialStream);
    12c8:	63 ed       	ldi	r22, 0xD3	; 211
    12ca:	71 e0       	ldi	r23, 0x01	; 1
    12cc:	ce 01       	movw	r24, r28
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	82 d1       	rcall	.+772    	; 0x15d6 <fputs>
	fputs("T22\n", &USBSerialStream);
    12d2:	63 ed       	ldi	r22, 0xD3	; 211
    12d4:	71 e0       	ldi	r23, 0x01	; 1
    12d6:	81 e4       	ldi	r24, 0x41	; 65
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	7d d1       	rcall	.+762    	; 0x15d6 <fputs>
	int16_t result = T2; // T2 should now be a max of 2460 (mV)
	result = result *2;
    12dc:	cc 0c       	add	r12, r12
    12de:	dd 1c       	adc	r13, r13
	
	if(result > 4000){
    12e0:	21 ea       	ldi	r18, 0xA1	; 161
    12e2:	c2 16       	cp	r12, r18
    12e4:	2f e0       	ldi	r18, 0x0F	; 15
    12e6:	d2 06       	cpc	r13, r18
    12e8:	14 f0       	brlt	.+4      	; 0x12ee <Read_DualSlope+0x144>
		SelectHigherRange();
    12ea:	3e df       	rcall	.-388    	; 0x1168 <SelectHigherRange>
    12ec:	06 c0       	rjmp	.+12     	; 0x12fa <Read_DualSlope+0x150>
	}else if(result < 400){
    12ee:	80 e9       	ldi	r24, 0x90	; 144
    12f0:	c8 16       	cp	r12, r24
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	d8 06       	cpc	r13, r24
    12f6:	0c f4       	brge	.+2      	; 0x12fa <Read_DualSlope+0x150>
		SelectLowerRange();
    12f8:	47 df       	rcall	.-370    	; 0x1188 <SelectLowerRange>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    12fa:	4a e0       	ldi	r20, 0x0A	; 10
    12fc:	be 01       	movw	r22, r28
    12fe:	6f 5f       	subi	r22, 0xFF	; 255
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	c6 01       	movw	r24, r12
    1304:	24 d1       	rcall	.+584    	; 0x154e <__itoa_ncheck>
	}
	itoa(result, buffer, 10);
	fputs(buffer, &USBSerialStream);
    1306:	63 ed       	ldi	r22, 0xD3	; 211
    1308:	71 e0       	ldi	r23, 0x01	; 1
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	63 d1       	rcall	.+710    	; 0x15d6 <fputs>
	fputs("result\n", &USBSerialStream);
    1310:	63 ed       	ldi	r22, 0xD3	; 211
    1312:	71 e0       	ldi	r23, 0x01	; 1
    1314:	86 e4       	ldi	r24, 0x46	; 70
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	5e d1       	rcall	.+700    	; 0x15d6 <fputs>
	//LEDs_SetAllLEDs(LEDS_ALL_LEDS);
	if(polFlag){//-ve
    131a:	11 23       	and	r17, r17
    131c:	29 f0       	breq	.+10     	; 0x1328 <Read_DualSlope+0x17e>
		return result*-1;
    131e:	88 27       	eor	r24, r24
    1320:	99 27       	eor	r25, r25
    1322:	8c 19       	sub	r24, r12
    1324:	9d 09       	sbc	r25, r13
    1326:	01 c0       	rjmp	.+2      	; 0x132a <Read_DualSlope+0x180>
	T2 = (T2*VREF_MV)/INT_TIME_US;
	ultoa(T2, buffer, 10);
	fputs(buffer, &USBSerialStream);
	fputs("T22\n", &USBSerialStream);
	int16_t result = T2; // T2 should now be a max of 2460 (mV)
	result = result *2;
    1328:	c6 01       	movw	r24, r12
		return result*-1;
	}else{//+ve
		return result;
	}
	
}
    132a:	2a 96       	adiw	r28, 0x0a	; 10
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	cf 90       	pop	r12
    1344:	08 95       	ret

00001346 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	2a 97       	sbiw	r28, 0x0a	; 10
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
	int16_t res; // used to store result of conversion
	
	SetupHardware();
    135a:	48 de       	rcall	.-880    	; 0xfec <SetupHardware>


	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    135c:	63 ed       	ldi	r22, 0xD3	; 211
    135e:	71 e0       	ldi	r23, 0x01	; 1
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	f6 d8       	rcall	.-3604   	; 0x552 <CDC_Device_CreateStream>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	28 de       	rcall	.-944    	; 0xfba <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    136a:	78 94       	sei
	GlobalInterruptEnable();
	
	fputs("Welcome to Our Dual Slope Controller! \r\n", &USBSerialStream);
    136c:	63 ed       	ldi	r22, 0xD3	; 211
    136e:	71 e0       	ldi	r23, 0x01	; 1
    1370:	8e e4       	ldi	r24, 0x4E	; 78
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	30 d1       	rcall	.+608    	; 0x15d6 <fputs>
	
	
	for (;;)
	{
		CheckBatt();
    1376:	a9 de       	rcall	.-686    	; 0x10ca <CheckBatt>
		char buffer[10];
		SendUInt8LCD(bl, CMD_BACKLIGHT0, CMD_BACKLIGHT1);
    1378:	80 91 01 01 	lds	r24, 0x0101
    137c:	46 ef       	ldi	r20, 0xF6	; 246
    137e:	65 ef       	ldi	r22, 0xF5	; 245
    1380:	8c de       	rcall	.-744    	; 0x109a <SendUInt8LCD>
		itoa(bl,buffer, 10);
    1382:	80 91 01 01 	lds	r24, 0x0101
    1386:	4a e0       	ldi	r20, 0x0A	; 10
    1388:	be 01       	movw	r22, r28
    138a:	6f 5f       	subi	r22, 0xFF	; 255
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	de d0       	rcall	.+444    	; 0x154e <__itoa_ncheck>
		fputs(buffer, &USBSerialStream);
    1392:	63 ed       	ldi	r22, 0xD3	; 211
    1394:	71 e0       	ldi	r23, 0x01	; 1
    1396:	ce 01       	movw	r24, r28
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	1d d1       	rcall	.+570    	; 0x15d6 <fputs>
		fputs(" Backlight \r\n", &USBSerialStream);
    139c:	63 ed       	ldi	r22, 0xD3	; 211
    139e:	71 e0       	ldi	r23, 0x01	; 1
    13a0:	87 e7       	ldi	r24, 0x77	; 119
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	18 d1       	rcall	.+560    	; 0x15d6 <fputs>
		
		//LEDs_ToggleLEDs(LEDS_LED1|LEDS_LED2|LEDS_LED3);
		res = Read_DualSlope();
    13a6:	01 df       	rcall	.-510    	; 0x11aa <Read_DualSlope>
    13a8:	8c 01       	movw	r16, r24
		SendInt16LCD(res, CMD_RESULT0, CMD_RESULT1);
    13aa:	42 ef       	ldi	r20, 0xF2	; 242
    13ac:	60 ef       	ldi	r22, 0xF0	; 240
    13ae:	50 de       	rcall	.-864    	; 0x1050 <SendInt16LCD>
    13b0:	4a e0       	ldi	r20, 0x0A	; 10
    13b2:	be 01       	movw	r22, r28
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	c8 01       	movw	r24, r16
    13ba:	c9 d0       	rcall	.+402    	; 0x154e <__itoa_ncheck>
		itoa(res,buffer, 10);
		fputs(buffer, &USBSerialStream);
    13bc:	63 ed       	ldi	r22, 0xD3	; 211
    13be:	71 e0       	ldi	r23, 0x01	; 1
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	08 d1       	rcall	.+528    	; 0x15d6 <fputs>
		fputs("mV \r\n", &USBSerialStream);
    13c6:	63 ed       	ldi	r22, 0xD3	; 211
    13c8:	71 e0       	ldi	r23, 0x01	; 1
    13ca:	85 e8       	ldi	r24, 0x85	; 133
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	03 d1       	rcall	.+518    	; 0x15d6 <fputs>
		


		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	80 d8       	rcall	.-3840   	; 0x4d6 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	67 d8       	rcall	.-3890   	; 0x4aa <CDC_Device_USBTask>
		USB_USBTask();
    13dc:	a3 dd       	rcall	.-1210   	; 0xf24 <USB_USBTask>
    13de:	cb cf       	rjmp	.-106    	; 0x1376 <main+0x30>

000013e0 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
    13e0:	80 ea       	ldi	r24, 0xA0	; 160
    13e2:	eb cd       	rjmp	.-1066   	; 0xfba <LEDs_SetAllLEDs>

000013e4 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	e9 cd       	rjmp	.-1070   	; 0xfba <LEDs_SetAllLEDs>

000013e8 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	0e 94 cb 01 	call	0x396	; 0x396 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    13f0:	88 23       	and	r24, r24
    13f2:	11 f0       	breq	.+4      	; 0x13f8 <EVENT_USB_Device_ConfigurationChanged+0x10>
    13f4:	80 e8       	ldi	r24, 0x80	; 128
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <EVENT_USB_Device_ConfigurationChanged+0x12>
    13f8:	81 e2       	ldi	r24, 0x21	; 33
    13fa:	df cd       	rjmp	.-1090   	; 0xfba <LEDs_SetAllLEDs>

000013fc <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	bc c8       	rjmp	.-3720   	; 0x57a <CDC_Device_ProcessControlRequest>

00001402 <__vector_1>:
}

ISR(INT0_vect){
    1402:	1f 92       	push	r1
    1404:	0f 92       	push	r0
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	0f 92       	push	r0
    140a:	11 24       	eor	r1, r1
    140c:	2f 93       	push	r18
    140e:	3f 93       	push	r19
    1410:	4f 93       	push	r20
    1412:	5f 93       	push	r21
    1414:	6f 93       	push	r22
    1416:	7f 93       	push	r23
    1418:	8f 93       	push	r24
    141a:	9f 93       	push	r25
    141c:	af 93       	push	r26
    141e:	bf 93       	push	r27
    1420:	cf 93       	push	r28
    1422:	ef 93       	push	r30
    1424:	ff 93       	push	r31
	bl += ENC_ISR();
    1426:	c0 91 01 01 	lds	r28, 0x0101
    142a:	0e 94 26 01 	call	0x24c	; 0x24c <ENC_ISR>
    142e:	8c 0f       	add	r24, r28
    1430:	80 93 01 01 	sts	0x0101, r24
	if(bl > 250){bl = 255;}
    1434:	80 91 01 01 	lds	r24, 0x0101
    1438:	8b 3f       	cpi	r24, 0xFB	; 251
    143a:	18 f0       	brcs	.+6      	; 0x1442 <__vector_1+0x40>
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	80 93 01 01 	sts	0x0101, r24
	if(bl < 0){bl = 0;}
    1442:	80 91 01 01 	lds	r24, 0x0101
	Beep();
    1446:	c6 dd       	rcall	.-1140   	; 0xfd4 <Beep>
}
    1448:	ff 91       	pop	r31
    144a:	ef 91       	pop	r30
    144c:	cf 91       	pop	r28
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti

0000146c <__vector_2>:

ISR(INT1_vect){
    146c:	1f 92       	push	r1
    146e:	0f 92       	push	r0
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	0f 92       	push	r0
    1474:	11 24       	eor	r1, r1
    1476:	2f 93       	push	r18
    1478:	3f 93       	push	r19
    147a:	4f 93       	push	r20
    147c:	5f 93       	push	r21
    147e:	6f 93       	push	r22
    1480:	7f 93       	push	r23
    1482:	8f 93       	push	r24
    1484:	9f 93       	push	r25
    1486:	af 93       	push	r26
    1488:	bf 93       	push	r27
    148a:	cf 93       	push	r28
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
	bl += ENC_ISR();
    1490:	c0 91 01 01 	lds	r28, 0x0101
    1494:	0e 94 26 01 	call	0x24c	; 0x24c <ENC_ISR>
    1498:	8c 0f       	add	r24, r28
    149a:	80 93 01 01 	sts	0x0101, r24
	if(bl > 255){bl = 255;}
    149e:	80 91 01 01 	lds	r24, 0x0101
	if(bl < 0){bl = 0;}
    14a2:	80 91 01 01 	lds	r24, 0x0101
	Beep();
    14a6:	96 dd       	rcall	.-1236   	; 0xfd4 <Beep>

    14a8:	ff 91       	pop	r31
    14aa:	ef 91       	pop	r30
    14ac:	cf 91       	pop	r28
    14ae:	bf 91       	pop	r27
    14b0:	af 91       	pop	r26
    14b2:	9f 91       	pop	r25
    14b4:	8f 91       	pop	r24
    14b6:	7f 91       	pop	r23
    14b8:	6f 91       	pop	r22
    14ba:	5f 91       	pop	r21
    14bc:	4f 91       	pop	r20
    14be:	3f 91       	pop	r19
    14c0:	2f 91       	pop	r18
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <__udivmodsi4>:
    14cc:	a1 e2       	ldi	r26, 0x21	; 33
    14ce:	1a 2e       	mov	r1, r26
    14d0:	aa 1b       	sub	r26, r26
    14d2:	bb 1b       	sub	r27, r27
    14d4:	fd 01       	movw	r30, r26
    14d6:	0d c0       	rjmp	.+26     	; 0x14f2 <__udivmodsi4_ep>

000014d8 <__udivmodsi4_loop>:
    14d8:	aa 1f       	adc	r26, r26
    14da:	bb 1f       	adc	r27, r27
    14dc:	ee 1f       	adc	r30, r30
    14de:	ff 1f       	adc	r31, r31
    14e0:	a2 17       	cp	r26, r18
    14e2:	b3 07       	cpc	r27, r19
    14e4:	e4 07       	cpc	r30, r20
    14e6:	f5 07       	cpc	r31, r21
    14e8:	20 f0       	brcs	.+8      	; 0x14f2 <__udivmodsi4_ep>
    14ea:	a2 1b       	sub	r26, r18
    14ec:	b3 0b       	sbc	r27, r19
    14ee:	e4 0b       	sbc	r30, r20
    14f0:	f5 0b       	sbc	r31, r21

000014f2 <__udivmodsi4_ep>:
    14f2:	66 1f       	adc	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	1a 94       	dec	r1
    14fc:	69 f7       	brne	.-38     	; 0x14d8 <__udivmodsi4_loop>
    14fe:	60 95       	com	r22
    1500:	70 95       	com	r23
    1502:	80 95       	com	r24
    1504:	90 95       	com	r25
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	bd 01       	movw	r22, r26
    150c:	cf 01       	movw	r24, r30
    150e:	08 95       	ret

00001510 <__tablejump2__>:
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31

00001514 <__tablejump__>:
    1514:	05 90       	lpm	r0, Z+
    1516:	f4 91       	lpm	r31, Z
    1518:	e0 2d       	mov	r30, r0
    151a:	09 94       	ijmp

0000151c <__umulhisi3>:
    151c:	a2 9f       	mul	r26, r18
    151e:	b0 01       	movw	r22, r0
    1520:	b3 9f       	mul	r27, r19
    1522:	c0 01       	movw	r24, r0
    1524:	a3 9f       	mul	r26, r19
    1526:	70 0d       	add	r23, r0
    1528:	81 1d       	adc	r24, r1
    152a:	11 24       	eor	r1, r1
    152c:	91 1d       	adc	r25, r1
    152e:	b2 9f       	mul	r27, r18
    1530:	70 0d       	add	r23, r0
    1532:	81 1d       	adc	r24, r1
    1534:	11 24       	eor	r1, r1
    1536:	91 1d       	adc	r25, r1
    1538:	08 95       	ret

0000153a <__muluhisi3>:
    153a:	f0 df       	rcall	.-32     	; 0x151c <__umulhisi3>
    153c:	a5 9f       	mul	r26, r21
    153e:	90 0d       	add	r25, r0
    1540:	b4 9f       	mul	r27, r20
    1542:	90 0d       	add	r25, r0
    1544:	a4 9f       	mul	r26, r20
    1546:	80 0d       	add	r24, r0
    1548:	91 1d       	adc	r25, r1
    154a:	11 24       	eor	r1, r1
    154c:	08 95       	ret

0000154e <__itoa_ncheck>:
    154e:	bb 27       	eor	r27, r27
    1550:	4a 30       	cpi	r20, 0x0A	; 10
    1552:	31 f4       	brne	.+12     	; 0x1560 <__itoa_ncheck+0x12>
    1554:	99 23       	and	r25, r25
    1556:	22 f4       	brpl	.+8      	; 0x1560 <__itoa_ncheck+0x12>
    1558:	bd e2       	ldi	r27, 0x2D	; 45
    155a:	90 95       	com	r25
    155c:	81 95       	neg	r24
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	22 c0       	rjmp	.+68     	; 0x15a6 <__utoa_common>

00001562 <__ultoa_ncheck>:
    1562:	bb 27       	eor	r27, r27

00001564 <__ultoa_common>:
    1564:	fa 01       	movw	r30, r20
    1566:	a6 2f       	mov	r26, r22
    1568:	62 17       	cp	r22, r18
    156a:	71 05       	cpc	r23, r1
    156c:	81 05       	cpc	r24, r1
    156e:	91 05       	cpc	r25, r1
    1570:	33 0b       	sbc	r19, r19
    1572:	30 fb       	bst	r19, 0
    1574:	66 f0       	brts	.+24     	; 0x158e <__ultoa_common+0x2a>
    1576:	aa 27       	eor	r26, r26
    1578:	66 0f       	add	r22, r22
    157a:	77 1f       	adc	r23, r23
    157c:	88 1f       	adc	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	aa 1f       	adc	r26, r26
    1582:	a2 17       	cp	r26, r18
    1584:	10 f0       	brcs	.+4      	; 0x158a <__ultoa_common+0x26>
    1586:	a2 1b       	sub	r26, r18
    1588:	63 95       	inc	r22
    158a:	38 50       	subi	r19, 0x08	; 8
    158c:	a9 f7       	brne	.-22     	; 0x1578 <__ultoa_common+0x14>
    158e:	a0 5d       	subi	r26, 0xD0	; 208
    1590:	aa 33       	cpi	r26, 0x3A	; 58
    1592:	08 f0       	brcs	.+2      	; 0x1596 <__ultoa_common+0x32>
    1594:	a9 5d       	subi	r26, 0xD9	; 217
    1596:	a1 93       	st	Z+, r26
    1598:	36 f7       	brtc	.-52     	; 0x1566 <__ultoa_common+0x2>
    159a:	b1 11       	cpse	r27, r1
    159c:	b1 93       	st	Z+, r27
    159e:	10 82       	st	Z, r1
    15a0:	ca 01       	movw	r24, r20
    15a2:	1a c2       	rjmp	.+1076   	; 0x19d8 <strrev>

000015a4 <__utoa_ncheck>:
    15a4:	bb 27       	eor	r27, r27

000015a6 <__utoa_common>:
    15a6:	fb 01       	movw	r30, r22
    15a8:	55 27       	eor	r21, r21
    15aa:	aa 27       	eor	r26, r26
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	aa 1f       	adc	r26, r26
    15b2:	a4 17       	cp	r26, r20
    15b4:	10 f0       	brcs	.+4      	; 0x15ba <__utoa_common+0x14>
    15b6:	a4 1b       	sub	r26, r20
    15b8:	83 95       	inc	r24
    15ba:	50 51       	subi	r21, 0x10	; 16
    15bc:	b9 f7       	brne	.-18     	; 0x15ac <__utoa_common+0x6>
    15be:	a0 5d       	subi	r26, 0xD0	; 208
    15c0:	aa 33       	cpi	r26, 0x3A	; 58
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <__utoa_common+0x20>
    15c4:	a9 5d       	subi	r26, 0xD9	; 217
    15c6:	a1 93       	st	Z+, r26
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	79 f7       	brne	.-34     	; 0x15aa <__utoa_common+0x4>
    15cc:	b1 11       	cpse	r27, r1
    15ce:	b1 93       	st	Z+, r27
    15d0:	11 92       	st	Z+, r1
    15d2:	cb 01       	movw	r24, r22
    15d4:	01 c2       	rjmp	.+1026   	; 0x19d8 <strrev>

000015d6 <fputs>:
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	8b 01       	movw	r16, r22
    15e4:	db 01       	movw	r26, r22
    15e6:	13 96       	adiw	r26, 0x03	; 3
    15e8:	2c 91       	ld	r18, X
    15ea:	21 ff       	sbrs	r18, 1
    15ec:	16 c0       	rjmp	.+44     	; 0x161a <fputs+0x44>
    15ee:	ec 01       	movw	r28, r24
    15f0:	e1 2c       	mov	r14, r1
    15f2:	f1 2c       	mov	r15, r1
    15f4:	89 91       	ld	r24, Y+
    15f6:	88 23       	and	r24, r24
    15f8:	71 f0       	breq	.+28     	; 0x1616 <fputs+0x40>
    15fa:	d8 01       	movw	r26, r16
    15fc:	18 96       	adiw	r26, 0x08	; 8
    15fe:	ed 91       	ld	r30, X+
    1600:	fc 91       	ld	r31, X
    1602:	19 97       	sbiw	r26, 0x09	; 9
    1604:	b8 01       	movw	r22, r16
    1606:	09 95       	icall
    1608:	89 2b       	or	r24, r25
    160a:	a1 f3       	breq	.-24     	; 0x15f4 <fputs+0x1e>
    160c:	ee 24       	eor	r14, r14
    160e:	ea 94       	dec	r14
    1610:	ff 24       	eor	r15, r15
    1612:	fa 94       	dec	r15
    1614:	ef cf       	rjmp	.-34     	; 0x15f4 <fputs+0x1e>
    1616:	c7 01       	movw	r24, r14
    1618:	02 c0       	rjmp	.+4      	; 0x161e <fputs+0x48>
    161a:	8f ef       	ldi	r24, 0xFF	; 255
    161c:	9f ef       	ldi	r25, 0xFF	; 255
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	e6 e0       	ldi	r30, 0x06	; 6
    1624:	a1 c2       	rjmp	.+1346   	; 0x1b68 <__epilogue_restores__+0x18>

00001626 <vfprintf>:
    1626:	ac e0       	ldi	r26, 0x0C	; 12
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e8 e1       	ldi	r30, 0x18	; 24
    162c:	fb e0       	ldi	r31, 0x0B	; 11
    162e:	74 c2       	rjmp	.+1256   	; 0x1b18 <__prologue_saves__>
    1630:	7c 01       	movw	r14, r24
    1632:	6b 01       	movw	r12, r22
    1634:	8a 01       	movw	r16, r20
    1636:	fc 01       	movw	r30, r24
    1638:	17 82       	std	Z+7, r1	; 0x07
    163a:	16 82       	std	Z+6, r1	; 0x06
    163c:	83 81       	ldd	r24, Z+3	; 0x03
    163e:	81 ff       	sbrs	r24, 1
    1640:	b0 c1       	rjmp	.+864    	; 0x19a2 <vfprintf+0x37c>
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	4c 01       	movw	r8, r24
    1648:	f7 01       	movw	r30, r14
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	f6 01       	movw	r30, r12
    164e:	93 fd       	sbrc	r25, 3
    1650:	85 91       	lpm	r24, Z+
    1652:	93 ff       	sbrs	r25, 3
    1654:	81 91       	ld	r24, Z+
    1656:	6f 01       	movw	r12, r30
    1658:	88 23       	and	r24, r24
    165a:	09 f4       	brne	.+2      	; 0x165e <vfprintf+0x38>
    165c:	9e c1       	rjmp	.+828    	; 0x199a <vfprintf+0x374>
    165e:	85 32       	cpi	r24, 0x25	; 37
    1660:	39 f4       	brne	.+14     	; 0x1670 <vfprintf+0x4a>
    1662:	93 fd       	sbrc	r25, 3
    1664:	85 91       	lpm	r24, Z+
    1666:	93 ff       	sbrs	r25, 3
    1668:	81 91       	ld	r24, Z+
    166a:	6f 01       	movw	r12, r30
    166c:	85 32       	cpi	r24, 0x25	; 37
    166e:	21 f4       	brne	.+8      	; 0x1678 <vfprintf+0x52>
    1670:	b7 01       	movw	r22, r14
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	c1 d1       	rcall	.+898    	; 0x19f8 <fputc>
    1676:	e8 cf       	rjmp	.-48     	; 0x1648 <vfprintf+0x22>
    1678:	51 2c       	mov	r5, r1
    167a:	31 2c       	mov	r3, r1
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	20 32       	cpi	r18, 0x20	; 32
    1680:	a0 f4       	brcc	.+40     	; 0x16aa <vfprintf+0x84>
    1682:	8b 32       	cpi	r24, 0x2B	; 43
    1684:	69 f0       	breq	.+26     	; 0x16a0 <vfprintf+0x7a>
    1686:	30 f4       	brcc	.+12     	; 0x1694 <vfprintf+0x6e>
    1688:	80 32       	cpi	r24, 0x20	; 32
    168a:	59 f0       	breq	.+22     	; 0x16a2 <vfprintf+0x7c>
    168c:	83 32       	cpi	r24, 0x23	; 35
    168e:	69 f4       	brne	.+26     	; 0x16aa <vfprintf+0x84>
    1690:	20 61       	ori	r18, 0x10	; 16
    1692:	2c c0       	rjmp	.+88     	; 0x16ec <vfprintf+0xc6>
    1694:	8d 32       	cpi	r24, 0x2D	; 45
    1696:	39 f0       	breq	.+14     	; 0x16a6 <vfprintf+0x80>
    1698:	80 33       	cpi	r24, 0x30	; 48
    169a:	39 f4       	brne	.+14     	; 0x16aa <vfprintf+0x84>
    169c:	21 60       	ori	r18, 0x01	; 1
    169e:	26 c0       	rjmp	.+76     	; 0x16ec <vfprintf+0xc6>
    16a0:	22 60       	ori	r18, 0x02	; 2
    16a2:	24 60       	ori	r18, 0x04	; 4
    16a4:	23 c0       	rjmp	.+70     	; 0x16ec <vfprintf+0xc6>
    16a6:	28 60       	ori	r18, 0x08	; 8
    16a8:	21 c0       	rjmp	.+66     	; 0x16ec <vfprintf+0xc6>
    16aa:	27 fd       	sbrc	r18, 7
    16ac:	27 c0       	rjmp	.+78     	; 0x16fc <vfprintf+0xd6>
    16ae:	30 ed       	ldi	r19, 0xD0	; 208
    16b0:	38 0f       	add	r19, r24
    16b2:	3a 30       	cpi	r19, 0x0A	; 10
    16b4:	78 f4       	brcc	.+30     	; 0x16d4 <vfprintf+0xae>
    16b6:	26 ff       	sbrs	r18, 6
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <vfprintf+0xa0>
    16ba:	fa e0       	ldi	r31, 0x0A	; 10
    16bc:	5f 9e       	mul	r5, r31
    16be:	30 0d       	add	r19, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	53 2e       	mov	r5, r19
    16c4:	13 c0       	rjmp	.+38     	; 0x16ec <vfprintf+0xc6>
    16c6:	8a e0       	ldi	r24, 0x0A	; 10
    16c8:	38 9e       	mul	r3, r24
    16ca:	30 0d       	add	r19, r0
    16cc:	11 24       	eor	r1, r1
    16ce:	33 2e       	mov	r3, r19
    16d0:	20 62       	ori	r18, 0x20	; 32
    16d2:	0c c0       	rjmp	.+24     	; 0x16ec <vfprintf+0xc6>
    16d4:	8e 32       	cpi	r24, 0x2E	; 46
    16d6:	21 f4       	brne	.+8      	; 0x16e0 <vfprintf+0xba>
    16d8:	26 fd       	sbrc	r18, 6
    16da:	5f c1       	rjmp	.+702    	; 0x199a <vfprintf+0x374>
    16dc:	20 64       	ori	r18, 0x40	; 64
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <vfprintf+0xc6>
    16e0:	8c 36       	cpi	r24, 0x6C	; 108
    16e2:	11 f4       	brne	.+4      	; 0x16e8 <vfprintf+0xc2>
    16e4:	20 68       	ori	r18, 0x80	; 128
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <vfprintf+0xc6>
    16e8:	88 36       	cpi	r24, 0x68	; 104
    16ea:	41 f4       	brne	.+16     	; 0x16fc <vfprintf+0xd6>
    16ec:	f6 01       	movw	r30, r12
    16ee:	93 fd       	sbrc	r25, 3
    16f0:	85 91       	lpm	r24, Z+
    16f2:	93 ff       	sbrs	r25, 3
    16f4:	81 91       	ld	r24, Z+
    16f6:	6f 01       	movw	r12, r30
    16f8:	81 11       	cpse	r24, r1
    16fa:	c1 cf       	rjmp	.-126    	; 0x167e <vfprintf+0x58>
    16fc:	98 2f       	mov	r25, r24
    16fe:	9f 7d       	andi	r25, 0xDF	; 223
    1700:	95 54       	subi	r25, 0x45	; 69
    1702:	93 30       	cpi	r25, 0x03	; 3
    1704:	28 f4       	brcc	.+10     	; 0x1710 <vfprintf+0xea>
    1706:	0c 5f       	subi	r16, 0xFC	; 252
    1708:	1f 4f       	sbci	r17, 0xFF	; 255
    170a:	ff e3       	ldi	r31, 0x3F	; 63
    170c:	f9 83       	std	Y+1, r31	; 0x01
    170e:	0d c0       	rjmp	.+26     	; 0x172a <vfprintf+0x104>
    1710:	83 36       	cpi	r24, 0x63	; 99
    1712:	31 f0       	breq	.+12     	; 0x1720 <vfprintf+0xfa>
    1714:	83 37       	cpi	r24, 0x73	; 115
    1716:	71 f0       	breq	.+28     	; 0x1734 <vfprintf+0x10e>
    1718:	83 35       	cpi	r24, 0x53	; 83
    171a:	09 f0       	breq	.+2      	; 0x171e <vfprintf+0xf8>
    171c:	57 c0       	rjmp	.+174    	; 0x17cc <vfprintf+0x1a6>
    171e:	21 c0       	rjmp	.+66     	; 0x1762 <vfprintf+0x13c>
    1720:	f8 01       	movw	r30, r16
    1722:	80 81       	ld	r24, Z
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	0e 5f       	subi	r16, 0xFE	; 254
    1728:	1f 4f       	sbci	r17, 0xFF	; 255
    172a:	44 24       	eor	r4, r4
    172c:	43 94       	inc	r4
    172e:	51 2c       	mov	r5, r1
    1730:	54 01       	movw	r10, r8
    1732:	14 c0       	rjmp	.+40     	; 0x175c <vfprintf+0x136>
    1734:	38 01       	movw	r6, r16
    1736:	f2 e0       	ldi	r31, 0x02	; 2
    1738:	6f 0e       	add	r6, r31
    173a:	71 1c       	adc	r7, r1
    173c:	f8 01       	movw	r30, r16
    173e:	a0 80       	ld	r10, Z
    1740:	b1 80       	ldd	r11, Z+1	; 0x01
    1742:	26 ff       	sbrs	r18, 6
    1744:	03 c0       	rjmp	.+6      	; 0x174c <vfprintf+0x126>
    1746:	65 2d       	mov	r22, r5
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <vfprintf+0x12a>
    174c:	6f ef       	ldi	r22, 0xFF	; 255
    174e:	7f ef       	ldi	r23, 0xFF	; 255
    1750:	c5 01       	movw	r24, r10
    1752:	2c 87       	std	Y+12, r18	; 0x0c
    1754:	36 d1       	rcall	.+620    	; 0x19c2 <strnlen>
    1756:	2c 01       	movw	r4, r24
    1758:	83 01       	movw	r16, r6
    175a:	2c 85       	ldd	r18, Y+12	; 0x0c
    175c:	2f 77       	andi	r18, 0x7F	; 127
    175e:	22 2e       	mov	r2, r18
    1760:	16 c0       	rjmp	.+44     	; 0x178e <vfprintf+0x168>
    1762:	38 01       	movw	r6, r16
    1764:	f2 e0       	ldi	r31, 0x02	; 2
    1766:	6f 0e       	add	r6, r31
    1768:	71 1c       	adc	r7, r1
    176a:	f8 01       	movw	r30, r16
    176c:	a0 80       	ld	r10, Z
    176e:	b1 80       	ldd	r11, Z+1	; 0x01
    1770:	26 ff       	sbrs	r18, 6
    1772:	03 c0       	rjmp	.+6      	; 0x177a <vfprintf+0x154>
    1774:	65 2d       	mov	r22, r5
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	02 c0       	rjmp	.+4      	; 0x177e <vfprintf+0x158>
    177a:	6f ef       	ldi	r22, 0xFF	; 255
    177c:	7f ef       	ldi	r23, 0xFF	; 255
    177e:	c5 01       	movw	r24, r10
    1780:	2c 87       	std	Y+12, r18	; 0x0c
    1782:	14 d1       	rcall	.+552    	; 0x19ac <strnlen_P>
    1784:	2c 01       	movw	r4, r24
    1786:	2c 85       	ldd	r18, Y+12	; 0x0c
    1788:	20 68       	ori	r18, 0x80	; 128
    178a:	22 2e       	mov	r2, r18
    178c:	83 01       	movw	r16, r6
    178e:	23 fc       	sbrc	r2, 3
    1790:	19 c0       	rjmp	.+50     	; 0x17c4 <vfprintf+0x19e>
    1792:	83 2d       	mov	r24, r3
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	48 16       	cp	r4, r24
    1798:	59 06       	cpc	r5, r25
    179a:	a0 f4       	brcc	.+40     	; 0x17c4 <vfprintf+0x19e>
    179c:	b7 01       	movw	r22, r14
    179e:	80 e2       	ldi	r24, 0x20	; 32
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	2a d1       	rcall	.+596    	; 0x19f8 <fputc>
    17a4:	3a 94       	dec	r3
    17a6:	f5 cf       	rjmp	.-22     	; 0x1792 <vfprintf+0x16c>
    17a8:	f5 01       	movw	r30, r10
    17aa:	27 fc       	sbrc	r2, 7
    17ac:	85 91       	lpm	r24, Z+
    17ae:	27 fe       	sbrs	r2, 7
    17b0:	81 91       	ld	r24, Z+
    17b2:	5f 01       	movw	r10, r30
    17b4:	b7 01       	movw	r22, r14
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	1f d1       	rcall	.+574    	; 0x19f8 <fputc>
    17ba:	31 10       	cpse	r3, r1
    17bc:	3a 94       	dec	r3
    17be:	f1 e0       	ldi	r31, 0x01	; 1
    17c0:	4f 1a       	sub	r4, r31
    17c2:	51 08       	sbc	r5, r1
    17c4:	41 14       	cp	r4, r1
    17c6:	51 04       	cpc	r5, r1
    17c8:	79 f7       	brne	.-34     	; 0x17a8 <vfprintf+0x182>
    17ca:	de c0       	rjmp	.+444    	; 0x1988 <vfprintf+0x362>
    17cc:	84 36       	cpi	r24, 0x64	; 100
    17ce:	11 f0       	breq	.+4      	; 0x17d4 <vfprintf+0x1ae>
    17d0:	89 36       	cpi	r24, 0x69	; 105
    17d2:	31 f5       	brne	.+76     	; 0x1820 <vfprintf+0x1fa>
    17d4:	f8 01       	movw	r30, r16
    17d6:	27 ff       	sbrs	r18, 7
    17d8:	07 c0       	rjmp	.+14     	; 0x17e8 <vfprintf+0x1c2>
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	0c 5f       	subi	r16, 0xFC	; 252
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	08 c0       	rjmp	.+16     	; 0x17f8 <vfprintf+0x1d2>
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	88 27       	eor	r24, r24
    17ee:	77 fd       	sbrc	r23, 7
    17f0:	80 95       	com	r24
    17f2:	98 2f       	mov	r25, r24
    17f4:	0e 5f       	subi	r16, 0xFE	; 254
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	2f 76       	andi	r18, 0x6F	; 111
    17fa:	b2 2e       	mov	r11, r18
    17fc:	97 ff       	sbrs	r25, 7
    17fe:	09 c0       	rjmp	.+18     	; 0x1812 <vfprintf+0x1ec>
    1800:	90 95       	com	r25
    1802:	80 95       	com	r24
    1804:	70 95       	com	r23
    1806:	61 95       	neg	r22
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	8f 4f       	sbci	r24, 0xFF	; 255
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	20 68       	ori	r18, 0x80	; 128
    1810:	b2 2e       	mov	r11, r18
    1812:	2a e0       	ldi	r18, 0x0A	; 10
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	a4 01       	movw	r20, r8
    1818:	21 d1       	rcall	.+578    	; 0x1a5c <__ultoa_invert>
    181a:	a8 2e       	mov	r10, r24
    181c:	a8 18       	sub	r10, r8
    181e:	43 c0       	rjmp	.+134    	; 0x18a6 <vfprintf+0x280>
    1820:	85 37       	cpi	r24, 0x75	; 117
    1822:	29 f4       	brne	.+10     	; 0x182e <vfprintf+0x208>
    1824:	2f 7e       	andi	r18, 0xEF	; 239
    1826:	b2 2e       	mov	r11, r18
    1828:	2a e0       	ldi	r18, 0x0A	; 10
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	25 c0       	rjmp	.+74     	; 0x1878 <vfprintf+0x252>
    182e:	f2 2f       	mov	r31, r18
    1830:	f9 7f       	andi	r31, 0xF9	; 249
    1832:	bf 2e       	mov	r11, r31
    1834:	8f 36       	cpi	r24, 0x6F	; 111
    1836:	c1 f0       	breq	.+48     	; 0x1868 <vfprintf+0x242>
    1838:	18 f4       	brcc	.+6      	; 0x1840 <vfprintf+0x21a>
    183a:	88 35       	cpi	r24, 0x58	; 88
    183c:	79 f0       	breq	.+30     	; 0x185c <vfprintf+0x236>
    183e:	ad c0       	rjmp	.+346    	; 0x199a <vfprintf+0x374>
    1840:	80 37       	cpi	r24, 0x70	; 112
    1842:	19 f0       	breq	.+6      	; 0x184a <vfprintf+0x224>
    1844:	88 37       	cpi	r24, 0x78	; 120
    1846:	21 f0       	breq	.+8      	; 0x1850 <vfprintf+0x22a>
    1848:	a8 c0       	rjmp	.+336    	; 0x199a <vfprintf+0x374>
    184a:	2f 2f       	mov	r18, r31
    184c:	20 61       	ori	r18, 0x10	; 16
    184e:	b2 2e       	mov	r11, r18
    1850:	b4 fe       	sbrs	r11, 4
    1852:	0d c0       	rjmp	.+26     	; 0x186e <vfprintf+0x248>
    1854:	8b 2d       	mov	r24, r11
    1856:	84 60       	ori	r24, 0x04	; 4
    1858:	b8 2e       	mov	r11, r24
    185a:	09 c0       	rjmp	.+18     	; 0x186e <vfprintf+0x248>
    185c:	24 ff       	sbrs	r18, 4
    185e:	0a c0       	rjmp	.+20     	; 0x1874 <vfprintf+0x24e>
    1860:	9f 2f       	mov	r25, r31
    1862:	96 60       	ori	r25, 0x06	; 6
    1864:	b9 2e       	mov	r11, r25
    1866:	06 c0       	rjmp	.+12     	; 0x1874 <vfprintf+0x24e>
    1868:	28 e0       	ldi	r18, 0x08	; 8
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <vfprintf+0x252>
    186e:	20 e1       	ldi	r18, 0x10	; 16
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <vfprintf+0x252>
    1874:	20 e1       	ldi	r18, 0x10	; 16
    1876:	32 e0       	ldi	r19, 0x02	; 2
    1878:	f8 01       	movw	r30, r16
    187a:	b7 fe       	sbrs	r11, 7
    187c:	07 c0       	rjmp	.+14     	; 0x188c <vfprintf+0x266>
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	93 81       	ldd	r25, Z+3	; 0x03
    1886:	0c 5f       	subi	r16, 0xFC	; 252
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <vfprintf+0x272>
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 5f       	subi	r16, 0xFE	; 254
    1896:	1f 4f       	sbci	r17, 0xFF	; 255
    1898:	a4 01       	movw	r20, r8
    189a:	e0 d0       	rcall	.+448    	; 0x1a5c <__ultoa_invert>
    189c:	a8 2e       	mov	r10, r24
    189e:	a8 18       	sub	r10, r8
    18a0:	fb 2d       	mov	r31, r11
    18a2:	ff 77       	andi	r31, 0x7F	; 127
    18a4:	bf 2e       	mov	r11, r31
    18a6:	b6 fe       	sbrs	r11, 6
    18a8:	0b c0       	rjmp	.+22     	; 0x18c0 <vfprintf+0x29a>
    18aa:	2b 2d       	mov	r18, r11
    18ac:	2e 7f       	andi	r18, 0xFE	; 254
    18ae:	a5 14       	cp	r10, r5
    18b0:	50 f4       	brcc	.+20     	; 0x18c6 <vfprintf+0x2a0>
    18b2:	b4 fe       	sbrs	r11, 4
    18b4:	0a c0       	rjmp	.+20     	; 0x18ca <vfprintf+0x2a4>
    18b6:	b2 fc       	sbrc	r11, 2
    18b8:	08 c0       	rjmp	.+16     	; 0x18ca <vfprintf+0x2a4>
    18ba:	2b 2d       	mov	r18, r11
    18bc:	2e 7e       	andi	r18, 0xEE	; 238
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <vfprintf+0x2a4>
    18c0:	7a 2c       	mov	r7, r10
    18c2:	2b 2d       	mov	r18, r11
    18c4:	03 c0       	rjmp	.+6      	; 0x18cc <vfprintf+0x2a6>
    18c6:	7a 2c       	mov	r7, r10
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <vfprintf+0x2a6>
    18ca:	75 2c       	mov	r7, r5
    18cc:	24 ff       	sbrs	r18, 4
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <vfprintf+0x2c4>
    18d0:	fe 01       	movw	r30, r28
    18d2:	ea 0d       	add	r30, r10
    18d4:	f1 1d       	adc	r31, r1
    18d6:	80 81       	ld	r24, Z
    18d8:	80 33       	cpi	r24, 0x30	; 48
    18da:	11 f4       	brne	.+4      	; 0x18e0 <vfprintf+0x2ba>
    18dc:	29 7e       	andi	r18, 0xE9	; 233
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <vfprintf+0x2cc>
    18e0:	22 ff       	sbrs	r18, 2
    18e2:	06 c0       	rjmp	.+12     	; 0x18f0 <vfprintf+0x2ca>
    18e4:	73 94       	inc	r7
    18e6:	73 94       	inc	r7
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <vfprintf+0x2cc>
    18ea:	82 2f       	mov	r24, r18
    18ec:	86 78       	andi	r24, 0x86	; 134
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <vfprintf+0x2cc>
    18f0:	73 94       	inc	r7
    18f2:	23 fd       	sbrc	r18, 3
    18f4:	12 c0       	rjmp	.+36     	; 0x191a <vfprintf+0x2f4>
    18f6:	20 ff       	sbrs	r18, 0
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <vfprintf+0x2e0>
    18fa:	5a 2c       	mov	r5, r10
    18fc:	73 14       	cp	r7, r3
    18fe:	18 f4       	brcc	.+6      	; 0x1906 <vfprintf+0x2e0>
    1900:	53 0c       	add	r5, r3
    1902:	57 18       	sub	r5, r7
    1904:	73 2c       	mov	r7, r3
    1906:	73 14       	cp	r7, r3
    1908:	60 f4       	brcc	.+24     	; 0x1922 <vfprintf+0x2fc>
    190a:	b7 01       	movw	r22, r14
    190c:	80 e2       	ldi	r24, 0x20	; 32
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	2c 87       	std	Y+12, r18	; 0x0c
    1912:	72 d0       	rcall	.+228    	; 0x19f8 <fputc>
    1914:	73 94       	inc	r7
    1916:	2c 85       	ldd	r18, Y+12	; 0x0c
    1918:	f6 cf       	rjmp	.-20     	; 0x1906 <vfprintf+0x2e0>
    191a:	73 14       	cp	r7, r3
    191c:	10 f4       	brcc	.+4      	; 0x1922 <vfprintf+0x2fc>
    191e:	37 18       	sub	r3, r7
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <vfprintf+0x2fe>
    1922:	31 2c       	mov	r3, r1
    1924:	24 ff       	sbrs	r18, 4
    1926:	11 c0       	rjmp	.+34     	; 0x194a <vfprintf+0x324>
    1928:	b7 01       	movw	r22, r14
    192a:	80 e3       	ldi	r24, 0x30	; 48
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	2c 87       	std	Y+12, r18	; 0x0c
    1930:	63 d0       	rcall	.+198    	; 0x19f8 <fputc>
    1932:	2c 85       	ldd	r18, Y+12	; 0x0c
    1934:	22 ff       	sbrs	r18, 2
    1936:	16 c0       	rjmp	.+44     	; 0x1964 <vfprintf+0x33e>
    1938:	21 ff       	sbrs	r18, 1
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <vfprintf+0x31c>
    193c:	88 e5       	ldi	r24, 0x58	; 88
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <vfprintf+0x320>
    1942:	88 e7       	ldi	r24, 0x78	; 120
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	b7 01       	movw	r22, r14
    1948:	0c c0       	rjmp	.+24     	; 0x1962 <vfprintf+0x33c>
    194a:	82 2f       	mov	r24, r18
    194c:	86 78       	andi	r24, 0x86	; 134
    194e:	51 f0       	breq	.+20     	; 0x1964 <vfprintf+0x33e>
    1950:	21 fd       	sbrc	r18, 1
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <vfprintf+0x332>
    1954:	80 e2       	ldi	r24, 0x20	; 32
    1956:	01 c0       	rjmp	.+2      	; 0x195a <vfprintf+0x334>
    1958:	8b e2       	ldi	r24, 0x2B	; 43
    195a:	27 fd       	sbrc	r18, 7
    195c:	8d e2       	ldi	r24, 0x2D	; 45
    195e:	b7 01       	movw	r22, r14
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	4a d0       	rcall	.+148    	; 0x19f8 <fputc>
    1964:	a5 14       	cp	r10, r5
    1966:	30 f4       	brcc	.+12     	; 0x1974 <vfprintf+0x34e>
    1968:	b7 01       	movw	r22, r14
    196a:	80 e3       	ldi	r24, 0x30	; 48
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	44 d0       	rcall	.+136    	; 0x19f8 <fputc>
    1970:	5a 94       	dec	r5
    1972:	f8 cf       	rjmp	.-16     	; 0x1964 <vfprintf+0x33e>
    1974:	aa 94       	dec	r10
    1976:	f4 01       	movw	r30, r8
    1978:	ea 0d       	add	r30, r10
    197a:	f1 1d       	adc	r31, r1
    197c:	80 81       	ld	r24, Z
    197e:	b7 01       	movw	r22, r14
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	3a d0       	rcall	.+116    	; 0x19f8 <fputc>
    1984:	a1 10       	cpse	r10, r1
    1986:	f6 cf       	rjmp	.-20     	; 0x1974 <vfprintf+0x34e>
    1988:	33 20       	and	r3, r3
    198a:	09 f4       	brne	.+2      	; 0x198e <vfprintf+0x368>
    198c:	5d ce       	rjmp	.-838    	; 0x1648 <vfprintf+0x22>
    198e:	b7 01       	movw	r22, r14
    1990:	80 e2       	ldi	r24, 0x20	; 32
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	31 d0       	rcall	.+98     	; 0x19f8 <fputc>
    1996:	3a 94       	dec	r3
    1998:	f7 cf       	rjmp	.-18     	; 0x1988 <vfprintf+0x362>
    199a:	f7 01       	movw	r30, r14
    199c:	86 81       	ldd	r24, Z+6	; 0x06
    199e:	97 81       	ldd	r25, Z+7	; 0x07
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <vfprintf+0x380>
    19a2:	8f ef       	ldi	r24, 0xFF	; 255
    19a4:	9f ef       	ldi	r25, 0xFF	; 255
    19a6:	2c 96       	adiw	r28, 0x0c	; 12
    19a8:	e2 e1       	ldi	r30, 0x12	; 18
    19aa:	d2 c0       	rjmp	.+420    	; 0x1b50 <__epilogue_restores__>

000019ac <strnlen_P>:
    19ac:	fc 01       	movw	r30, r24
    19ae:	05 90       	lpm	r0, Z+
    19b0:	61 50       	subi	r22, 0x01	; 1
    19b2:	70 40       	sbci	r23, 0x00	; 0
    19b4:	01 10       	cpse	r0, r1
    19b6:	d8 f7       	brcc	.-10     	; 0x19ae <strnlen_P+0x2>
    19b8:	80 95       	com	r24
    19ba:	90 95       	com	r25
    19bc:	8e 0f       	add	r24, r30
    19be:	9f 1f       	adc	r25, r31
    19c0:	08 95       	ret

000019c2 <strnlen>:
    19c2:	fc 01       	movw	r30, r24
    19c4:	61 50       	subi	r22, 0x01	; 1
    19c6:	70 40       	sbci	r23, 0x00	; 0
    19c8:	01 90       	ld	r0, Z+
    19ca:	01 10       	cpse	r0, r1
    19cc:	d8 f7       	brcc	.-10     	; 0x19c4 <strnlen+0x2>
    19ce:	80 95       	com	r24
    19d0:	90 95       	com	r25
    19d2:	8e 0f       	add	r24, r30
    19d4:	9f 1f       	adc	r25, r31
    19d6:	08 95       	ret

000019d8 <strrev>:
    19d8:	dc 01       	movw	r26, r24
    19da:	fc 01       	movw	r30, r24
    19dc:	67 2f       	mov	r22, r23
    19de:	71 91       	ld	r23, Z+
    19e0:	77 23       	and	r23, r23
    19e2:	e1 f7       	brne	.-8      	; 0x19dc <strrev+0x4>
    19e4:	32 97       	sbiw	r30, 0x02	; 2
    19e6:	04 c0       	rjmp	.+8      	; 0x19f0 <strrev+0x18>
    19e8:	7c 91       	ld	r23, X
    19ea:	6d 93       	st	X+, r22
    19ec:	70 83       	st	Z, r23
    19ee:	62 91       	ld	r22, -Z
    19f0:	ae 17       	cp	r26, r30
    19f2:	bf 07       	cpc	r27, r31
    19f4:	c8 f3       	brcs	.-14     	; 0x19e8 <strrev+0x10>
    19f6:	08 95       	ret

000019f8 <fputc>:
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	18 2f       	mov	r17, r24
    1a02:	09 2f       	mov	r16, r25
    1a04:	eb 01       	movw	r28, r22
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	81 fd       	sbrc	r24, 1
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <fputc+0x1a>
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	9f ef       	ldi	r25, 0xFF	; 255
    1a10:	20 c0       	rjmp	.+64     	; 0x1a52 <fputc+0x5a>
    1a12:	82 ff       	sbrs	r24, 2
    1a14:	10 c0       	rjmp	.+32     	; 0x1a36 <fputc+0x3e>
    1a16:	4e 81       	ldd	r20, Y+6	; 0x06
    1a18:	5f 81       	ldd	r21, Y+7	; 0x07
    1a1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1e:	42 17       	cp	r20, r18
    1a20:	53 07       	cpc	r21, r19
    1a22:	7c f4       	brge	.+30     	; 0x1a42 <fputc+0x4a>
    1a24:	e8 81       	ld	r30, Y
    1a26:	f9 81       	ldd	r31, Y+1	; 0x01
    1a28:	9f 01       	movw	r18, r30
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	39 83       	std	Y+1, r19	; 0x01
    1a30:	28 83       	st	Y, r18
    1a32:	10 83       	st	Z, r17
    1a34:	06 c0       	rjmp	.+12     	; 0x1a42 <fputc+0x4a>
    1a36:	e8 85       	ldd	r30, Y+8	; 0x08
    1a38:	f9 85       	ldd	r31, Y+9	; 0x09
    1a3a:	81 2f       	mov	r24, r17
    1a3c:	09 95       	icall
    1a3e:	89 2b       	or	r24, r25
    1a40:	29 f7       	brne	.-54     	; 0x1a0c <fputc+0x14>
    1a42:	2e 81       	ldd	r18, Y+6	; 0x06
    1a44:	3f 81       	ldd	r19, Y+7	; 0x07
    1a46:	2f 5f       	subi	r18, 0xFF	; 255
    1a48:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4a:	3f 83       	std	Y+7, r19	; 0x07
    1a4c:	2e 83       	std	Y+6, r18	; 0x06
    1a4e:	81 2f       	mov	r24, r17
    1a50:	90 2f       	mov	r25, r16
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	08 95       	ret

00001a5c <__ultoa_invert>:
    1a5c:	fa 01       	movw	r30, r20
    1a5e:	aa 27       	eor	r26, r26
    1a60:	28 30       	cpi	r18, 0x08	; 8
    1a62:	51 f1       	breq	.+84     	; 0x1ab8 <__ultoa_invert+0x5c>
    1a64:	20 31       	cpi	r18, 0x10	; 16
    1a66:	81 f1       	breq	.+96     	; 0x1ac8 <__ultoa_invert+0x6c>
    1a68:	e8 94       	clt
    1a6a:	6f 93       	push	r22
    1a6c:	6e 7f       	andi	r22, 0xFE	; 254
    1a6e:	6e 5f       	subi	r22, 0xFE	; 254
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	8f 4f       	sbci	r24, 0xFF	; 255
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
    1a76:	af 4f       	sbci	r26, 0xFF	; 255
    1a78:	b1 e0       	ldi	r27, 0x01	; 1
    1a7a:	3e d0       	rcall	.+124    	; 0x1af8 <__ultoa_invert+0x9c>
    1a7c:	b4 e0       	ldi	r27, 0x04	; 4
    1a7e:	3c d0       	rcall	.+120    	; 0x1af8 <__ultoa_invert+0x9c>
    1a80:	67 0f       	add	r22, r23
    1a82:	78 1f       	adc	r23, r24
    1a84:	89 1f       	adc	r24, r25
    1a86:	9a 1f       	adc	r25, r26
    1a88:	a1 1d       	adc	r26, r1
    1a8a:	68 0f       	add	r22, r24
    1a8c:	79 1f       	adc	r23, r25
    1a8e:	8a 1f       	adc	r24, r26
    1a90:	91 1d       	adc	r25, r1
    1a92:	a1 1d       	adc	r26, r1
    1a94:	6a 0f       	add	r22, r26
    1a96:	71 1d       	adc	r23, r1
    1a98:	81 1d       	adc	r24, r1
    1a9a:	91 1d       	adc	r25, r1
    1a9c:	a1 1d       	adc	r26, r1
    1a9e:	20 d0       	rcall	.+64     	; 0x1ae0 <__ultoa_invert+0x84>
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <__ultoa_invert+0x48>
    1aa2:	68 94       	set
    1aa4:	3f 91       	pop	r19
    1aa6:	2a e0       	ldi	r18, 0x0A	; 10
    1aa8:	26 9f       	mul	r18, r22
    1aaa:	11 24       	eor	r1, r1
    1aac:	30 19       	sub	r19, r0
    1aae:	30 5d       	subi	r19, 0xD0	; 208
    1ab0:	31 93       	st	Z+, r19
    1ab2:	de f6       	brtc	.-74     	; 0x1a6a <__ultoa_invert+0xe>
    1ab4:	cf 01       	movw	r24, r30
    1ab6:	08 95       	ret
    1ab8:	46 2f       	mov	r20, r22
    1aba:	47 70       	andi	r20, 0x07	; 7
    1abc:	40 5d       	subi	r20, 0xD0	; 208
    1abe:	41 93       	st	Z+, r20
    1ac0:	b3 e0       	ldi	r27, 0x03	; 3
    1ac2:	0f d0       	rcall	.+30     	; 0x1ae2 <__ultoa_invert+0x86>
    1ac4:	c9 f7       	brne	.-14     	; 0x1ab8 <__ultoa_invert+0x5c>
    1ac6:	f6 cf       	rjmp	.-20     	; 0x1ab4 <__ultoa_invert+0x58>
    1ac8:	46 2f       	mov	r20, r22
    1aca:	4f 70       	andi	r20, 0x0F	; 15
    1acc:	40 5d       	subi	r20, 0xD0	; 208
    1ace:	4a 33       	cpi	r20, 0x3A	; 58
    1ad0:	18 f0       	brcs	.+6      	; 0x1ad8 <__ultoa_invert+0x7c>
    1ad2:	49 5d       	subi	r20, 0xD9	; 217
    1ad4:	31 fd       	sbrc	r19, 1
    1ad6:	40 52       	subi	r20, 0x20	; 32
    1ad8:	41 93       	st	Z+, r20
    1ada:	02 d0       	rcall	.+4      	; 0x1ae0 <__ultoa_invert+0x84>
    1adc:	a9 f7       	brne	.-22     	; 0x1ac8 <__ultoa_invert+0x6c>
    1ade:	ea cf       	rjmp	.-44     	; 0x1ab4 <__ultoa_invert+0x58>
    1ae0:	b4 e0       	ldi	r27, 0x04	; 4
    1ae2:	a6 95       	lsr	r26
    1ae4:	97 95       	ror	r25
    1ae6:	87 95       	ror	r24
    1ae8:	77 95       	ror	r23
    1aea:	67 95       	ror	r22
    1aec:	ba 95       	dec	r27
    1aee:	c9 f7       	brne	.-14     	; 0x1ae2 <__ultoa_invert+0x86>
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	61 05       	cpc	r22, r1
    1af4:	71 05       	cpc	r23, r1
    1af6:	08 95       	ret
    1af8:	9b 01       	movw	r18, r22
    1afa:	ac 01       	movw	r20, r24
    1afc:	0a 2e       	mov	r0, r26
    1afe:	06 94       	lsr	r0
    1b00:	57 95       	ror	r21
    1b02:	47 95       	ror	r20
    1b04:	37 95       	ror	r19
    1b06:	27 95       	ror	r18
    1b08:	ba 95       	dec	r27
    1b0a:	c9 f7       	brne	.-14     	; 0x1afe <__ultoa_invert+0xa2>
    1b0c:	62 0f       	add	r22, r18
    1b0e:	73 1f       	adc	r23, r19
    1b10:	84 1f       	adc	r24, r20
    1b12:	95 1f       	adc	r25, r21
    1b14:	a0 1d       	adc	r26, r0
    1b16:	08 95       	ret

00001b18 <__prologue_saves__>:
    1b18:	2f 92       	push	r2
    1b1a:	3f 92       	push	r3
    1b1c:	4f 92       	push	r4
    1b1e:	5f 92       	push	r5
    1b20:	6f 92       	push	r6
    1b22:	7f 92       	push	r7
    1b24:	8f 92       	push	r8
    1b26:	9f 92       	push	r9
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	ca 1b       	sub	r28, r26
    1b42:	db 0b       	sbc	r29, r27
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	09 94       	ijmp

00001b50 <__epilogue_restores__>:
    1b50:	2a 88       	ldd	r2, Y+18	; 0x12
    1b52:	39 88       	ldd	r3, Y+17	; 0x11
    1b54:	48 88       	ldd	r4, Y+16	; 0x10
    1b56:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b58:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b60:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b62:	b9 84       	ldd	r11, Y+9	; 0x09
    1b64:	c8 84       	ldd	r12, Y+8	; 0x08
    1b66:	df 80       	ldd	r13, Y+7	; 0x07
    1b68:	ee 80       	ldd	r14, Y+6	; 0x06
    1b6a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b6c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b6e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b70:	aa 81       	ldd	r26, Y+2	; 0x02
    1b72:	b9 81       	ldd	r27, Y+1	; 0x01
    1b74:	ce 0f       	add	r28, r30
    1b76:	d1 1d       	adc	r29, r1
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	ed 01       	movw	r28, r26
    1b84:	08 95       	ret

00001b86 <_exit>:
    1b86:	f8 94       	cli

00001b88 <__stop_program>:
    1b88:	ff cf       	rjmp	.-2      	; 0x1b88 <__stop_program>
