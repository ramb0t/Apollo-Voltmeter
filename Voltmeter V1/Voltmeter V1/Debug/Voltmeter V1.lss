
Voltmeter V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000011a8  0000123c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080015c  0080015c  00001298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000730  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ad12  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002dfb  00000000  00000000  0000c70a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000148a2  00000000  00000000  0000f505  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000102c  00000000  00000000  00023da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001b0a0  00000000  00000000  00024dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000675c  00000000  00000000  0003fe74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000778  00000000  00000000  000465d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b444  00000000  00000000  00046d48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a5 c0       	rjmp	.+330    	; 0x14c <__ctors_end>
       2:	00 00       	nop
       4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
       6:	00 00       	nop
       8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
       a:	00 00       	nop
       c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
       e:	00 00       	nop
      10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
      12:	00 00       	nop
      14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
      16:	00 00       	nop
      18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b1 c0       	rjmp	.+354    	; 0x184 <__bad_interrupt>
      22:	00 00       	nop
      24:	af c0       	rjmp	.+350    	; 0x184 <__bad_interrupt>
      26:	00 00       	nop
      28:	26 c5       	rjmp	.+2636   	; 0xa76 <__vector_10>
      2a:	00 00       	nop
      2c:	ef c5       	rjmp	.+3038   	; 0xc0c <__vector_11>
      2e:	00 00       	nop
      30:	a9 c0       	rjmp	.+338    	; 0x184 <__bad_interrupt>
      32:	00 00       	nop
      34:	a7 c0       	rjmp	.+334    	; 0x184 <__bad_interrupt>
      36:	00 00       	nop
      38:	a5 c0       	rjmp	.+330    	; 0x184 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a3 c0       	rjmp	.+326    	; 0x184 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a1 c0       	rjmp	.+322    	; 0x184 <__bad_interrupt>
      42:	00 00       	nop
      44:	9f c0       	rjmp	.+318    	; 0x184 <__bad_interrupt>
      46:	00 00       	nop
      48:	9d c0       	rjmp	.+314    	; 0x184 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9b c0       	rjmp	.+310    	; 0x184 <__bad_interrupt>
      4e:	00 00       	nop
      50:	99 c0       	rjmp	.+306    	; 0x184 <__bad_interrupt>
      52:	00 00       	nop
      54:	97 c0       	rjmp	.+302    	; 0x184 <__bad_interrupt>
      56:	00 00       	nop
      58:	95 c0       	rjmp	.+298    	; 0x184 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	93 c0       	rjmp	.+294    	; 0x184 <__bad_interrupt>
      5e:	00 00       	nop
      60:	91 c0       	rjmp	.+290    	; 0x184 <__bad_interrupt>
      62:	00 00       	nop
      64:	8f c0       	rjmp	.+286    	; 0x184 <__bad_interrupt>
      66:	00 00       	nop
      68:	8d c0       	rjmp	.+282    	; 0x184 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8b c0       	rjmp	.+278    	; 0x184 <__bad_interrupt>
      6e:	00 00       	nop
      70:	89 c0       	rjmp	.+274    	; 0x184 <__bad_interrupt>
      72:	00 00       	nop
      74:	87 c0       	rjmp	.+270    	; 0x184 <__bad_interrupt>
      76:	00 00       	nop
      78:	85 c0       	rjmp	.+266    	; 0x184 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	83 c0       	rjmp	.+262    	; 0x184 <__bad_interrupt>
      7e:	00 00       	nop
      80:	81 c0       	rjmp	.+258    	; 0x184 <__bad_interrupt>
      82:	00 00       	nop
      84:	7f c0       	rjmp	.+254    	; 0x184 <__bad_interrupt>
      86:	00 00       	nop
      88:	7d c0       	rjmp	.+250    	; 0x184 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b c0       	rjmp	.+246    	; 0x184 <__bad_interrupt>
      8e:	00 00       	nop
      90:	79 c0       	rjmp	.+242    	; 0x184 <__bad_interrupt>
      92:	00 00       	nop
      94:	77 c0       	rjmp	.+238    	; 0x184 <__bad_interrupt>
      96:	00 00       	nop
      98:	75 c0       	rjmp	.+234    	; 0x184 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	73 c0       	rjmp	.+230    	; 0x184 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	71 c0       	rjmp	.+226    	; 0x184 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6f c0       	rjmp	.+222    	; 0x184 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6d c0       	rjmp	.+218    	; 0x184 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	68 06       	cpc	r6, r24
      ae:	8a 06       	cpc	r8, r26
      b0:	6e 07       	cpc	r22, r30
      b2:	8a 06       	cpc	r8, r26
      b4:	6e 07       	cpc	r22, r30
      b6:	cc 06       	cpc	r12, r28
      b8:	ee 06       	cpc	r14, r30
      ba:	6e 07       	cpc	r22, r30
      bc:	40 07       	cpc	r20, r16
      be:	52 07       	cpc	r21, r18

000000c0 <ProductString>:
      c0:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      d0:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000de <ManufacturerString>:
      de:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ee:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f8 <LanguageString>:
      f8:	04 03 09 04                                         ....

000000fc <ConfigurationDescriptor>:
      fc:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     10c:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     11c:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     12c:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000013a <DeviceDescriptor>:
     13a:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     14a:	dc 01                                               ..

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	da e0       	ldi	r29, 0x0A	; 10
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	e8 ea       	ldi	r30, 0xA8	; 168
     160:	f1 e1       	ldi	r31, 0x11	; 17
     162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x10>
     164:	05 90       	lpm	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	ac 35       	cpi	r26, 0x5C	; 92
     16a:	b1 07       	cpc	r27, r17
     16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0xc>

0000016e <__do_clear_bss>:
     16e:	21 e0       	ldi	r18, 0x01	; 1
     170:	ac e5       	ldi	r26, 0x5C	; 92
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	a8 37       	cpi	r26, 0x78	; 120
     17a:	b2 07       	cpc	r27, r18
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
     17e:	32 d7       	rcall	.+3684   	; 0xfe4 <main>
     180:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <_exit>

00000184 <__bad_interrupt>:
     184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     186:	29 2f       	mov	r18, r25
     188:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     18a:	22 30       	cpi	r18, 0x02	; 2
     18c:	31 05       	cpc	r19, r1
     18e:	59 f0       	breq	.+22     	; 0x1a6 <CALLBACK_USB_GetDescriptor+0x20>
     190:	23 30       	cpi	r18, 0x03	; 3
     192:	31 05       	cpc	r19, r1
     194:	69 f0       	breq	.+26     	; 0x1b0 <CALLBACK_USB_GetDescriptor+0x2a>
     196:	21 30       	cpi	r18, 0x01	; 1
     198:	31 05       	cpc	r19, r1
     19a:	f9 f4       	brne	.+62     	; 0x1da <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     19c:	82 e1       	ldi	r24, 0x12	; 18
     19e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1a0:	2a e3       	ldi	r18, 0x3A	; 58
     1a2:	31 e0       	ldi	r19, 0x01	; 1
     1a4:	1e c0       	rjmp	.+60     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1a6:	8e e3       	ldi	r24, 0x3E	; 62
     1a8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1aa:	2c ef       	ldi	r18, 0xFC	; 252
     1ac:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1ae:	19 c0       	rjmp	.+50     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x5c>
     1b0:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	91 05       	cpc	r25, r1
     1b6:	41 f0       	breq	.+16     	; 0x1c8 <CALLBACK_USB_GetDescriptor+0x42>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	91 05       	cpc	r25, r1
     1bc:	41 f0       	breq	.+16     	; 0x1ce <CALLBACK_USB_GetDescriptor+0x48>
     1be:	89 2b       	or	r24, r25
     1c0:	61 f4       	brne	.+24     	; 0x1da <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1c2:	e8 ef       	ldi	r30, 0xF8	; 248
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1c8:	ee ed       	ldi	r30, 0xDE	; 222
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1ce:	e0 ec       	ldi	r30, 0xC0	; 192
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	84 91       	lpm	r24, Z
     1d4:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1d6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1e2:	fa 01       	movw	r30, r20
     1e4:	31 83       	std	Z+1, r19	; 0x01
     1e6:	20 83       	st	Z, r18
	return Size;
}
     1e8:	08 95       	ret

000001ea <lcd_e_port_low>:
  {
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
      lcd_putc(c);
  }
     1ea:	76 98       	cbi	0x0e, 6	; 14
     1ec:	08 95       	ret

000001ee <lcd_e_port_high>:
     1ee:	76 9a       	sbi	0x0e, 6	; 14
     1f0:	08 95       	ret

000001f2 <lcd_write>:
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	c8 2f       	mov	r28, r24
     1f8:	d6 2f       	mov	r29, r22
     1fa:	66 23       	and	r22, r22
     1fc:	11 f0       	breq	.+4      	; 0x202 <lcd_write+0x10>
     1fe:	5e 9a       	sbi	0x0b, 6	; 11
     200:	01 c0       	rjmp	.+2      	; 0x204 <lcd_write+0x12>
     202:	5e 98       	cbi	0x0b, 6	; 11
     204:	c7 ff       	sbrs	r28, 7
     206:	02 c0       	rjmp	.+4      	; 0x20c <lcd_write+0x1a>
     208:	2c 9a       	sbi	0x05, 4	; 5
     20a:	01 c0       	rjmp	.+2      	; 0x20e <lcd_write+0x1c>
     20c:	2c 98       	cbi	0x05, 4	; 5
     20e:	c6 ff       	sbrs	r28, 6
     210:	02 c0       	rjmp	.+4      	; 0x216 <lcd_write+0x24>
     212:	2d 9a       	sbi	0x05, 5	; 5
     214:	01 c0       	rjmp	.+2      	; 0x218 <lcd_write+0x26>
     216:	2d 98       	cbi	0x05, 5	; 5
     218:	c5 ff       	sbrs	r28, 5
     21a:	02 c0       	rjmp	.+4      	; 0x220 <lcd_write+0x2e>
     21c:	2e 9a       	sbi	0x05, 6	; 5
     21e:	01 c0       	rjmp	.+2      	; 0x222 <lcd_write+0x30>
     220:	2e 98       	cbi	0x05, 6	; 5
     222:	c4 ff       	sbrs	r28, 4
     224:	02 c0       	rjmp	.+4      	; 0x22a <lcd_write+0x38>
     226:	2f 9a       	sbi	0x05, 7	; 5
     228:	01 c0       	rjmp	.+2      	; 0x22c <lcd_write+0x3a>
     22a:	2f 98       	cbi	0x05, 7	; 5
     22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_write+0x3c>
     22e:	df df       	rcall	.-66     	; 0x1ee <lcd_e_port_high>
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	8a 95       	dec	r24
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_write+0x40>
     236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_write+0x46>
     238:	d8 df       	rcall	.-80     	; 0x1ea <lcd_e_port_low>
     23a:	c3 ff       	sbrs	r28, 3
     23c:	02 c0       	rjmp	.+4      	; 0x242 <lcd_write+0x50>
     23e:	2c 9a       	sbi	0x05, 4	; 5
     240:	01 c0       	rjmp	.+2      	; 0x244 <lcd_write+0x52>
     242:	2c 98       	cbi	0x05, 4	; 5
     244:	c2 ff       	sbrs	r28, 2
     246:	02 c0       	rjmp	.+4      	; 0x24c <lcd_write+0x5a>
     248:	2d 9a       	sbi	0x05, 5	; 5
     24a:	01 c0       	rjmp	.+2      	; 0x24e <lcd_write+0x5c>
     24c:	2d 98       	cbi	0x05, 5	; 5
     24e:	c1 ff       	sbrs	r28, 1
     250:	02 c0       	rjmp	.+4      	; 0x256 <lcd_write+0x64>
     252:	2e 9a       	sbi	0x05, 6	; 5
     254:	01 c0       	rjmp	.+2      	; 0x258 <lcd_write+0x66>
     256:	2e 98       	cbi	0x05, 6	; 5
     258:	c0 ff       	sbrs	r28, 0
     25a:	02 c0       	rjmp	.+4      	; 0x260 <lcd_write+0x6e>
     25c:	2f 9a       	sbi	0x05, 7	; 5
     25e:	01 c0       	rjmp	.+2      	; 0x262 <lcd_write+0x70>
     260:	2f 98       	cbi	0x05, 7	; 5
     262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_write+0x72>
     264:	c4 df       	rcall	.-120    	; 0x1ee <lcd_e_port_high>
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	9a 95       	dec	r25
     26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_write+0x76>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_write+0x7c>
     26e:	bd df       	rcall	.-134    	; 0x1ea <lcd_e_port_low>
     270:	2c 9a       	sbi	0x05, 4	; 5
     272:	2d 9a       	sbi	0x05, 5	; 5
     274:	2e 9a       	sbi	0x05, 6	; 5
     276:	2f 9a       	sbi	0x05, 7	; 5
     278:	d1 11       	cpse	r29, r1
     27a:	08 c0       	rjmp	.+16     	; 0x28c <lcd_write+0x9a>
     27c:	c4 30       	cpi	r28, 0x04	; 4
     27e:	30 f4       	brcc	.+12     	; 0x28c <lcd_write+0x9a>
     280:	8f e9       	ldi	r24, 0x9F	; 159
     282:	99 e1       	ldi	r25, 0x19	; 25
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <lcd_write+0x92>
     288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_write+0x98>
     28a:	03 c0       	rjmp	.+6      	; 0x292 <lcd_write+0xa0>
     28c:	95 ed       	ldi	r25, 0xD5	; 213
     28e:	9a 95       	dec	r25
     290:	f1 f7       	brne	.-4      	; 0x28e <lcd_write+0x9c>
     292:	00 00       	nop
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <lcd_command>:
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	aa cf       	rjmp	.-172    	; 0x1f2 <lcd_write>

0000029e <lcd_clrscr>:
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	fc cf       	rjmp	.-8      	; 0x29a <lcd_command>

000002a2 <lcd_putc>:
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	a6 cf       	rjmp	.-180    	; 0x1f2 <lcd_write>

000002a6 <lcd_puts>:
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
     2ac:	89 91       	ld	r24, Y+
     2ae:	88 23       	and	r24, r24
     2b0:	11 f0       	breq	.+4      	; 0x2b6 <lcd_puts+0x10>
     2b2:	f7 df       	rcall	.-18     	; 0x2a2 <lcd_putc>
     2b4:	fb cf       	rjmp	.-10     	; 0x2ac <lcd_puts+0x6>
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
     2bc:	6e 9a       	sbi	0x0d, 6	; 13
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
     2be:	56 9a       	sbi	0x0a, 6	; 10
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
     2c0:	24 9a       	sbi	0x04, 4	; 4
    lcd_db6_ddr_high();
     2c2:	25 9a       	sbi	0x04, 5	; 4
    lcd_db5_ddr_high();
     2c4:	26 9a       	sbi	0x04, 6	; 4
    lcd_db4_ddr_high();
     2c6:	27 9a       	sbi	0x04, 7	; 4
      lcd_db1_ddr_high();
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
     2c8:	90 df       	rcall	.-224    	; 0x1ea <lcd_e_port_low>
    lcd_rs_port_low();
     2ca:	5e 98       	cbi	0x0b, 6	; 11
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
     2cc:	2c 9a       	sbi	0x05, 4	; 5
    lcd_db6_port_high();
     2ce:	2d 9a       	sbi	0x05, 5	; 5
    lcd_db5_port_high();
     2d0:	2e 9a       	sbi	0x05, 6	; 5
    lcd_db4_port_high();
     2d2:	2f 9a       	sbi	0x05, 7	; 5
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
     2d4:	8f e5       	ldi	r24, 0x5F	; 95
     2d6:	9a ee       	ldi	r25, 0xEA	; 234
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_init+0x1c>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <lcd_init+0x22>
     2de:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
     2e0:	2c 98       	cbi	0x05, 4	; 5
    lcd_db6_port_low();
     2e2:	2d 98       	cbi	0x05, 5	; 5
    Delay_ns(100);
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <lcd_init+0x2a>
    lcd_e_port_high();
     2e6:	83 df       	rcall	.-250    	; 0x1ee <lcd_e_port_high>
    Delay_ns(500);
     2e8:	92 e0       	ldi	r25, 0x02	; 2
     2ea:	9a 95       	dec	r25
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_init+0x2e>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <lcd_init+0x34>
    lcd_e_port_low();
     2f0:	7c df       	rcall	.-264    	; 0x1ea <lcd_e_port_low>

    Delay_us(4100);
     2f2:	8f e0       	ldi	r24, 0x0F	; 15
     2f4:	90 e4       	ldi	r25, 0x40	; 64
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_init+0x3a>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_init+0x40>
     2fc:	00 00       	nop

    lcd_e_port_high();
     2fe:	77 df       	rcall	.-274    	; 0x1ee <lcd_e_port_high>
    Delay_ns(500);
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	9a 95       	dec	r25
     304:	f1 f7       	brne	.-4      	; 0x302 <lcd_init+0x46>
     306:	00 c0       	rjmp	.+0      	; 0x308 <lcd_init+0x4c>
    lcd_e_port_low();
     308:	70 df       	rcall	.-288    	; 0x1ea <lcd_e_port_low>

    Delay_us(100);
     30a:	8f e8       	ldi	r24, 0x8F	; 143
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <lcd_init+0x52>
     312:	00 c0       	rjmp	.+0      	; 0x314 <lcd_init+0x58>
     314:	00 00       	nop

    lcd_e_port_high();
     316:	6b df       	rcall	.-298    	; 0x1ee <lcd_e_port_high>
    Delay_ns(500);
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	9a 95       	dec	r25
     31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_init+0x5e>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <lcd_init+0x64>
    lcd_e_port_low();
     320:	64 df       	rcall	.-312    	; 0x1ea <lcd_e_port_low>

    Delay_us(40);
     322:	85 ed       	ldi	r24, 0xD5	; 213
     324:	8a 95       	dec	r24
     326:	f1 f7       	brne	.-4      	; 0x324 <lcd_init+0x68>
     328:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
     32a:	2f 98       	cbi	0x05, 7	; 5
      Delay_ns(100);
     32c:	00 c0       	rjmp	.+0      	; 0x32e <lcd_init+0x72>
      lcd_e_port_high();
     32e:	5f df       	rcall	.-322    	; 0x1ee <lcd_e_port_high>
      Delay_ns(500);
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	9a 95       	dec	r25
     334:	f1 f7       	brne	.-4      	; 0x332 <lcd_init+0x76>
     336:	00 c0       	rjmp	.+0      	; 0x338 <lcd_init+0x7c>
      lcd_e_port_low();
     338:	58 df       	rcall	.-336    	; 0x1ea <lcd_e_port_low>
      Delay_us(40);
     33a:	85 ed       	ldi	r24, 0xD5	; 213
     33c:	8a 95       	dec	r24
     33e:	f1 f7       	brne	.-4      	; 0x33c <lcd_init+0x80>
     340:	00 00       	nop

      lcd_db4_port_low();
     342:	2f 98       	cbi	0x05, 7	; 5
      Delay_ns(100);
     344:	00 c0       	rjmp	.+0      	; 0x346 <lcd_init+0x8a>
      lcd_e_port_high();
     346:	53 df       	rcall	.-346    	; 0x1ee <lcd_e_port_high>
      Delay_ns(500);
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	9a 95       	dec	r25
     34c:	f1 f7       	brne	.-4      	; 0x34a <lcd_init+0x8e>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <lcd_init+0x94>
      lcd_e_port_low();
     350:	4c df       	rcall	.-360    	; 0x1ea <lcd_e_port_low>
      Delay_ns(500);
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	8a 95       	dec	r24
     356:	f1 f7       	brne	.-4      	; 0x354 <lcd_init+0x98>
     358:	00 c0       	rjmp	.+0      	; 0x35a <lcd_init+0x9e>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
     35a:	2c 9a       	sbi	0x05, 4	; 5
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
     35c:	00 c0       	rjmp	.+0      	; 0x35e <lcd_init+0xa2>
      lcd_e_port_high();
     35e:	47 df       	rcall	.-370    	; 0x1ee <lcd_e_port_high>
      Delay_ns(500);
     360:	92 e0       	ldi	r25, 0x02	; 2
     362:	9a 95       	dec	r25
     364:	f1 f7       	brne	.-4      	; 0x362 <lcd_init+0xa6>
     366:	00 c0       	rjmp	.+0      	; 0x368 <lcd_init+0xac>
      lcd_e_port_low();
     368:	40 df       	rcall	.-384    	; 0x1ea <lcd_e_port_low>
      Delay_us(40);
     36a:	85 ed       	ldi	r24, 0xD5	; 213
     36c:	8a 95       	dec	r24
     36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0xb0>
     370:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
     372:	88 e0       	ldi	r24, 0x08	; 8
     374:	92 df       	rcall	.-220    	; 0x29a <lcd_command>

    //Display Clear
    lcd_clrscr();
     376:	93 df       	rcall	.-218    	; 0x29e <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
     378:	86 e0       	ldi	r24, 0x06	; 6
     37a:	8f df       	rcall	.-226    	; 0x29a <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
     37c:	8c e0       	ldi	r24, 0x0C	; 12
     37e:	8d cf       	rjmp	.-230    	; 0x29a <lcd_command>

00000380 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	ec 01       	movw	r28, r24
     386:	fc 01       	movw	r30, r24
     388:	70 96       	adiw	r30, 0x10	; 16
     38a:	8b e0       	ldi	r24, 0x0B	; 11
     38c:	df 01       	movw	r26, r30
     38e:	1d 92       	st	X+, r1
     390:	8a 95       	dec	r24
     392:	e9 f7       	brne	.-6      	; 0x38e <CDC_Device_ConfigureEndpoints+0xe>
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	8c 83       	std	Y+4, r24	; 0x04
     398:	89 87       	std	Y+9, r24	; 0x09
     39a:	83 e0       	ldi	r24, 0x03	; 3
     39c:	8e 87       	std	Y+14, r24	; 0x0e
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	ce 01       	movw	r24, r28
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	7d d2       	rcall	.+1274   	; 0x8a0 <Endpoint_ConfigureEndpointTable>
     3a6:	88 23       	and	r24, r24
     3a8:	61 f0       	breq	.+24     	; 0x3c2 <CDC_Device_ConfigureEndpoints+0x42>
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	ce 01       	movw	r24, r28
     3ae:	06 96       	adiw	r24, 0x06	; 6
     3b0:	77 d2       	rcall	.+1262   	; 0x8a0 <Endpoint_ConfigureEndpointTable>
     3b2:	88 23       	and	r24, r24
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <CDC_Device_ConfigureEndpoints+0x42>
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	ce 01       	movw	r24, r28
     3ba:	0b 96       	adiw	r24, 0x0b	; 11
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	6f c2       	rjmp	.+1246   	; 0x8a0 <Endpoint_ConfigureEndpointTable>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <CDC_Device_SendByte>:
     3ca:	cf 93       	push	r28
     3cc:	c6 2f       	mov	r28, r22
     3ce:	20 91 6e 01 	lds	r18, 0x016E
     3d2:	24 30       	cpi	r18, 0x04	; 4
     3d4:	f1 f4       	brne	.+60     	; 0x412 <CDC_Device_SendByte+0x48>
     3d6:	fc 01       	movw	r30, r24
     3d8:	44 89       	ldd	r20, Z+20	; 0x14
     3da:	55 89       	ldd	r21, Z+21	; 0x15
     3dc:	66 89       	ldd	r22, Z+22	; 0x16
     3de:	77 89       	ldd	r23, Z+23	; 0x17
     3e0:	45 2b       	or	r20, r21
     3e2:	46 2b       	or	r20, r22
     3e4:	47 2b       	or	r20, r23
     3e6:	a9 f0       	breq	.+42     	; 0x412 <CDC_Device_SendByte+0x48>
     3e8:	81 81       	ldd	r24, Z+1	; 0x01
     3ea:	8f 70       	andi	r24, 0x0F	; 15
     3ec:	80 93 e9 00 	sts	0x00E9, r24
     3f0:	80 91 e8 00 	lds	r24, 0x00E8
     3f4:	85 ff       	sbrs	r24, 5
     3f6:	04 c0       	rjmp	.+8      	; 0x400 <CDC_Device_SendByte+0x36>
     3f8:	c0 93 f1 00 	sts	0x00F1, r28
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <CDC_Device_SendByte+0x4a>
     400:	80 91 e8 00 	lds	r24, 0x00E8
     404:	8e 77       	andi	r24, 0x7E	; 126
     406:	80 93 e8 00 	sts	0x00E8, r24
     40a:	a8 d2       	rcall	.+1360   	; 0x95c <Endpoint_WaitUntilReady>
     40c:	88 23       	and	r24, r24
     40e:	a1 f3       	breq	.-24     	; 0x3f8 <CDC_Device_SendByte+0x2e>
     410:	01 c0       	rjmp	.+2      	; 0x414 <CDC_Device_SendByte+0x4a>
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <CDC_Device_putchar>:
     418:	fb 01       	movw	r30, r22
     41a:	68 2f       	mov	r22, r24
     41c:	84 85       	ldd	r24, Z+12	; 0x0c
     41e:	95 85       	ldd	r25, Z+13	; 0x0d
     420:	d4 df       	rcall	.-88     	; 0x3ca <CDC_Device_SendByte>
     422:	21 e0       	ldi	r18, 0x01	; 1
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	81 11       	cpse	r24, r1
     428:	02 c0       	rjmp	.+4      	; 0x42e <CDC_Device_putchar+0x16>
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	88 27       	eor	r24, r24
     430:	99 27       	eor	r25, r25
     432:	82 1b       	sub	r24, r18
     434:	93 0b       	sbc	r25, r19
     436:	08 95       	ret

00000438 <CDC_Device_Flush>:
     438:	20 91 6e 01 	lds	r18, 0x016E
     43c:	24 30       	cpi	r18, 0x04	; 4
     43e:	41 f5       	brne	.+80     	; 0x490 <CDC_Device_Flush+0x58>
     440:	fc 01       	movw	r30, r24
     442:	44 89       	ldd	r20, Z+20	; 0x14
     444:	55 89       	ldd	r21, Z+21	; 0x15
     446:	66 89       	ldd	r22, Z+22	; 0x16
     448:	77 89       	ldd	r23, Z+23	; 0x17
     44a:	45 2b       	or	r20, r21
     44c:	46 2b       	or	r20, r22
     44e:	47 2b       	or	r20, r23
     450:	f9 f0       	breq	.+62     	; 0x490 <CDC_Device_Flush+0x58>
     452:	81 81       	ldd	r24, Z+1	; 0x01
     454:	8f 70       	andi	r24, 0x0F	; 15
     456:	80 93 e9 00 	sts	0x00E9, r24
     45a:	20 91 f3 00 	lds	r18, 0x00F3
     45e:	80 91 f2 00 	lds	r24, 0x00F2
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	92 2b       	or	r25, r18
     466:	89 2b       	or	r24, r25
     468:	89 f0       	breq	.+34     	; 0x48c <CDC_Device_Flush+0x54>
     46a:	90 91 e8 00 	lds	r25, 0x00E8
     46e:	80 91 e8 00 	lds	r24, 0x00E8
     472:	8e 77       	andi	r24, 0x7E	; 126
     474:	80 93 e8 00 	sts	0x00E8, r24
     478:	95 fd       	sbrc	r25, 5
     47a:	08 c0       	rjmp	.+16     	; 0x48c <CDC_Device_Flush+0x54>
     47c:	6f d2       	rcall	.+1246   	; 0x95c <Endpoint_WaitUntilReady>
     47e:	81 11       	cpse	r24, r1
     480:	08 c0       	rjmp	.+16     	; 0x492 <CDC_Device_Flush+0x5a>
     482:	80 91 e8 00 	lds	r24, 0x00E8
     486:	8e 77       	andi	r24, 0x7E	; 126
     488:	80 93 e8 00 	sts	0x00E8, r24
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	08 95       	ret
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	08 95       	ret

00000494 <CDC_Device_USBTask>:
     494:	20 91 6e 01 	lds	r18, 0x016E
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	89 f4       	brne	.+34     	; 0x4be <CDC_Device_USBTask+0x2a>
     49c:	fc 01       	movw	r30, r24
     49e:	44 89       	ldd	r20, Z+20	; 0x14
     4a0:	55 89       	ldd	r21, Z+21	; 0x15
     4a2:	66 89       	ldd	r22, Z+22	; 0x16
     4a4:	77 89       	ldd	r23, Z+23	; 0x17
     4a6:	45 2b       	or	r20, r21
     4a8:	46 2b       	or	r20, r22
     4aa:	47 2b       	or	r20, r23
     4ac:	41 f0       	breq	.+16     	; 0x4be <CDC_Device_USBTask+0x2a>
     4ae:	21 81       	ldd	r18, Z+1	; 0x01
     4b0:	2f 70       	andi	r18, 0x0F	; 15
     4b2:	20 93 e9 00 	sts	0x00E9, r18
     4b6:	20 91 e8 00 	lds	r18, 0x00E8
     4ba:	20 fd       	sbrc	r18, 0
     4bc:	bd cf       	rjmp	.-134    	; 0x438 <CDC_Device_Flush>
     4be:	08 95       	ret

000004c0 <CDC_Device_ReceiveByte>:
     4c0:	20 91 6e 01 	lds	r18, 0x016E
     4c4:	24 30       	cpi	r18, 0x04	; 4
     4c6:	19 f0       	breq	.+6      	; 0x4ce <CDC_Device_ReceiveByte+0xe>
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	9f ef       	ldi	r25, 0xFF	; 255
     4cc:	08 95       	ret
     4ce:	fc 01       	movw	r30, r24
     4d0:	44 89       	ldd	r20, Z+20	; 0x14
     4d2:	55 89       	ldd	r21, Z+21	; 0x15
     4d4:	66 89       	ldd	r22, Z+22	; 0x16
     4d6:	77 89       	ldd	r23, Z+23	; 0x17
     4d8:	45 2b       	or	r20, r21
     4da:	46 2b       	or	r20, r22
     4dc:	47 2b       	or	r20, r23
     4de:	a1 f3       	breq	.-24     	; 0x4c8 <CDC_Device_ReceiveByte+0x8>
     4e0:	86 81       	ldd	r24, Z+6	; 0x06
     4e2:	8f 70       	andi	r24, 0x0F	; 15
     4e4:	80 93 e9 00 	sts	0x00E9, r24
     4e8:	80 91 e8 00 	lds	r24, 0x00E8
     4ec:	82 ff       	sbrs	r24, 2
     4ee:	ec cf       	rjmp	.-40     	; 0x4c8 <CDC_Device_ReceiveByte+0x8>
     4f0:	20 91 f3 00 	lds	r18, 0x00F3
     4f4:	80 91 f2 00 	lds	r24, 0x00F2
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	92 2b       	or	r25, r18
     4fc:	89 2b       	or	r24, r25
     4fe:	21 f0       	breq	.+8      	; 0x508 <CDC_Device_ReceiveByte+0x48>
     500:	20 91 f1 00 	lds	r18, 0x00F1
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <CDC_Device_ReceiveByte+0x4c>
     508:	2f ef       	ldi	r18, 0xFF	; 255
     50a:	3f ef       	ldi	r19, 0xFF	; 255
     50c:	40 91 f3 00 	lds	r20, 0x00F3
     510:	80 91 f2 00 	lds	r24, 0x00F2
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	94 2b       	or	r25, r20
     518:	89 2b       	or	r24, r25
     51a:	29 f4       	brne	.+10     	; 0x526 <CDC_Device_ReceiveByte+0x66>
     51c:	80 91 e8 00 	lds	r24, 0x00E8
     520:	8b 77       	andi	r24, 0x7B	; 123
     522:	80 93 e8 00 	sts	0x00E8, r24
     526:	c9 01       	movw	r24, r18
     528:	08 95       	ret

0000052a <CDC_Device_getchar>:
     52a:	fc 01       	movw	r30, r24
     52c:	84 85       	ldd	r24, Z+12	; 0x0c
     52e:	95 85       	ldd	r25, Z+13	; 0x0d
     530:	c7 df       	rcall	.-114    	; 0x4c0 <CDC_Device_ReceiveByte>
     532:	97 ff       	sbrs	r25, 7
     534:	02 c0       	rjmp	.+4      	; 0x53a <CDC_Device_getchar+0x10>
     536:	8e ef       	ldi	r24, 0xFE	; 254
     538:	9f ef       	ldi	r25, 0xFF	; 255
     53a:	08 95       	ret

0000053c <CDC_Device_CreateStream>:
     53c:	fb 01       	movw	r30, r22
     53e:	2e e0       	ldi	r18, 0x0E	; 14
     540:	db 01       	movw	r26, r22
     542:	1d 92       	st	X+, r1
     544:	2a 95       	dec	r18
     546:	e9 f7       	brne	.-6      	; 0x542 <CDC_Device_CreateStream+0x6>
     548:	23 e0       	ldi	r18, 0x03	; 3
     54a:	23 83       	std	Z+3, r18	; 0x03
     54c:	2c e0       	ldi	r18, 0x0C	; 12
     54e:	32 e0       	ldi	r19, 0x02	; 2
     550:	31 87       	std	Z+9, r19	; 0x09
     552:	20 87       	std	Z+8, r18	; 0x08
     554:	25 e9       	ldi	r18, 0x95	; 149
     556:	32 e0       	ldi	r19, 0x02	; 2
     558:	33 87       	std	Z+11, r19	; 0x0b
     55a:	22 87       	std	Z+10, r18	; 0x0a
     55c:	95 87       	std	Z+13, r25	; 0x0d
     55e:	84 87       	std	Z+12, r24	; 0x0c
     560:	08 95       	ret

00000562 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     562:	08 95       	ret

00000564 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     56a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     56e:	83 ff       	sbrs	r24, 3
     570:	a6 c0       	rjmp	.+332    	; 0x6be <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     572:	88 81       	ld	r24, Y
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	20 91 73 01 	lds	r18, 0x0173
     57a:	30 91 74 01 	lds	r19, 0x0174
     57e:	28 17       	cp	r18, r24
     580:	39 07       	cpc	r19, r25
     582:	09 f0       	breq	.+2      	; 0x586 <CDC_Device_ProcessControlRequest+0x22>
     584:	9c c0       	rjmp	.+312    	; 0x6be <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     586:	80 91 70 01 	lds	r24, 0x0170
     58a:	81 32       	cpi	r24, 0x21	; 33
     58c:	61 f0       	breq	.+24     	; 0x5a6 <CDC_Device_ProcessControlRequest+0x42>
     58e:	20 f4       	brcc	.+8      	; 0x598 <CDC_Device_ProcessControlRequest+0x34>
     590:	80 32       	cpi	r24, 0x20	; 32
     592:	09 f4       	brne	.+2      	; 0x596 <CDC_Device_ProcessControlRequest+0x32>
     594:	3e c0       	rjmp	.+124    	; 0x612 <CDC_Device_ProcessControlRequest+0xae>
     596:	93 c0       	rjmp	.+294    	; 0x6be <CDC_Device_ProcessControlRequest+0x15a>
     598:	82 32       	cpi	r24, 0x22	; 34
     59a:	09 f4       	brne	.+2      	; 0x59e <CDC_Device_ProcessControlRequest+0x3a>
     59c:	6c c0       	rjmp	.+216    	; 0x676 <CDC_Device_ProcessControlRequest+0x112>
     59e:	83 32       	cpi	r24, 0x23	; 35
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <CDC_Device_ProcessControlRequest+0x40>
     5a2:	7d c0       	rjmp	.+250    	; 0x69e <CDC_Device_ProcessControlRequest+0x13a>
     5a4:	8c c0       	rjmp	.+280    	; 0x6be <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     5a6:	80 91 6f 01 	lds	r24, 0x016F
     5aa:	81 3a       	cpi	r24, 0xA1	; 161
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <CDC_Device_ProcessControlRequest+0x4c>
     5ae:	87 c0       	rjmp	.+270    	; 0x6be <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     5b0:	80 91 e8 00 	lds	r24, 0x00E8
     5b4:	87 7f       	andi	r24, 0xF7	; 247
     5b6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5ba:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     5be:	80 ff       	sbrs	r24, 0
     5c0:	fc cf       	rjmp	.-8      	; 0x5ba <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     5c2:	4c 89       	ldd	r20, Y+20	; 0x14
     5c4:	5d 89       	ldd	r21, Y+21	; 0x15
     5c6:	6e 89       	ldd	r22, Y+22	; 0x16
     5c8:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     5ca:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     5ce:	bb 27       	eor	r27, r27
     5d0:	a7 2f       	mov	r26, r23
     5d2:	96 2f       	mov	r25, r22
     5d4:	85 2f       	mov	r24, r21
     5d6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     5da:	cb 01       	movw	r24, r22
     5dc:	aa 27       	eor	r26, r26
     5de:	bb 27       	eor	r27, r27
     5e0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     5e4:	47 2f       	mov	r20, r23
     5e6:	55 27       	eor	r21, r21
     5e8:	66 27       	eor	r22, r22
     5ea:	77 27       	eor	r23, r23
     5ec:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     5f0:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5f2:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     5f6:	89 8d       	ldd	r24, Y+25	; 0x19
     5f8:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     5fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     5fe:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     602:	80 91 e8 00 	lds	r24, 0x00E8
     606:	8e 77       	andi	r24, 0x7E	; 126
     608:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     610:	84 c1       	rjmp	.+776    	; 0x91a <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     612:	80 91 6f 01 	lds	r24, 0x016F
     616:	81 32       	cpi	r24, 0x21	; 33
     618:	09 f0       	breq	.+2      	; 0x61c <CDC_Device_ProcessControlRequest+0xb8>
     61a:	51 c0       	rjmp	.+162    	; 0x6be <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     61c:	80 91 e8 00 	lds	r24, 0x00E8
     620:	87 7f       	andi	r24, 0xF7	; 247
     622:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     626:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     62a:	82 fd       	sbrc	r24, 2
     62c:	05 c0       	rjmp	.+10     	; 0x638 <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     62e:	80 91 6e 01 	lds	r24, 0x016E
     632:	81 11       	cpse	r24, r1
     634:	f8 cf       	rjmp	.-16     	; 0x626 <CDC_Device_ProcessControlRequest+0xc2>
     636:	43 c0       	rjmp	.+134    	; 0x6be <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     638:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     63c:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     640:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     644:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     648:	3c 8b       	std	Y+20, r19	; 0x14
     64a:	2d 8b       	std	Y+21, r18	; 0x15
     64c:	9e 8b       	std	Y+22, r25	; 0x16
     64e:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     650:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     654:	88 8f       	std	Y+24, r24	; 0x18
     656:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     65a:	89 8f       	std	Y+25, r24	; 0x19
     65c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     660:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     662:	80 91 e8 00 	lds	r24, 0x00E8
     666:	8b 77       	andi	r24, 0x7B	; 123
     668:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     66c:	56 d1       	rcall	.+684    	; 0x91a <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     66e:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     674:	76 cf       	rjmp	.-276    	; 0x562 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     676:	80 91 6f 01 	lds	r24, 0x016F
     67a:	81 32       	cpi	r24, 0x21	; 33
     67c:	01 f5       	brne	.+64     	; 0x6be <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     67e:	80 91 e8 00 	lds	r24, 0x00E8
     682:	87 7f       	andi	r24, 0xF7	; 247
     684:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     688:	48 d1       	rcall	.+656    	; 0x91a <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     68a:	80 91 71 01 	lds	r24, 0x0171
     68e:	90 91 72 01 	lds	r25, 0x0172
     692:	99 8b       	std	Y+17, r25	; 0x11
     694:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     696:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     69c:	62 cf       	rjmp	.-316    	; 0x562 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     69e:	80 91 6f 01 	lds	r24, 0x016F
     6a2:	81 32       	cpi	r24, 0x21	; 33
     6a4:	61 f4       	brne	.+24     	; 0x6be <CDC_Device_ProcessControlRequest+0x15a>
     6a6:	80 91 e8 00 	lds	r24, 0x00E8
     6aa:	87 7f       	andi	r24, 0xF7	; 247
     6ac:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     6b0:	34 d1       	rcall	.+616    	; 0x91a <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     6b2:	60 91 71 01 	lds	r22, 0x0171
     6b6:	ce 01       	movw	r24, r28
			}

			break;
	}
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     6bc:	52 cf       	rjmp	.-348    	; 0x562 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6c4:	20 91 75 01 	lds	r18, 0x0175
     6c8:	30 91 76 01 	lds	r19, 0x0176
     6cc:	26 17       	cp	r18, r22
     6ce:	37 07       	cpc	r19, r23
     6d0:	48 f0       	brcs	.+18     	; 0x6e4 <Endpoint_Write_Control_Stream_LE+0x20>
     6d2:	61 15       	cp	r22, r1
     6d4:	71 05       	cpc	r23, r1
     6d6:	39 f4       	brne	.+14     	; 0x6e6 <Endpoint_Write_Control_Stream_LE+0x22>
     6d8:	20 91 e8 00 	lds	r18, 0x00E8
     6dc:	2e 77       	andi	r18, 0x7E	; 126
     6de:	20 93 e8 00 	sts	0x00E8, r18
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <Endpoint_Write_Control_Stream_LE+0x22>
     6e4:	b9 01       	movw	r22, r18
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	61 15       	cp	r22, r1
     6ec:	71 05       	cpc	r23, r1
     6ee:	a9 f1       	breq	.+106    	; 0x75a <Endpoint_Write_Control_Stream_LE+0x96>
     6f0:	80 91 6e 01 	lds	r24, 0x016E
     6f4:	88 23       	and	r24, r24
     6f6:	e9 f1       	breq	.+122    	; 0x772 <Endpoint_Write_Control_Stream_LE+0xae>
     6f8:	85 30       	cpi	r24, 0x05	; 5
     6fa:	e9 f1       	breq	.+122    	; 0x776 <Endpoint_Write_Control_Stream_LE+0xb2>
     6fc:	80 91 e8 00 	lds	r24, 0x00E8
     700:	83 fd       	sbrc	r24, 3
     702:	35 c0       	rjmp	.+106    	; 0x76e <Endpoint_Write_Control_Stream_LE+0xaa>
     704:	80 91 e8 00 	lds	r24, 0x00E8
     708:	82 ff       	sbrs	r24, 2
     70a:	06 c0       	rjmp	.+12     	; 0x718 <Endpoint_Write_Control_Stream_LE+0x54>
     70c:	80 91 e8 00 	lds	r24, 0x00E8
     710:	82 ff       	sbrs	r24, 2
     712:	26 c0       	rjmp	.+76     	; 0x760 <Endpoint_Write_Control_Stream_LE+0x9c>
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	08 95       	ret
     718:	80 91 e8 00 	lds	r24, 0x00E8
     71c:	80 ff       	sbrs	r24, 0
     71e:	e5 cf       	rjmp	.-54     	; 0x6ea <Endpoint_Write_Control_Stream_LE+0x26>
     720:	20 91 f3 00 	lds	r18, 0x00F3
     724:	80 91 f2 00 	lds	r24, 0x00F2
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	92 2b       	or	r25, r18
     72c:	61 15       	cp	r22, r1
     72e:	71 05       	cpc	r23, r1
     730:	51 f0       	breq	.+20     	; 0x746 <Endpoint_Write_Control_Stream_LE+0x82>
     732:	88 30       	cpi	r24, 0x08	; 8
     734:	91 05       	cpc	r25, r1
     736:	38 f4       	brcc	.+14     	; 0x746 <Endpoint_Write_Control_Stream_LE+0x82>
     738:	21 91       	ld	r18, Z+
     73a:	20 93 f1 00 	sts	0x00F1, r18
     73e:	61 50       	subi	r22, 0x01	; 1
     740:	71 09       	sbc	r23, r1
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	f3 cf       	rjmp	.-26     	; 0x72c <Endpoint_Write_Control_Stream_LE+0x68>
     746:	21 e0       	ldi	r18, 0x01	; 1
     748:	08 97       	sbiw	r24, 0x08	; 8
     74a:	09 f0       	breq	.+2      	; 0x74e <Endpoint_Write_Control_Stream_LE+0x8a>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	80 91 e8 00 	lds	r24, 0x00E8
     752:	8e 77       	andi	r24, 0x7E	; 126
     754:	80 93 e8 00 	sts	0x00E8, r24
     758:	c8 cf       	rjmp	.-112    	; 0x6ea <Endpoint_Write_Control_Stream_LE+0x26>
     75a:	21 11       	cpse	r18, r1
     75c:	c9 cf       	rjmp	.-110    	; 0x6f0 <Endpoint_Write_Control_Stream_LE+0x2c>
     75e:	d6 cf       	rjmp	.-84     	; 0x70c <Endpoint_Write_Control_Stream_LE+0x48>
     760:	80 91 6e 01 	lds	r24, 0x016E
     764:	88 23       	and	r24, r24
     766:	29 f0       	breq	.+10     	; 0x772 <Endpoint_Write_Control_Stream_LE+0xae>
     768:	85 30       	cpi	r24, 0x05	; 5
     76a:	81 f6       	brne	.-96     	; 0x70c <Endpoint_Write_Control_Stream_LE+0x48>
     76c:	04 c0       	rjmp	.+8      	; 0x776 <Endpoint_Write_Control_Stream_LE+0xb2>
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	08 95       	ret
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	08 95       	ret
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	08 95       	ret

0000077a <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     77a:	20 91 75 01 	lds	r18, 0x0175
     77e:	30 91 76 01 	lds	r19, 0x0176
     782:	26 17       	cp	r18, r22
     784:	37 07       	cpc	r19, r23
     786:	48 f0       	brcs	.+18     	; 0x79a <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     788:	61 15       	cp	r22, r1
     78a:	71 05       	cpc	r23, r1
     78c:	39 f4       	brne	.+14     	; 0x79c <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     78e:	20 91 e8 00 	lds	r18, 0x00E8
     792:	2e 77       	andi	r18, 0x7E	; 126
     794:	20 93 e8 00 	sts	0x00E8, r18
     798:	01 c0       	rjmp	.+2      	; 0x79c <Endpoint_Write_Control_PStream_LE+0x22>
     79a:	b9 01       	movw	r22, r18
     79c:	fc 01       	movw	r30, r24
     79e:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7a0:	61 15       	cp	r22, r1
     7a2:	71 05       	cpc	r23, r1
     7a4:	c1 f1       	breq	.+112    	; 0x816 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7a6:	80 91 6e 01 	lds	r24, 0x016E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7aa:	88 23       	and	r24, r24
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <Endpoint_Write_Control_PStream_LE+0x36>
     7ae:	3f c0       	rjmp	.+126    	; 0x82e <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7b0:	85 30       	cpi	r24, 0x05	; 5
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <Endpoint_Write_Control_PStream_LE+0x3c>
     7b4:	3e c0       	rjmp	.+124    	; 0x832 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7b6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7ba:	83 fd       	sbrc	r24, 3
     7bc:	36 c0       	rjmp	.+108    	; 0x82a <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7be:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7c2:	82 ff       	sbrs	r24, 2
     7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <Endpoint_Write_Control_PStream_LE+0x58>
     7c6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     7ca:	82 ff       	sbrs	r24, 2
     7cc:	27 c0       	rjmp	.+78     	; 0x81c <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7d2:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     7d6:	80 ff       	sbrs	r24, 0
     7d8:	e3 cf       	rjmp	.-58     	; 0x7a0 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     7da:	20 91 f3 00 	lds	r18, 0x00F3
     7de:	80 91 f2 00 	lds	r24, 0x00F2
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7e6:	61 15       	cp	r22, r1
     7e8:	71 05       	cpc	r23, r1
     7ea:	59 f0       	breq	.+22     	; 0x802 <Endpoint_Write_Control_PStream_LE+0x88>
     7ec:	88 30       	cpi	r24, 0x08	; 8
     7ee:	91 05       	cpc	r25, r1
     7f0:	40 f4       	brcc	.+16     	; 0x802 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7f2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7f4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     7f8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     7fa:	61 50       	subi	r22, 0x01	; 1
     7fc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	f2 cf       	rjmp	.-28     	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     802:	21 e0       	ldi	r18, 0x01	; 1
     804:	08 97       	sbiw	r24, 0x08	; 8
     806:	09 f0       	breq	.+2      	; 0x80a <Endpoint_Write_Control_PStream_LE+0x90>
     808:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     80a:	80 91 e8 00 	lds	r24, 0x00E8
     80e:	8e 77       	andi	r24, 0x7E	; 126
     810:	80 93 e8 00 	sts	0x00E8, r24
     814:	c5 cf       	rjmp	.-118    	; 0x7a0 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     816:	21 11       	cpse	r18, r1
     818:	c6 cf       	rjmp	.-116    	; 0x7a6 <Endpoint_Write_Control_PStream_LE+0x2c>
     81a:	d5 cf       	rjmp	.-86     	; 0x7c6 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     81c:	80 91 6e 01 	lds	r24, 0x016E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     820:	88 23       	and	r24, r24
     822:	29 f0       	breq	.+10     	; 0x82e <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     824:	85 30       	cpi	r24, 0x05	; 5
     826:	79 f6       	brne	.-98     	; 0x7c6 <Endpoint_Write_Control_PStream_LE+0x4c>
     828:	04 c0       	rjmp	.+8      	; 0x832 <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     832:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     834:	08 95       	ret

00000836 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     836:	98 2f       	mov	r25, r24
     838:	97 30       	cpi	r25, 0x07	; 7
     83a:	58 f5       	brcc	.+86     	; 0x892 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     83c:	90 93 e9 00 	sts	0x00E9, r25
     840:	98 17       	cp	r25, r24
     842:	39 f0       	breq	.+14     	; 0x852 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     844:	70 91 ec 00 	lds	r23, 0x00EC
     848:	20 91 ed 00 	lds	r18, 0x00ED
     84c:	50 91 f0 00 	lds	r21, 0x00F0
     850:	03 c0       	rjmp	.+6      	; 0x858 <Endpoint_ConfigureEndpoint_Prv+0x22>
     852:	24 2f       	mov	r18, r20
     854:	76 2f       	mov	r23, r22
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	21 ff       	sbrs	r18, 1
     85a:	19 c0       	rjmp	.+50     	; 0x88e <Endpoint_ConfigureEndpoint_Prv+0x58>
     85c:	30 91 eb 00 	lds	r19, 0x00EB
     860:	3e 7f       	andi	r19, 0xFE	; 254
     862:	30 93 eb 00 	sts	0x00EB, r19
     866:	30 91 ed 00 	lds	r19, 0x00ED
     86a:	3d 7f       	andi	r19, 0xFD	; 253
     86c:	30 93 ed 00 	sts	0x00ED, r19
     870:	30 91 eb 00 	lds	r19, 0x00EB
     874:	31 60       	ori	r19, 0x01	; 1
     876:	30 93 eb 00 	sts	0x00EB, r19
     87a:	70 93 ec 00 	sts	0x00EC, r23
     87e:	20 93 ed 00 	sts	0x00ED, r18
     882:	50 93 f0 00 	sts	0x00F0, r21
     886:	20 91 ee 00 	lds	r18, 0x00EE
     88a:	27 ff       	sbrs	r18, 7
     88c:	07 c0       	rjmp	.+14     	; 0x89c <Endpoint_ConfigureEndpoint_Prv+0x66>
     88e:	9f 5f       	subi	r25, 0xFF	; 255
     890:	d3 cf       	rjmp	.-90     	; 0x838 <Endpoint_ConfigureEndpoint_Prv+0x2>
     892:	8f 70       	andi	r24, 0x0F	; 15
     894:	80 93 e9 00 	sts	0x00E9, r24
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	08 95       	ret
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	08 95       	ret

000008a0 <Endpoint_ConfigureEndpointTable>:
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	06 2f       	mov	r16, r22
     8aa:	ec 01       	movw	r28, r24
     8ac:	10 e0       	ldi	r17, 0x00	; 0
     8ae:	10 17       	cp	r17, r16
     8b0:	71 f1       	breq	.+92     	; 0x90e <Endpoint_ConfigureEndpointTable+0x6e>
     8b2:	98 81       	ld	r25, Y
     8b4:	99 23       	and	r25, r25
     8b6:	41 f1       	breq	.+80     	; 0x908 <Endpoint_ConfigureEndpointTable+0x68>
     8b8:	2c 81       	ldd	r18, Y+4	; 0x04
     8ba:	e9 81       	ldd	r30, Y+1	; 0x01
     8bc:	fa 81       	ldd	r31, Y+2	; 0x02
     8be:	7b 81       	ldd	r23, Y+3	; 0x03
     8c0:	89 2f       	mov	r24, r25
     8c2:	8f 70       	andi	r24, 0x0F	; 15
     8c4:	87 30       	cpi	r24, 0x07	; 7
     8c6:	10 f0       	brcs	.+4      	; 0x8cc <Endpoint_ConfigureEndpointTable+0x2c>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	22 c0       	rjmp	.+68     	; 0x910 <Endpoint_ConfigureEndpointTable+0x70>
     8cc:	22 30       	cpi	r18, 0x02	; 2
     8ce:	10 f0       	brcs	.+4      	; 0x8d4 <Endpoint_ConfigureEndpointTable+0x34>
     8d0:	56 e0       	ldi	r21, 0x06	; 6
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <Endpoint_ConfigureEndpointTable+0x36>
     8d4:	52 e0       	ldi	r21, 0x02	; 2
     8d6:	28 e0       	ldi	r18, 0x08	; 8
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	2e 17       	cp	r18, r30
     8de:	3f 07       	cpc	r19, r31
     8e0:	20 f4       	brcc	.+8      	; 0x8ea <Endpoint_ConfigureEndpointTable+0x4a>
     8e2:	4f 5f       	subi	r20, 0xFF	; 255
     8e4:	22 0f       	add	r18, r18
     8e6:	33 1f       	adc	r19, r19
     8e8:	f9 cf       	rjmp	.-14     	; 0x8dc <Endpoint_ConfigureEndpointTable+0x3c>
     8ea:	42 95       	swap	r20
     8ec:	40 7f       	andi	r20, 0xF0	; 240
     8ee:	45 2b       	or	r20, r21
     8f0:	69 2f       	mov	r22, r25
     8f2:	66 1f       	adc	r22, r22
     8f4:	66 27       	eor	r22, r22
     8f6:	66 1f       	adc	r22, r22
     8f8:	90 e4       	ldi	r25, 0x40	; 64
     8fa:	79 9f       	mul	r23, r25
     8fc:	90 01       	movw	r18, r0
     8fe:	11 24       	eor	r1, r1
     900:	62 2b       	or	r22, r18
     902:	99 df       	rcall	.-206    	; 0x836 <Endpoint_ConfigureEndpoint_Prv>
     904:	88 23       	and	r24, r24
     906:	01 f3       	breq	.-64     	; 0x8c8 <Endpoint_ConfigureEndpointTable+0x28>
     908:	1f 5f       	subi	r17, 0xFF	; 255
     90a:	25 96       	adiw	r28, 0x05	; 5
     90c:	d0 cf       	rjmp	.-96     	; 0x8ae <Endpoint_ConfigureEndpointTable+0xe>
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     91a:	80 91 6f 01 	lds	r24, 0x016F
     91e:	87 fd       	sbrc	r24, 7
     920:	05 c0       	rjmp	.+10     	; 0x92c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     922:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     926:	80 ff       	sbrs	r24, 0
     928:	0e c0       	rjmp	.+28     	; 0x946 <Endpoint_ClearStatusStage+0x2c>
     92a:	12 c0       	rjmp	.+36     	; 0x950 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     92c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     930:	82 fd       	sbrc	r24, 2
     932:	05 c0       	rjmp	.+10     	; 0x93e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     934:	80 91 6e 01 	lds	r24, 0x016E
     938:	81 11       	cpse	r24, r1
     93a:	f8 cf       	rjmp	.-16     	; 0x92c <Endpoint_ClearStatusStage+0x12>
     93c:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     93e:	80 91 e8 00 	lds	r24, 0x00E8
     942:	8b 77       	andi	r24, 0x7B	; 123
     944:	08 c0       	rjmp	.+16     	; 0x956 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     946:	80 91 6e 01 	lds	r24, 0x016E
     94a:	81 11       	cpse	r24, r1
     94c:	ea cf       	rjmp	.-44     	; 0x922 <Endpoint_ClearStatusStage+0x8>
     94e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     950:	80 91 e8 00 	lds	r24, 0x00E8
     954:	8e 77       	andi	r24, 0x7E	; 126
     956:	80 93 e8 00 	sts	0x00E8, r24
     95a:	08 95       	ret

0000095c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     95c:	80 91 e4 00 	lds	r24, 0x00E4
     960:	90 91 e5 00 	lds	r25, 0x00E5
     964:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     966:	20 91 ec 00 	lds	r18, 0x00EC
     96a:	20 ff       	sbrs	r18, 0
     96c:	21 c0       	rjmp	.+66     	; 0x9b0 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     96e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     972:	20 fd       	sbrc	r18, 0
     974:	21 c0       	rjmp	.+66     	; 0x9b8 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     976:	20 91 6e 01 	lds	r18, 0x016E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     97a:	22 23       	and	r18, r18
     97c:	89 f0       	breq	.+34     	; 0x9a0 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     97e:	25 30       	cpi	r18, 0x05	; 5
     980:	89 f0       	breq	.+34     	; 0x9a4 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     982:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     986:	25 fd       	sbrc	r18, 5
     988:	0f c0       	rjmp	.+30     	; 0x9a8 <Endpoint_WaitUntilReady+0x4c>
     98a:	20 91 e4 00 	lds	r18, 0x00E4
     98e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     992:	28 17       	cp	r18, r24
     994:	39 07       	cpc	r19, r25
     996:	39 f3       	breq	.-50     	; 0x966 <Endpoint_WaitUntilReady+0xa>
     998:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     99a:	41 f0       	breq	.+16     	; 0x9ac <Endpoint_WaitUntilReady+0x50>
     99c:	c9 01       	movw	r24, r18
     99e:	e3 cf       	rjmp	.-58     	; 0x966 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9b0:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     9b4:	22 ff       	sbrs	r18, 2
     9b6:	df cf       	rjmp	.-66     	; 0x976 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	08 95       	ret

000009bc <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     9c4:	4b d0       	rcall	.+150    	; 0xa5c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9c6:	52 d0       	rcall	.+164    	; 0xa6c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     9c8:	c8 ed       	ldi	r28, 0xD8	; 216
     9ca:	d0 e0       	ldi	r29, 0x00	; 0
     9cc:	88 81       	ld	r24, Y
     9ce:	8f 77       	andi	r24, 0x7F	; 127
     9d0:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     9d2:	88 81       	ld	r24, Y
     9d4:	80 68       	ori	r24, 0x80	; 128
     9d6:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9d8:	88 81       	ld	r24, Y
     9da:	8f 7d       	andi	r24, 0xDF	; 223
     9dc:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9de:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     9e0:	10 92 6e 01 	sts	0x016E, r1
	USB_Device_ConfigurationNumber  = 0;
     9e4:	10 92 6a 01 	sts	0x016A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     9e8:	10 92 6c 01 	sts	0x016C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     9ec:	10 92 6b 01 	sts	0x016B, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     9f0:	00 ee       	ldi	r16, 0xE0	; 224
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	f8 01       	movw	r30, r16
     9f6:	80 81       	ld	r24, Z
     9f8:	8b 7f       	andi	r24, 0xFB	; 251
     9fa:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     9fc:	88 81       	ld	r24, Y
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a02:	42 e0       	ldi	r20, 0x02	; 2
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	16 df       	rcall	.-468    	; 0x836 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a0a:	e1 ee       	ldi	r30, 0xE1	; 225
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	8e 7f       	andi	r24, 0xFE	; 254
     a12:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a14:	e2 ee       	ldi	r30, 0xE2	; 226
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	81 60       	ori	r24, 0x01	; 1
     a1c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a1e:	80 81       	ld	r24, Z
     a20:	88 60       	ori	r24, 0x08	; 8
     a22:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a24:	f8 01       	movw	r30, r16
     a26:	80 81       	ld	r24, Z
     a28:	8e 7f       	andi	r24, 0xFE	; 254
     a2a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a2c:	88 81       	ld	r24, Y
     a2e:	80 61       	ori	r24, 0x10	; 16
     a30:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	08 95       	ret

00000a3c <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     a3c:	e8 ed       	ldi	r30, 0xD8	; 216
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	8f 7e       	andi	r24, 0xEF	; 239
     a44:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     a46:	e7 ed       	ldi	r30, 0xD7	; 215
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	81 60       	ori	r24, 0x01	; 1
     a4e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     a50:	84 e0       	ldi	r24, 0x04	; 4
     a52:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	80 93 6d 01 	sts	0x016D, r24

	USB_ResetInterface();
     a5a:	b0 cf       	rjmp	.-160    	; 0x9bc <USB_ResetInterface>

00000a5c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     a5c:	e8 ed       	ldi	r30, 0xD8	; 216
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	8e 7f       	andi	r24, 0xFE	; 254
     a64:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a66:	10 92 e2 00 	sts	0x00E2, r1
     a6a:	08 95       	ret

00000a6c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     a6c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a70:	10 92 e1 00 	sts	0x00E1, r1
     a74:	08 95       	ret

00000a76 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	2f 93       	push	r18
     a82:	3f 93       	push	r19
     a84:	4f 93       	push	r20
     a86:	5f 93       	push	r21
     a88:	6f 93       	push	r22
     a8a:	7f 93       	push	r23
     a8c:	8f 93       	push	r24
     a8e:	9f 93       	push	r25
     a90:	af 93       	push	r26
     a92:	bf 93       	push	r27
     a94:	ef 93       	push	r30
     a96:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     a98:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     a9c:	82 ff       	sbrs	r24, 2
     a9e:	0a c0       	rjmp	.+20     	; 0xab4 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     aa0:	80 91 e2 00 	lds	r24, 0x00E2
     aa4:	82 ff       	sbrs	r24, 2
     aa6:	06 c0       	rjmp	.+12     	; 0xab4 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     aa8:	80 91 e1 00 	lds	r24, 0x00E1
     aac:	8b 7f       	andi	r24, 0xFB	; 251
     aae:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ab2:	2c d2       	rcall	.+1112   	; 0xf0c <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     ab4:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     ab8:	80 ff       	sbrs	r24, 0
     aba:	1d c0       	rjmp	.+58     	; 0xaf6 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     abc:	80 91 d8 00 	lds	r24, 0x00D8
     ac0:	80 ff       	sbrs	r24, 0
     ac2:	19 c0       	rjmp	.+50     	; 0xaf6 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     ac4:	80 91 da 00 	lds	r24, 0x00DA
     ac8:	8e 7f       	andi	r24, 0xFE	; 254
     aca:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     ace:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     ad2:	80 ff       	sbrs	r24, 0
     ad4:	0c c0       	rjmp	.+24     	; 0xaee <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ad6:	80 e1       	ldi	r24, 0x10	; 16
     ad8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ada:	82 e1       	ldi	r24, 0x12	; 18
     adc:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     ade:	09 b4       	in	r0, 0x29	; 41
     ae0:	00 fe       	sbrs	r0, 0
     ae2:	fd cf       	rjmp	.-6      	; 0xade <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 6e 01 	sts	0x016E, r24
			EVENT_USB_Device_Connect();
     aea:	c6 d2       	rcall	.+1420   	; 0x1078 <EVENT_USB_Device_Connect>
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     aee:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     af0:	10 92 6e 01 	sts	0x016E, r1
			EVENT_USB_Device_Disconnect();
     af4:	c3 d2       	rcall	.+1414   	; 0x107c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     af6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     afa:	80 ff       	sbrs	r24, 0
     afc:	18 c0       	rjmp	.+48     	; 0xb2e <__stack+0x2f>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     afe:	80 91 e2 00 	lds	r24, 0x00E2
     b02:	80 ff       	sbrs	r24, 0
     b04:	14 c0       	rjmp	.+40     	; 0xb2e <__stack+0x2f>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b06:	80 91 e2 00 	lds	r24, 0x00E2
     b0a:	8e 7f       	andi	r24, 0xFE	; 254
     b0c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b10:	80 91 e2 00 	lds	r24, 0x00E2
     b14:	80 61       	ori	r24, 0x10	; 16
     b16:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     b1a:	80 91 d8 00 	lds	r24, 0x00D8
     b1e:	80 62       	ori	r24, 0x20	; 32
     b20:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b24:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     b26:	85 e0       	ldi	r24, 0x05	; 5
     b28:	80 93 6e 01 	sts	0x016E, r24
		EVENT_USB_Device_Suspend();
     b2c:	ef d1       	rcall	.+990    	; 0xf0c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b2e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b32:	84 ff       	sbrs	r24, 4
     b34:	2f c0       	rjmp	.+94     	; 0xb94 <__stack+0x95>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b36:	80 91 e2 00 	lds	r24, 0x00E2
     b3a:	84 ff       	sbrs	r24, 4
     b3c:	2b c0       	rjmp	.+86     	; 0xb94 <__stack+0x95>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b3e:	80 e1       	ldi	r24, 0x10	; 16
     b40:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b42:	82 e1       	ldi	r24, 0x12	; 18
     b44:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b46:	09 b4       	in	r0, 0x29	; 41
     b48:	00 fe       	sbrs	r0, 0
     b4a:	fd cf       	rjmp	.-6      	; 0xb46 <__stack+0x47>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b4c:	80 91 d8 00 	lds	r24, 0x00D8
     b50:	8f 7d       	andi	r24, 0xDF	; 223
     b52:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     b56:	80 91 e1 00 	lds	r24, 0x00E1
     b5a:	8f 7e       	andi	r24, 0xEF	; 239
     b5c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     b60:	80 91 e2 00 	lds	r24, 0x00E2
     b64:	8f 7e       	andi	r24, 0xEF	; 239
     b66:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b6a:	80 91 e2 00 	lds	r24, 0x00E2
     b6e:	81 60       	ori	r24, 0x01	; 1
     b70:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b74:	80 91 6a 01 	lds	r24, 0x016A
     b78:	88 23       	and	r24, r24
     b7a:	11 f0       	breq	.+4      	; 0xb80 <__stack+0x81>
		  USB_DeviceState = DEVICE_STATE_Configured;
     b7c:	84 e0       	ldi	r24, 0x04	; 4
     b7e:	07 c0       	rjmp	.+14     	; 0xb8e <__stack+0x8f>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b80:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     b84:	87 ff       	sbrs	r24, 7
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <__stack+0x8d>
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <__stack+0x8f>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	80 93 6e 01 	sts	0x016E, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     b92:	bc d1       	rcall	.+888    	; 0xf0c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     b94:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b98:	83 ff       	sbrs	r24, 3
     b9a:	27 c0       	rjmp	.+78     	; 0xbea <__stack+0xeb>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     b9c:	80 91 e2 00 	lds	r24, 0x00E2
     ba0:	83 ff       	sbrs	r24, 3
     ba2:	23 c0       	rjmp	.+70     	; 0xbea <__stack+0xeb>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ba4:	80 91 e1 00 	lds	r24, 0x00E1
     ba8:	87 7f       	andi	r24, 0xF7	; 247
     baa:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	80 93 6e 01 	sts	0x016E, r24
		USB_Device_ConfigurationNumber = 0;
     bb4:	10 92 6a 01 	sts	0x016A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     bb8:	80 91 e1 00 	lds	r24, 0x00E1
     bbc:	8e 7f       	andi	r24, 0xFE	; 254
     bbe:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     bc2:	80 91 e2 00 	lds	r24, 0x00E2
     bc6:	8e 7f       	andi	r24, 0xFE	; 254
     bc8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     bcc:	80 91 e2 00 	lds	r24, 0x00E2
     bd0:	80 61       	ori	r24, 0x10	; 16
     bd2:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     bd6:	42 e0       	ldi	r20, 0x02	; 2
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	2c de       	rcall	.-936    	; 0x836 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     bde:	80 91 f0 00 	lds	r24, 0x00F0
     be2:	88 60       	ori	r24, 0x08	; 8
     be4:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     be8:	91 d1       	rcall	.+802    	; 0xf0c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     bea:	ff 91       	pop	r31
     bec:	ef 91       	pop	r30
     bee:	bf 91       	pop	r27
     bf0:	af 91       	pop	r26
     bf2:	9f 91       	pop	r25
     bf4:	8f 91       	pop	r24
     bf6:	7f 91       	pop	r23
     bf8:	6f 91       	pop	r22
     bfa:	5f 91       	pop	r21
     bfc:	4f 91       	pop	r20
     bfe:	3f 91       	pop	r19
     c00:	2f 91       	pop	r18
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	2f 93       	push	r18
     c18:	3f 93       	push	r19
     c1a:	4f 93       	push	r20
     c1c:	5f 93       	push	r21
     c1e:	6f 93       	push	r22
     c20:	7f 93       	push	r23
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	af 93       	push	r26
     c28:	bf 93       	push	r27
     c2a:	cf 93       	push	r28
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c30:	c0 91 e9 00 	lds	r28, 0x00E9
     c34:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c36:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c3a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     c3e:	80 91 f0 00 	lds	r24, 0x00F0
     c42:	87 7f       	andi	r24, 0xF7	; 247
     c44:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     c48:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     c4a:	1b d0       	rcall	.+54     	; 0xc82 <USB_Device_ProcessControlRequest>
     c4c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c50:	80 91 f0 00 	lds	r24, 0x00F0
     c54:	88 60       	ori	r24, 0x08	; 8
     c56:	80 93 f0 00 	sts	0x00F0, r24
     c5a:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	cf 91       	pop	r28
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	aa 97       	sbiw	r28, 0x2a	; 42
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	ef e6       	ldi	r30, 0x6F	; 111
     c9a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c9c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     ca0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     ca2:	21 e0       	ldi	r18, 0x01	; 1
     ca4:	e7 37       	cpi	r30, 0x77	; 119
     ca6:	f2 07       	cpc	r31, r18
     ca8:	c9 f7       	brne	.-14     	; 0xc9c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     caa:	f3 d1       	rcall	.+998    	; 0x1092 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cac:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     cb0:	83 ff       	sbrs	r24, 3
     cb2:	14 c1       	rjmp	.+552    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     cb4:	20 91 6f 01 	lds	r18, 0x016F

		switch (USB_ControlRequest.bRequest)
     cb8:	30 91 70 01 	lds	r19, 0x0170
     cbc:	83 2f       	mov	r24, r19
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	8a 30       	cpi	r24, 0x0A	; 10
     cc2:	91 05       	cpc	r25, r1
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <USB_Device_ProcessControlRequest+0x46>
     cc6:	0a c1       	rjmp	.+532    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
     cc8:	fc 01       	movw	r30, r24
     cca:	ea 5a       	subi	r30, 0xAA	; 170
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	e4 c1       	rjmp	.+968    	; 0x1098 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cd0:	20 38       	cpi	r18, 0x80	; 128
     cd2:	81 f0       	breq	.+32     	; 0xcf4 <USB_Device_ProcessControlRequest+0x72>
     cd4:	22 38       	cpi	r18, 0x82	; 130
     cd6:	09 f0       	breq	.+2      	; 0xcda <USB_Device_ProcessControlRequest+0x58>
     cd8:	01 c1       	rjmp	.+514    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cda:	80 91 73 01 	lds	r24, 0x0173
     cde:	8f 70       	andi	r24, 0x0F	; 15
     ce0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ce4:	80 91 eb 00 	lds	r24, 0x00EB
     ce8:	85 fb       	bst	r24, 5
     cea:	88 27       	eor	r24, r24
     cec:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cee:	10 92 e9 00 	sts	0x00E9, r1
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     cf4:	80 91 6b 01 	lds	r24, 0x016B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     cf8:	90 91 6c 01 	lds	r25, 0x016C
     cfc:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     cfe:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d00:	90 91 e8 00 	lds	r25, 0x00E8
     d04:	97 7f       	andi	r25, 0xF7	; 247
     d06:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     d0a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     d0e:	10 92 f1 00 	sts	0x00F1, r1
     d12:	c1 c0       	rjmp	.+386    	; 0xe96 <USB_Device_ProcessControlRequest+0x214>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d14:	82 2f       	mov	r24, r18
     d16:	8d 7f       	andi	r24, 0xFD	; 253
     d18:	09 f0       	breq	.+2      	; 0xd1c <USB_Device_ProcessControlRequest+0x9a>
     d1a:	e0 c0       	rjmp	.+448    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     d1c:	22 23       	and	r18, r18
     d1e:	19 f0       	breq	.+6      	; 0xd26 <USB_Device_ProcessControlRequest+0xa4>
     d20:	22 30       	cpi	r18, 0x02	; 2
     d22:	61 f0       	breq	.+24     	; 0xd3c <USB_Device_ProcessControlRequest+0xba>
     d24:	db c0       	rjmp	.+438    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     d26:	80 91 71 01 	lds	r24, 0x0171
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	09 f0       	breq	.+2      	; 0xd30 <USB_Device_ProcessControlRequest+0xae>
     d2e:	d6 c0       	rjmp	.+428    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     d30:	33 30       	cpi	r19, 0x03	; 3
     d32:	09 f0       	breq	.+2      	; 0xd36 <USB_Device_ProcessControlRequest+0xb4>
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	80 93 6c 01 	sts	0x016C, r24
     d3a:	28 c0       	rjmp	.+80     	; 0xd8c <USB_Device_ProcessControlRequest+0x10a>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     d3c:	80 91 71 01 	lds	r24, 0x0171
     d40:	81 11       	cpse	r24, r1
     d42:	24 c0       	rjmp	.+72     	; 0xd8c <USB_Device_ProcessControlRequest+0x10a>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     d44:	20 91 73 01 	lds	r18, 0x0173
     d48:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     d4a:	09 f4       	brne	.+2      	; 0xd4e <USB_Device_ProcessControlRequest+0xcc>
     d4c:	c7 c0       	rjmp	.+398    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d4e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     d52:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     d56:	80 ff       	sbrs	r24, 0
     d58:	19 c0       	rjmp	.+50     	; 0xd8c <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d5a:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     d5e:	33 30       	cpi	r19, 0x03	; 3
     d60:	11 f4       	brne	.+4      	; 0xd66 <USB_Device_ProcessControlRequest+0xe4>
     d62:	80 62       	ori	r24, 0x20	; 32
     d64:	11 c0       	rjmp	.+34     	; 0xd88 <USB_Device_ProcessControlRequest+0x106>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     d66:	80 61       	ori	r24, 0x10	; 16
     d68:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <USB_Device_ProcessControlRequest+0xf4>
     d74:	88 0f       	add	r24, r24
     d76:	0a 94       	dec	r0
     d78:	ea f7       	brpl	.-6      	; 0xd74 <USB_Device_ProcessControlRequest+0xf2>
     d7a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     d7e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     d82:	80 91 eb 00 	lds	r24, 0x00EB
     d86:	88 60       	ori	r24, 0x08	; 8
     d88:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d8c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d90:	80 91 e8 00 	lds	r24, 0x00E8
     d94:	87 7f       	andi	r24, 0xF7	; 247
     d96:	82 c0       	rjmp	.+260    	; 0xe9c <USB_Device_ProcessControlRequest+0x21a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d98:	21 11       	cpse	r18, r1
     d9a:	a0 c0       	rjmp	.+320    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     d9c:	10 91 71 01 	lds	r17, 0x0171
     da0:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     da2:	80 91 e3 00 	lds	r24, 0x00E3
     da6:	80 78       	andi	r24, 0x80	; 128
     da8:	81 2b       	or	r24, r17
     daa:	80 93 e3 00 	sts	0x00E3, r24
     dae:	80 91 e8 00 	lds	r24, 0x00E8
     db2:	87 7f       	andi	r24, 0xF7	; 247
     db4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     db8:	b0 dd       	rcall	.-1184   	; 0x91a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dba:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     dbe:	80 ff       	sbrs	r24, 0
     dc0:	fc cf       	rjmp	.-8      	; 0xdba <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     dc2:	80 91 e3 00 	lds	r24, 0x00E3
     dc6:	80 68       	ori	r24, 0x80	; 128
     dc8:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     dcc:	11 23       	and	r17, r17
     dce:	11 f0       	breq	.+4      	; 0xdd4 <USB_Device_ProcessControlRequest+0x152>
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <USB_Device_ProcessControlRequest+0x154>
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	80 93 6e 01 	sts	0x016E, r24
     dda:	80 c0       	rjmp	.+256    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ddc:	20 58       	subi	r18, 0x80	; 128
     dde:	22 30       	cpi	r18, 0x02	; 2
     de0:	08 f0       	brcs	.+2      	; 0xde4 <USB_Device_ProcessControlRequest+0x162>
     de2:	7c c0       	rjmp	.+248    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     de4:	80 91 71 01 	lds	r24, 0x0171
     de8:	90 91 72 01 	lds	r25, 0x0172
     dec:	8c 3d       	cpi	r24, 0xDC	; 220
     dee:	23 e0       	ldi	r18, 0x03	; 3
     df0:	92 07       	cpc	r25, r18
     df2:	71 f5       	brne	.+92     	; 0xe50 <USB_Device_ProcessControlRequest+0x1ce>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     df8:	8a e2       	ldi	r24, 0x2A	; 42
     dfa:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     dfc:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     dfe:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     e00:	de 01       	movw	r26, r28
     e02:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e04:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     e06:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e08:	51 e2       	ldi	r21, 0x21	; 33
     e0a:	e3 2f       	mov	r30, r19
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	50 93 57 00 	sts	0x0057, r21
     e12:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     e14:	20 ff       	sbrs	r18, 0
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <USB_Device_ProcessControlRequest+0x19c>
					{
						SerialByte >>= 4;
     e18:	e2 95       	swap	r30
     e1a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     e1c:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     e1e:	ef 70       	andi	r30, 0x0F	; 15
     e20:	8e 2f       	mov	r24, r30
     e22:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     e24:	ea 30       	cpi	r30, 0x0A	; 10
     e26:	10 f0       	brcs	.+4      	; 0xe2c <USB_Device_ProcessControlRequest+0x1aa>
     e28:	c7 96       	adiw	r24, 0x37	; 55
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <USB_Device_ProcessControlRequest+0x1ac>
     e2c:	c0 96       	adiw	r24, 0x30	; 48
     e2e:	8d 93       	st	X+, r24
     e30:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	24 31       	cpi	r18, 0x14	; 20
     e36:	49 f7       	brne	.-46     	; 0xe0a <USB_Device_ProcessControlRequest+0x188>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e38:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e3a:	80 91 e8 00 	lds	r24, 0x00E8
     e3e:	87 7f       	andi	r24, 0xF7	; 247
     e40:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     e44:	6a e2       	ldi	r22, 0x2A	; 42
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	ce 01       	movw	r24, r28
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	3b dc       	rcall	.-1930   	; 0x6c4 <Endpoint_Write_Control_Stream_LE>
     e4e:	12 c0       	rjmp	.+36     	; 0xe74 <USB_Device_ProcessControlRequest+0x1f2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     e50:	ae 01       	movw	r20, r28
     e52:	4f 5f       	subi	r20, 0xFF	; 255
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	60 91 73 01 	lds	r22, 0x0173
     e5a:	95 d9       	rcall	.-3286   	; 0x186 <CALLBACK_USB_GetDescriptor>
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	09 f4       	brne	.+2      	; 0xe62 <USB_Device_ProcessControlRequest+0x1e0>
     e60:	3d c0       	rjmp	.+122    	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
     e62:	20 91 e8 00 	lds	r18, 0x00E8
     e66:	27 7f       	andi	r18, 0xF7	; 247
     e68:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     e6c:	bc 01       	movw	r22, r24
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	83 dc       	rcall	.-1786   	; 0x77a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e74:	80 91 e8 00 	lds	r24, 0x00E8
     e78:	8b 77       	andi	r24, 0x7B	; 123
     e7a:	80 93 e8 00 	sts	0x00E8, r24
     e7e:	2e c0       	rjmp	.+92     	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     e80:	20 38       	cpi	r18, 0x80	; 128
     e82:	61 f5       	brne	.+88     	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e84:	80 91 e8 00 	lds	r24, 0x00E8
     e88:	87 7f       	andi	r24, 0xF7	; 247
     e8a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     e8e:	80 91 6a 01 	lds	r24, 0x016A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e92:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e96:	80 91 e8 00 	lds	r24, 0x00E8
     e9a:	8e 77       	andi	r24, 0x7E	; 126
     e9c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     ea0:	3c dd       	rcall	.-1416   	; 0x91a <Endpoint_ClearStatusStage>
     ea2:	1c c0       	rjmp	.+56     	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ea4:	21 11       	cpse	r18, r1
     ea6:	1a c0       	rjmp	.+52     	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     ea8:	90 91 71 01 	lds	r25, 0x0171
     eac:	92 30       	cpi	r25, 0x02	; 2
     eae:	b0 f4       	brcc	.+44     	; 0xedc <USB_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eb0:	80 91 e8 00 	lds	r24, 0x00E8
     eb4:	87 7f       	andi	r24, 0xF7	; 247
     eb6:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     eba:	90 93 6a 01 	sts	0x016A, r25

	Endpoint_ClearStatusStage();
     ebe:	2d dd       	rcall	.-1446   	; 0x91a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     ec0:	80 91 6a 01 	lds	r24, 0x016A
     ec4:	81 11       	cpse	r24, r1
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <USB_Device_ProcessControlRequest+0x24e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ec8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ecc:	87 ff       	sbrs	r24, 7
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <USB_Device_ProcessControlRequest+0x252>
     ed0:	84 e0       	ldi	r24, 0x04	; 4
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <USB_Device_ProcessControlRequest+0x254>
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 93 6e 01 	sts	0x016E, r24

	EVENT_USB_Device_ConfigurationChanged();
     eda:	d2 d0       	rcall	.+420    	; 0x1080 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     edc:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     ee0:	83 ff       	sbrs	r24, 3
     ee2:	0a c0       	rjmp	.+20     	; 0xef8 <USB_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ee4:	80 91 e8 00 	lds	r24, 0x00E8
     ee8:	87 7f       	andi	r24, 0xF7	; 247
     eea:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     eee:	80 91 eb 00 	lds	r24, 0x00EB
     ef2:	80 62       	ori	r24, 0x20	; 32
     ef4:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     ef8:	aa 96       	adiw	r28, 0x2a	; 42
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	08 95       	ret

00000f0c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     f0c:	08 95       	ret

00000f0e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     f0e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     f10:	80 91 6e 01 	lds	r24, 0x016E
     f14:	88 23       	and	r24, r24
     f16:	a9 f0       	breq	.+42     	; 0xf42 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f18:	80 91 e9 00 	lds	r24, 0x00E9
     f1c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f1e:	90 91 ec 00 	lds	r25, 0x00EC
     f22:	90 ff       	sbrs	r25, 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <USB_USBTask+0x1c>
     f26:	90 e8       	ldi	r25, 0x80	; 128
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <USB_USBTask+0x1e>
     f2a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f2c:	c9 2f       	mov	r28, r25
     f2e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f30:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f34:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     f38:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     f3a:	a3 de       	rcall	.-698    	; 0xc82 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f3c:	cf 70       	andi	r28, 0x0F	; 15
     f3e:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <LEDs_SetAllLEDs>:
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     f46:	25 b1       	in	r18, 0x05	; 5
     f48:	98 2f       	mov	r25, r24
     f4a:	91 70       	andi	r25, 0x01	; 1
     f4c:	90 95       	com	r25
     f4e:	21 60       	ori	r18, 0x01	; 1
     f50:	92 23       	and	r25, r18
     f52:	95 b9       	out	0x05, r25	; 5
     f54:	2b b1       	in	r18, 0x0b	; 11
     f56:	98 2f       	mov	r25, r24
     f58:	90 72       	andi	r25, 0x20	; 32
     f5a:	90 95       	com	r25
     f5c:	20 62       	ori	r18, 0x20	; 32
     f5e:	92 23       	and	r25, r18
     f60:	9b b9       	out	0x0b, r25	; 11
     f62:	98 b1       	in	r25, 0x08	; 8
     f64:	80 78       	andi	r24, 0x80	; 128
     f66:	9f 77       	andi	r25, 0x7F	; 127
     f68:	89 2b       	or	r24, r25
     f6a:	88 b9       	out	0x08, r24	; 8
     f6c:	08 95       	ret

00000f6e <SetupHardware>:
     f6e:	84 b7       	in	r24, 0x34	; 52
     f70:	87 7f       	andi	r24, 0xF7	; 247
     f72:	84 bf       	out	0x34, r24	; 52
     f74:	88 e1       	ldi	r24, 0x18	; 24
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	80 93 60 00 	sts	0x0060, r24
     f7e:	10 92 60 00 	sts	0x0060, r1
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	80 e8       	ldi	r24, 0x80	; 128
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	80 93 61 00 	sts	0x0061, r24
     f90:	90 93 61 00 	sts	0x0061, r25
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	20 9a       	sbi	0x04, 0	; 4
     f98:	28 9a       	sbi	0x05, 0	; 5
     f9a:	55 9a       	sbi	0x0a, 5	; 10
     f9c:	5d 9a       	sbi	0x0b, 5	; 11
     f9e:	3f 9a       	sbi	0x07, 7	; 7
     fa0:	47 98       	cbi	0x08, 7	; 8
     fa2:	4c dd       	rcall	.-1384   	; 0xa3c <USB_Init>
     fa4:	8b d9       	rcall	.-3306   	; 0x2bc <lcd_init>
     fa6:	2f ef       	ldi	r18, 0xFF	; 255
     fa8:	81 ee       	ldi	r24, 0xE1	; 225
     faa:	94 e0       	ldi	r25, 0x04	; 4
     fac:	21 50       	subi	r18, 0x01	; 1
     fae:	80 40       	sbci	r24, 0x00	; 0
     fb0:	90 40       	sbci	r25, 0x00	; 0
     fb2:	e1 f7       	brne	.-8      	; 0xfac <SetupHardware+0x3e>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <SetupHardware+0x48>
     fb6:	00 00       	nop
     fb8:	72 d9       	rcall	.-3356   	; 0x29e <lcd_clrscr>
     fba:	8b e1       	ldi	r24, 0x1B	; 27
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	73 d9       	rcall	.-3354   	; 0x2a6 <lcd_puts>
     fc0:	3e 9a       	sbi	0x07, 6	; 7
     fc2:	46 9a       	sbi	0x08, 6	; 8
     fc4:	08 95       	ret

00000fc6 <Read_DualSlope>:
		}
	
	// Turns on the specified pins and off the remainder
	static inline void PINs_SetAll(const uint8_t PINMask)
			{
				PORTD = ((PORTD |  PINS_PortD) & ~(PINMask & PINS_PortD));
     fc6:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fc8:	2f ef       	ldi	r18, 0xFF	; 255
     fca:	87 ee       	ldi	r24, 0xE7	; 231
     fcc:	93 e0       	ldi	r25, 0x03	; 3
     fce:	21 50       	subi	r18, 0x01	; 1
     fd0:	80 40       	sbci	r24, 0x00	; 0
     fd2:	90 40       	sbci	r25, 0x00	; 0
     fd4:	e1 f7       	brne	.-8      	; 0xfce <Read_DualSlope+0x8>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <Read_DualSlope+0x12>
     fd8:	00 00       	nop
     fda:	58 9a       	sbi	0x0b, 0	; 11
	PINs_SetAll(PINS_In_Switch); 
	_delay_ms(t1); // wait 80mS
	//Step2
	PINs_SetAll(PINS_In_Switch); // integrate and wait for zero crossing
	//Step3
	result = 128; 
     fdc:	80 e8       	ldi	r24, 0x80	; 128
     fde:	80 93 77 01 	sts	0x0177, r24
	return result;
	
	//Step4
	//Step5
	
}
     fe2:	08 95       	ret

00000fe4 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	27 97       	sbiw	r28, 0x07	; 7
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     ff8:	ba df       	rcall	.-140    	; 0xf6e <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     ffa:	6c e5       	ldi	r22, 0x5C	; 92
     ffc:	71 e0       	ldi	r23, 0x01	; 1
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	9c da       	rcall	.-2760   	; 0x53c <CDC_Device_CreateStream>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	9f df       	rcall	.-194    	; 0xf46 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1008:	78 94       	sei
	GlobalInterruptEnable();
	fputs("Welcome to Our Dual Slope Controller! \r\n", &USBSerialStream);
    100a:	6c e5       	ldi	r22, 0x5C	; 92
    100c:	71 e0       	ldi	r23, 0x01	; 1
    100e:	88 e2       	ldi	r24, 0x28	; 40
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	75 d0       	rcall	.+234    	; 0x10fe <fputs>
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
    1014:	dd 24       	eor	r13, r13
    1016:	d3 94       	inc	r13
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
    1018:	80 e2       	ldi	r24, 0x20	; 32
    101a:	e8 2e       	mov	r14, r24
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
    101c:	90 e8       	ldi	r25, 0x80	; 128
    101e:	f9 2e       	mov	r15, r25
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
    1020:	d3 b8       	out	0x03, r13	; 3
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
    1022:	e9 b8       	out	0x09, r14	; 9
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
    1024:	f6 b8       	out	0x06, r15	; 6
	uint16_t time; 
	for (;;)
	{
		//CheckJoystickMovement();
		LEDs_ToggleLEDs(LEDS_LED1|LEDS_LED2|LEDS_LED3);
		time++;
    1026:	0f 5f       	subi	r16, 0xFF	; 255
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	2f ef       	ldi	r18, 0xFF	; 255
    102c:	83 ed       	ldi	r24, 0xD3	; 211
    102e:	90 e3       	ldi	r25, 0x30	; 48
    1030:	21 50       	subi	r18, 0x01	; 1
    1032:	80 40       	sbci	r24, 0x00	; 0
    1034:	90 40       	sbci	r25, 0x00	; 0
    1036:	e1 f7       	brne	.-8      	; 0x1030 <main+0x4c>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <main+0x56>
    103a:	00 00       	nop
		_delay_ms(1000);
		lcd_clrscr();
    103c:	30 d9       	rcall	.-3488   	; 0x29e <lcd_clrscr>
		lcd_puts("Hi ");
    103e:	81 e5       	ldi	r24, 0x51	; 81
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	31 d9       	rcall	.-3486   	; 0x2a6 <lcd_puts>
		char buffer[7];
		itoa(time,buffer,10);
    1044:	4a e0       	ldi	r20, 0x0A	; 10
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	be 01       	movw	r22, r28
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	c8 01       	movw	r24, r16
    1050:	29 d0       	rcall	.+82     	; 0x10a4 <itoa>
		lcd_puts(buffer);
    1052:	ce 01       	movw	r24, r28
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	27 d9       	rcall	.-3506   	; 0x2a6 <lcd_puts>
		result = Read_DualSlope();
    1058:	b6 df       	rcall	.-148    	; 0xfc6 <Read_DualSlope>
    105a:	80 93 77 01 	sts	0x0177, r24
		float result1 = result * 4.6875; // convert result to mV
		//fputs(result1, &USBSerialStream);
		fputs("mV \r\n", &USBSerialStream);
    105e:	6c e5       	ldi	r22, 0x5C	; 92
    1060:	71 e0       	ldi	r23, 0x01	; 1
    1062:	85 e5       	ldi	r24, 0x55	; 85
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	4b d0       	rcall	.+150    	; 0x10fe <fputs>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	29 da       	rcall	.-2990   	; 0x4c0 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	10 da       	rcall	.-3040   	; 0x494 <CDC_Device_USBTask>
		USB_USBTask();
    1074:	4c df       	rcall	.-360    	; 0xf0e <USB_USBTask>
    1076:	d4 cf       	rjmp	.-88     	; 0x1020 <main+0x3c>

00001078 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
    1078:	80 ea       	ldi	r24, 0xA0	; 160
    107a:	65 cf       	rjmp	.-310    	; 0xf46 <LEDs_SetAllLEDs>

0000107c <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	63 cf       	rjmp	.-314    	; 0xf46 <LEDs_SetAllLEDs>

00001080 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	7d d9       	rcall	.-3334   	; 0x380 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    1086:	88 23       	and	r24, r24
    1088:	11 f0       	breq	.+4      	; 0x108e <EVENT_USB_Device_ConfigurationChanged+0xe>
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <EVENT_USB_Device_ConfigurationChanged+0x10>
    108e:	81 e8       	ldi	r24, 0x81	; 129
    1090:	5a cf       	rjmp	.-332    	; 0xf46 <LEDs_SetAllLEDs>

00001092 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	66 ca       	rjmp	.-2868   	; 0x564 <CDC_Device_ProcessControlRequest>

00001098 <__tablejump2__>:
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31

0000109c <__tablejump__>:
    109c:	05 90       	lpm	r0, Z+
    109e:	f4 91       	lpm	r31, Z
    10a0:	e0 2d       	mov	r30, r0
    10a2:	09 94       	ijmp

000010a4 <itoa>:
    10a4:	45 32       	cpi	r20, 0x25	; 37
    10a6:	51 05       	cpc	r21, r1
    10a8:	18 f4       	brcc	.+6      	; 0x10b0 <itoa+0xc>
    10aa:	42 30       	cpi	r20, 0x02	; 2
    10ac:	08 f0       	brcs	.+2      	; 0x10b0 <itoa+0xc>
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <__itoa_ncheck>
    10b0:	fb 01       	movw	r30, r22
    10b2:	10 82       	st	Z, r1
    10b4:	cb 01       	movw	r24, r22
    10b6:	08 95       	ret

000010b8 <__itoa_ncheck>:
    10b8:	bb 27       	eor	r27, r27
    10ba:	4a 30       	cpi	r20, 0x0A	; 10
    10bc:	31 f4       	brne	.+12     	; 0x10ca <__itoa_ncheck+0x12>
    10be:	99 23       	and	r25, r25
    10c0:	22 f4       	brpl	.+8      	; 0x10ca <__itoa_ncheck+0x12>
    10c2:	bd e2       	ldi	r27, 0x2D	; 45
    10c4:	90 95       	com	r25
    10c6:	81 95       	neg	r24
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <__utoa_common>

000010cc <__utoa_ncheck>:
    10cc:	bb 27       	eor	r27, r27

000010ce <__utoa_common>:
    10ce:	fb 01       	movw	r30, r22
    10d0:	55 27       	eor	r21, r21
    10d2:	aa 27       	eor	r26, r26
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	aa 1f       	adc	r26, r26
    10da:	a4 17       	cp	r26, r20
    10dc:	10 f0       	brcs	.+4      	; 0x10e2 <__utoa_common+0x14>
    10de:	a4 1b       	sub	r26, r20
    10e0:	83 95       	inc	r24
    10e2:	50 51       	subi	r21, 0x10	; 16
    10e4:	b9 f7       	brne	.-18     	; 0x10d4 <__utoa_common+0x6>
    10e6:	a0 5d       	subi	r26, 0xD0	; 208
    10e8:	aa 33       	cpi	r26, 0x3A	; 58
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <__utoa_common+0x20>
    10ec:	a9 5d       	subi	r26, 0xD9	; 217
    10ee:	a1 93       	st	Z+, r26
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	79 f7       	brne	.-34     	; 0x10d2 <__utoa_common+0x4>
    10f4:	b1 11       	cpse	r27, r1
    10f6:	b1 93       	st	Z+, r27
    10f8:	11 92       	st	Z+, r1
    10fa:	cb 01       	movw	r24, r22
    10fc:	28 c0       	rjmp	.+80     	; 0x114e <strrev>

000010fe <fputs>:
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	8b 01       	movw	r16, r22
    110c:	db 01       	movw	r26, r22
    110e:	13 96       	adiw	r26, 0x03	; 3
    1110:	2c 91       	ld	r18, X
    1112:	21 ff       	sbrs	r18, 1
    1114:	16 c0       	rjmp	.+44     	; 0x1142 <fputs+0x44>
    1116:	ec 01       	movw	r28, r24
    1118:	e1 2c       	mov	r14, r1
    111a:	f1 2c       	mov	r15, r1
    111c:	89 91       	ld	r24, Y+
    111e:	88 23       	and	r24, r24
    1120:	71 f0       	breq	.+28     	; 0x113e <fputs+0x40>
    1122:	d8 01       	movw	r26, r16
    1124:	18 96       	adiw	r26, 0x08	; 8
    1126:	ed 91       	ld	r30, X+
    1128:	fc 91       	ld	r31, X
    112a:	19 97       	sbiw	r26, 0x09	; 9
    112c:	b8 01       	movw	r22, r16
    112e:	09 95       	icall
    1130:	89 2b       	or	r24, r25
    1132:	a1 f3       	breq	.-24     	; 0x111c <fputs+0x1e>
    1134:	ee 24       	eor	r14, r14
    1136:	ea 94       	dec	r14
    1138:	ff 24       	eor	r15, r15
    113a:	fa 94       	dec	r15
    113c:	ef cf       	rjmp	.-34     	; 0x111c <fputs+0x1e>
    113e:	c7 01       	movw	r24, r14
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <fputs+0x48>
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	9f ef       	ldi	r25, 0xFF	; 255
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	e6 e0       	ldi	r30, 0x06	; 6
    114c:	1c c0       	rjmp	.+56     	; 0x1186 <__epilogue_restores__+0x18>

0000114e <strrev>:
    114e:	dc 01       	movw	r26, r24
    1150:	fc 01       	movw	r30, r24
    1152:	67 2f       	mov	r22, r23
    1154:	71 91       	ld	r23, Z+
    1156:	77 23       	and	r23, r23
    1158:	e1 f7       	brne	.-8      	; 0x1152 <strrev+0x4>
    115a:	32 97       	sbiw	r30, 0x02	; 2
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <strrev+0x18>
    115e:	7c 91       	ld	r23, X
    1160:	6d 93       	st	X+, r22
    1162:	70 83       	st	Z, r23
    1164:	62 91       	ld	r22, -Z
    1166:	ae 17       	cp	r26, r30
    1168:	bf 07       	cpc	r27, r31
    116a:	c8 f3       	brcs	.-14     	; 0x115e <strrev+0x10>
    116c:	08 95       	ret

0000116e <__epilogue_restores__>:
    116e:	2a 88       	ldd	r2, Y+18	; 0x12
    1170:	39 88       	ldd	r3, Y+17	; 0x11
    1172:	48 88       	ldd	r4, Y+16	; 0x10
    1174:	5f 84       	ldd	r5, Y+15	; 0x0f
    1176:	6e 84       	ldd	r6, Y+14	; 0x0e
    1178:	7d 84       	ldd	r7, Y+13	; 0x0d
    117a:	8c 84       	ldd	r8, Y+12	; 0x0c
    117c:	9b 84       	ldd	r9, Y+11	; 0x0b
    117e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1180:	b9 84       	ldd	r11, Y+9	; 0x09
    1182:	c8 84       	ldd	r12, Y+8	; 0x08
    1184:	df 80       	ldd	r13, Y+7	; 0x07
    1186:	ee 80       	ldd	r14, Y+6	; 0x06
    1188:	fd 80       	ldd	r15, Y+5	; 0x05
    118a:	0c 81       	ldd	r16, Y+4	; 0x04
    118c:	1b 81       	ldd	r17, Y+3	; 0x03
    118e:	aa 81       	ldd	r26, Y+2	; 0x02
    1190:	b9 81       	ldd	r27, Y+1	; 0x01
    1192:	ce 0f       	add	r28, r30
    1194:	d1 1d       	adc	r29, r1
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	ed 01       	movw	r28, r26
    11a2:	08 95       	ret

000011a4 <_exit>:
    11a4:	f8 94       	cli

000011a6 <__stop_program>:
    11a6:	ff cf       	rjmp	.-2      	; 0x11a6 <__stop_program>
