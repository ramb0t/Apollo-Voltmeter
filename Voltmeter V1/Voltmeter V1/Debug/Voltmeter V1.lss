
Voltmeter V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00001af4  00001b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  0080015e  0080015e  00001be6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001be6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007a0  00000000  00000000  00001c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b333  00000000  00000000  000023e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002ff3  00000000  00000000  0000d715  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00014a26  00000000  00000000  00010708  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000115c  00000000  00000000  00025130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001b79a  00000000  00000000  0002628c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006b20  00000000  00000000  00041a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007f0  00000000  00000000  00048546  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b63f  00000000  00000000  00048d36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a5 c0       	rjmp	.+330    	; 0x14c <__ctors_end>
       2:	00 00       	nop
       4:	c0 c0       	rjmp	.+384    	; 0x186 <__bad_interrupt>
       6:	00 00       	nop
       8:	be c0       	rjmp	.+380    	; 0x186 <__bad_interrupt>
       a:	00 00       	nop
       c:	bc c0       	rjmp	.+376    	; 0x186 <__bad_interrupt>
       e:	00 00       	nop
      10:	ba c0       	rjmp	.+372    	; 0x186 <__bad_interrupt>
      12:	00 00       	nop
      14:	b8 c0       	rjmp	.+368    	; 0x186 <__bad_interrupt>
      16:	00 00       	nop
      18:	b6 c0       	rjmp	.+364    	; 0x186 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b4 c0       	rjmp	.+360    	; 0x186 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b2 c0       	rjmp	.+356    	; 0x186 <__bad_interrupt>
      22:	00 00       	nop
      24:	b0 c0       	rjmp	.+352    	; 0x186 <__bad_interrupt>
      26:	00 00       	nop
      28:	ac c5       	rjmp	.+2904   	; 0xb82 <__vector_10>
      2a:	00 00       	nop
      2c:	75 c6       	rjmp	.+3306   	; 0xd18 <__vector_11>
      2e:	00 00       	nop
      30:	aa c0       	rjmp	.+340    	; 0x186 <__bad_interrupt>
      32:	00 00       	nop
      34:	a8 c0       	rjmp	.+336    	; 0x186 <__bad_interrupt>
      36:	00 00       	nop
      38:	a6 c0       	rjmp	.+332    	; 0x186 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a4 c0       	rjmp	.+328    	; 0x186 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a2 c0       	rjmp	.+324    	; 0x186 <__bad_interrupt>
      42:	00 00       	nop
      44:	a0 c0       	rjmp	.+320    	; 0x186 <__bad_interrupt>
      46:	00 00       	nop
      48:	9e c0       	rjmp	.+316    	; 0x186 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9c c0       	rjmp	.+312    	; 0x186 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9a c0       	rjmp	.+308    	; 0x186 <__bad_interrupt>
      52:	00 00       	nop
      54:	98 c0       	rjmp	.+304    	; 0x186 <__bad_interrupt>
      56:	00 00       	nop
      58:	96 c0       	rjmp	.+300    	; 0x186 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	94 c0       	rjmp	.+296    	; 0x186 <__bad_interrupt>
      5e:	00 00       	nop
      60:	92 c0       	rjmp	.+292    	; 0x186 <__bad_interrupt>
      62:	00 00       	nop
      64:	90 c1       	rjmp	.+800    	; 0x386 <__vector_25>
      66:	00 00       	nop
      68:	b9 c1       	rjmp	.+882    	; 0x3dc <__vector_26>
      6a:	00 00       	nop
      6c:	8c c0       	rjmp	.+280    	; 0x186 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8a c0       	rjmp	.+276    	; 0x186 <__bad_interrupt>
      72:	00 00       	nop
      74:	88 c0       	rjmp	.+272    	; 0x186 <__bad_interrupt>
      76:	00 00       	nop
      78:	86 c0       	rjmp	.+268    	; 0x186 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	84 c0       	rjmp	.+264    	; 0x186 <__bad_interrupt>
      7e:	00 00       	nop
      80:	82 c0       	rjmp	.+260    	; 0x186 <__bad_interrupt>
      82:	00 00       	nop
      84:	80 c0       	rjmp	.+256    	; 0x186 <__bad_interrupt>
      86:	00 00       	nop
      88:	7e c0       	rjmp	.+252    	; 0x186 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7c c0       	rjmp	.+248    	; 0x186 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7a c0       	rjmp	.+244    	; 0x186 <__bad_interrupt>
      92:	00 00       	nop
      94:	78 c0       	rjmp	.+240    	; 0x186 <__bad_interrupt>
      96:	00 00       	nop
      98:	76 c0       	rjmp	.+236    	; 0x186 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	74 c0       	rjmp	.+232    	; 0x186 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	72 c0       	rjmp	.+228    	; 0x186 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	70 c0       	rjmp	.+224    	; 0x186 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6e c0       	rjmp	.+220    	; 0x186 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ee 06       	cpc	r14, r30
      ae:	10 07       	cpc	r17, r16
      b0:	f4 07       	cpc	r31, r20
      b2:	10 07       	cpc	r17, r16
      b4:	f4 07       	cpc	r31, r20
      b6:	52 07       	cpc	r21, r18
      b8:	74 07       	cpc	r23, r20
      ba:	f4 07       	cpc	r31, r20
      bc:	c6 07       	cpc	r28, r22
      be:	d8 07       	cpc	r29, r24

000000c0 <ProductString>:
      c0:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      d0:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000de <ManufacturerString>:
      de:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ee:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f8 <LanguageString>:
      f8:	04 03 09 04                                         ....

000000fc <ConfigurationDescriptor>:
      fc:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     10c:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     11c:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     12c:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000013a <DeviceDescriptor>:
     13a:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     14a:	dc 01                                               ..

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	da e0       	ldi	r29, 0x0A	; 10
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	e4 ef       	ldi	r30, 0xF4	; 244
     160:	fa e1       	ldi	r31, 0x1A	; 26
     162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x10>
     164:	05 90       	lpm	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	ae 35       	cpi	r26, 0x5E	; 94
     16a:	b1 07       	cpc	r27, r17
     16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0xc>

0000016e <__do_clear_bss>:
     16e:	21 e0       	ldi	r18, 0x01	; 1
     170:	ae e5       	ldi	r26, 0x5E	; 94
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	af 3b       	cpi	r26, 0xBF	; 191
     17a:	b2 07       	cpc	r27, r18
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
     17e:	0e 94 c7 08 	call	0x118e	; 0x118e <main>
     182:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <_exit>

00000186 <__bad_interrupt>:
     186:	3c cf       	rjmp	.-392    	; 0x0 <__vectors>

00000188 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     188:	29 2f       	mov	r18, r25
     18a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     18c:	22 30       	cpi	r18, 0x02	; 2
     18e:	31 05       	cpc	r19, r1
     190:	59 f0       	breq	.+22     	; 0x1a8 <CALLBACK_USB_GetDescriptor+0x20>
     192:	23 30       	cpi	r18, 0x03	; 3
     194:	31 05       	cpc	r19, r1
     196:	69 f0       	breq	.+26     	; 0x1b2 <CALLBACK_USB_GetDescriptor+0x2a>
     198:	21 30       	cpi	r18, 0x01	; 1
     19a:	31 05       	cpc	r19, r1
     19c:	f9 f4       	brne	.+62     	; 0x1dc <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     19e:	82 e1       	ldi	r24, 0x12	; 18
     1a0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1a2:	2a e3       	ldi	r18, 0x3A	; 58
     1a4:	31 e0       	ldi	r19, 0x01	; 1
     1a6:	1e c0       	rjmp	.+60     	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1a8:	8e e3       	ldi	r24, 0x3E	; 62
     1aa:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1ac:	2c ef       	ldi	r18, 0xFC	; 252
     1ae:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1b0:	19 c0       	rjmp	.+50     	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x5c>
     1b2:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	91 05       	cpc	r25, r1
     1b8:	41 f0       	breq	.+16     	; 0x1ca <CALLBACK_USB_GetDescriptor+0x42>
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	91 05       	cpc	r25, r1
     1be:	41 f0       	breq	.+16     	; 0x1d0 <CALLBACK_USB_GetDescriptor+0x48>
     1c0:	89 2b       	or	r24, r25
     1c2:	61 f4       	brne	.+24     	; 0x1dc <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1c4:	e8 ef       	ldi	r30, 0xF8	; 248
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1ca:	ee ed       	ldi	r30, 0xDE	; 222
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1d0:	e0 ec       	ldi	r30, 0xC0	; 192
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	84 91       	lpm	r24, Z
     1d6:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1d8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1e4:	fa 01       	movw	r30, r20
     1e6:	31 83       	std	Z+1, r19	; 0x01
     1e8:	20 83       	st	Z, r18
	return Size;
}
     1ea:	08 95       	ret

000001ec <lcd_e_port_low>:
  {
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
      lcd_putc(c);
  }
     1ec:	76 98       	cbi	0x0e, 6	; 14
     1ee:	08 95       	ret

000001f0 <lcd_e_port_high>:
     1f0:	76 9a       	sbi	0x0e, 6	; 14
     1f2:	08 95       	ret

000001f4 <lcd_write>:
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	c8 2f       	mov	r28, r24
     1fa:	d6 2f       	mov	r29, r22
     1fc:	66 23       	and	r22, r22
     1fe:	11 f0       	breq	.+4      	; 0x204 <lcd_write+0x10>
     200:	5e 9a       	sbi	0x0b, 6	; 11
     202:	01 c0       	rjmp	.+2      	; 0x206 <lcd_write+0x12>
     204:	5e 98       	cbi	0x0b, 6	; 11
     206:	c7 ff       	sbrs	r28, 7
     208:	02 c0       	rjmp	.+4      	; 0x20e <lcd_write+0x1a>
     20a:	2c 9a       	sbi	0x05, 4	; 5
     20c:	01 c0       	rjmp	.+2      	; 0x210 <lcd_write+0x1c>
     20e:	2c 98       	cbi	0x05, 4	; 5
     210:	c6 ff       	sbrs	r28, 6
     212:	02 c0       	rjmp	.+4      	; 0x218 <lcd_write+0x24>
     214:	2d 9a       	sbi	0x05, 5	; 5
     216:	01 c0       	rjmp	.+2      	; 0x21a <lcd_write+0x26>
     218:	2d 98       	cbi	0x05, 5	; 5
     21a:	c5 ff       	sbrs	r28, 5
     21c:	02 c0       	rjmp	.+4      	; 0x222 <lcd_write+0x2e>
     21e:	2e 9a       	sbi	0x05, 6	; 5
     220:	01 c0       	rjmp	.+2      	; 0x224 <lcd_write+0x30>
     222:	2e 98       	cbi	0x05, 6	; 5
     224:	c4 ff       	sbrs	r28, 4
     226:	02 c0       	rjmp	.+4      	; 0x22c <lcd_write+0x38>
     228:	2f 9a       	sbi	0x05, 7	; 5
     22a:	01 c0       	rjmp	.+2      	; 0x22e <lcd_write+0x3a>
     22c:	2f 98       	cbi	0x05, 7	; 5
     22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_write+0x3c>
     230:	df df       	rcall	.-66     	; 0x1f0 <lcd_e_port_high>
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	8a 95       	dec	r24
     236:	f1 f7       	brne	.-4      	; 0x234 <lcd_write+0x40>
     238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_write+0x46>
     23a:	d8 df       	rcall	.-80     	; 0x1ec <lcd_e_port_low>
     23c:	c3 ff       	sbrs	r28, 3
     23e:	02 c0       	rjmp	.+4      	; 0x244 <lcd_write+0x50>
     240:	2c 9a       	sbi	0x05, 4	; 5
     242:	01 c0       	rjmp	.+2      	; 0x246 <lcd_write+0x52>
     244:	2c 98       	cbi	0x05, 4	; 5
     246:	c2 ff       	sbrs	r28, 2
     248:	02 c0       	rjmp	.+4      	; 0x24e <lcd_write+0x5a>
     24a:	2d 9a       	sbi	0x05, 5	; 5
     24c:	01 c0       	rjmp	.+2      	; 0x250 <lcd_write+0x5c>
     24e:	2d 98       	cbi	0x05, 5	; 5
     250:	c1 ff       	sbrs	r28, 1
     252:	02 c0       	rjmp	.+4      	; 0x258 <lcd_write+0x64>
     254:	2e 9a       	sbi	0x05, 6	; 5
     256:	01 c0       	rjmp	.+2      	; 0x25a <lcd_write+0x66>
     258:	2e 98       	cbi	0x05, 6	; 5
     25a:	c0 ff       	sbrs	r28, 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <lcd_write+0x6e>
     25e:	2f 9a       	sbi	0x05, 7	; 5
     260:	01 c0       	rjmp	.+2      	; 0x264 <lcd_write+0x70>
     262:	2f 98       	cbi	0x05, 7	; 5
     264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_write+0x72>
     266:	c4 df       	rcall	.-120    	; 0x1f0 <lcd_e_port_high>
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	9a 95       	dec	r25
     26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_write+0x76>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_write+0x7c>
     270:	bd df       	rcall	.-134    	; 0x1ec <lcd_e_port_low>
     272:	2c 9a       	sbi	0x05, 4	; 5
     274:	2d 9a       	sbi	0x05, 5	; 5
     276:	2e 9a       	sbi	0x05, 6	; 5
     278:	2f 9a       	sbi	0x05, 7	; 5
     27a:	d1 11       	cpse	r29, r1
     27c:	08 c0       	rjmp	.+16     	; 0x28e <lcd_write+0x9a>
     27e:	c4 30       	cpi	r28, 0x04	; 4
     280:	30 f4       	brcc	.+12     	; 0x28e <lcd_write+0x9a>
     282:	8f e9       	ldi	r24, 0x9F	; 159
     284:	99 e1       	ldi	r25, 0x19	; 25
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <lcd_write+0x92>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd_write+0x98>
     28c:	03 c0       	rjmp	.+6      	; 0x294 <lcd_write+0xa0>
     28e:	95 ed       	ldi	r25, 0xD5	; 213
     290:	9a 95       	dec	r25
     292:	f1 f7       	brne	.-4      	; 0x290 <lcd_write+0x9c>
     294:	00 00       	nop
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <lcd_command>:
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	aa cf       	rjmp	.-172    	; 0x1f4 <lcd_write>

000002a0 <lcd_goto>:
     2a0:	80 58       	subi	r24, 0x80	; 128
     2a2:	fc cf       	rjmp	.-8      	; 0x29c <lcd_command>

000002a4 <lcd_clrscr>:
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <lcd_command>

000002a8 <lcd_putc>:
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	a4 cf       	rjmp	.-184    	; 0x1f4 <lcd_write>

000002ac <lcd_puts>:
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
     2b2:	89 91       	ld	r24, Y+
     2b4:	88 23       	and	r24, r24
     2b6:	11 f0       	breq	.+4      	; 0x2bc <lcd_puts+0x10>
     2b8:	f7 df       	rcall	.-18     	; 0x2a8 <lcd_putc>
     2ba:	fb cf       	rjmp	.-10     	; 0x2b2 <lcd_puts+0x6>
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
     2c2:	6e 9a       	sbi	0x0d, 6	; 13
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
     2c4:	56 9a       	sbi	0x0a, 6	; 10
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
     2c6:	24 9a       	sbi	0x04, 4	; 4
    lcd_db6_ddr_high();
     2c8:	25 9a       	sbi	0x04, 5	; 4
    lcd_db5_ddr_high();
     2ca:	26 9a       	sbi	0x04, 6	; 4
    lcd_db4_ddr_high();
     2cc:	27 9a       	sbi	0x04, 7	; 4
      lcd_db1_ddr_high();
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
     2ce:	8e df       	rcall	.-228    	; 0x1ec <lcd_e_port_low>
    lcd_rs_port_low();
     2d0:	5e 98       	cbi	0x0b, 6	; 11
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
     2d2:	2c 9a       	sbi	0x05, 4	; 5
    lcd_db6_port_high();
     2d4:	2d 9a       	sbi	0x05, 5	; 5
    lcd_db5_port_high();
     2d6:	2e 9a       	sbi	0x05, 6	; 5
    lcd_db4_port_high();
     2d8:	2f 9a       	sbi	0x05, 7	; 5
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
     2da:	8f e5       	ldi	r24, 0x5F	; 95
     2dc:	9a ee       	ldi	r25, 0xEA	; 234
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <lcd_init+0x1c>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <lcd_init+0x22>
     2e4:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
     2e6:	2c 98       	cbi	0x05, 4	; 5
    lcd_db6_port_low();
     2e8:	2d 98       	cbi	0x05, 5	; 5
    Delay_ns(100);
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcd_init+0x2a>
    lcd_e_port_high();
     2ec:	81 df       	rcall	.-254    	; 0x1f0 <lcd_e_port_high>
    Delay_ns(500);
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	9a 95       	dec	r25
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lcd_init+0x2e>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <lcd_init+0x34>
    lcd_e_port_low();
     2f6:	7a df       	rcall	.-268    	; 0x1ec <lcd_e_port_low>

    Delay_us(4100);
     2f8:	8f e0       	ldi	r24, 0x0F	; 15
     2fa:	90 e4       	ldi	r25, 0x40	; 64
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <lcd_init+0x3a>
     300:	00 c0       	rjmp	.+0      	; 0x302 <lcd_init+0x40>
     302:	00 00       	nop

    lcd_e_port_high();
     304:	75 df       	rcall	.-278    	; 0x1f0 <lcd_e_port_high>
    Delay_ns(500);
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	9a 95       	dec	r25
     30a:	f1 f7       	brne	.-4      	; 0x308 <lcd_init+0x46>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <lcd_init+0x4c>
    lcd_e_port_low();
     30e:	6e df       	rcall	.-292    	; 0x1ec <lcd_e_port_low>

    Delay_us(100);
     310:	8f e8       	ldi	r24, 0x8F	; 143
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <lcd_init+0x52>
     318:	00 c0       	rjmp	.+0      	; 0x31a <lcd_init+0x58>
     31a:	00 00       	nop

    lcd_e_port_high();
     31c:	69 df       	rcall	.-302    	; 0x1f0 <lcd_e_port_high>
    Delay_ns(500);
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	9a 95       	dec	r25
     322:	f1 f7       	brne	.-4      	; 0x320 <lcd_init+0x5e>
     324:	00 c0       	rjmp	.+0      	; 0x326 <lcd_init+0x64>
    lcd_e_port_low();
     326:	62 df       	rcall	.-316    	; 0x1ec <lcd_e_port_low>

    Delay_us(40);
     328:	85 ed       	ldi	r24, 0xD5	; 213
     32a:	8a 95       	dec	r24
     32c:	f1 f7       	brne	.-4      	; 0x32a <lcd_init+0x68>
     32e:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
     330:	2f 98       	cbi	0x05, 7	; 5
      Delay_ns(100);
     332:	00 c0       	rjmp	.+0      	; 0x334 <lcd_init+0x72>
      lcd_e_port_high();
     334:	5d df       	rcall	.-326    	; 0x1f0 <lcd_e_port_high>
      Delay_ns(500);
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	9a 95       	dec	r25
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_init+0x76>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_init+0x7c>
      lcd_e_port_low();
     33e:	56 df       	rcall	.-340    	; 0x1ec <lcd_e_port_low>
      Delay_us(40);
     340:	85 ed       	ldi	r24, 0xD5	; 213
     342:	8a 95       	dec	r24
     344:	f1 f7       	brne	.-4      	; 0x342 <lcd_init+0x80>
     346:	00 00       	nop

      lcd_db4_port_low();
     348:	2f 98       	cbi	0x05, 7	; 5
      Delay_ns(100);
     34a:	00 c0       	rjmp	.+0      	; 0x34c <lcd_init+0x8a>
      lcd_e_port_high();
     34c:	51 df       	rcall	.-350    	; 0x1f0 <lcd_e_port_high>
      Delay_ns(500);
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	9a 95       	dec	r25
     352:	f1 f7       	brne	.-4      	; 0x350 <lcd_init+0x8e>
     354:	00 c0       	rjmp	.+0      	; 0x356 <lcd_init+0x94>
      lcd_e_port_low();
     356:	4a df       	rcall	.-364    	; 0x1ec <lcd_e_port_low>
      Delay_ns(500);
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	8a 95       	dec	r24
     35c:	f1 f7       	brne	.-4      	; 0x35a <lcd_init+0x98>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <lcd_init+0x9e>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
     360:	2c 9a       	sbi	0x05, 4	; 5
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
     362:	00 c0       	rjmp	.+0      	; 0x364 <lcd_init+0xa2>
      lcd_e_port_high();
     364:	45 df       	rcall	.-374    	; 0x1f0 <lcd_e_port_high>
      Delay_ns(500);
     366:	92 e0       	ldi	r25, 0x02	; 2
     368:	9a 95       	dec	r25
     36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_init+0xa6>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd_init+0xac>
      lcd_e_port_low();
     36e:	3e df       	rcall	.-388    	; 0x1ec <lcd_e_port_low>
      Delay_us(40);
     370:	85 ed       	ldi	r24, 0xD5	; 213
     372:	8a 95       	dec	r24
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_init+0xb0>
     376:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	90 df       	rcall	.-224    	; 0x29c <lcd_command>

    //Display Clear
    lcd_clrscr();
     37c:	93 df       	rcall	.-218    	; 0x2a4 <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
     37e:	86 e0       	ldi	r24, 0x06	; 6
     380:	8d df       	rcall	.-230    	; 0x29c <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
     382:	8c e0       	ldi	r24, 0x0C	; 12
     384:	8b cf       	rjmp	.-234    	; 0x29c <lcd_command>

00000386 <__vector_25>:
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    
    return (UART1_LastRxError << 8) + data;

}/* uart1_getc */
     386:	1f 92       	push	r1
     388:	0f 92       	push	r0
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	0f 92       	push	r0
     38e:	11 24       	eor	r1, r1
     390:	2f 93       	push	r18
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	ef 93       	push	r30
     398:	ff 93       	push	r31
     39a:	80 91 c8 00 	lds	r24, 0x00C8
     39e:	90 91 ce 00 	lds	r25, 0x00CE
     3a2:	88 71       	andi	r24, 0x18	; 24
     3a4:	e0 91 60 01 	lds	r30, 0x0160
     3a8:	ef 5f       	subi	r30, 0xFF	; 255
     3aa:	ef 71       	andi	r30, 0x1F	; 31
     3ac:	20 91 5f 01 	lds	r18, 0x015F
     3b0:	e2 17       	cp	r30, r18
     3b2:	39 f0       	breq	.+14     	; 0x3c2 <__vector_25+0x3c>
     3b4:	e0 93 60 01 	sts	0x0160, r30
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	ed 59       	subi	r30, 0x9D	; 157
     3bc:	fe 4f       	sbci	r31, 0xFE	; 254
     3be:	90 83       	st	Z, r25
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <__vector_25+0x3e>
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	80 93 5e 01 	sts	0x015E, r24
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	9f 91       	pop	r25
     3ce:	8f 91       	pop	r24
     3d0:	2f 91       	pop	r18
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <__vector_26>:
     3dc:	1f 92       	push	r1
     3de:	0f 92       	push	r0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
     3ea:	ef 93       	push	r30
     3ec:	ff 93       	push	r31
     3ee:	90 91 62 01 	lds	r25, 0x0162
     3f2:	80 91 61 01 	lds	r24, 0x0161
     3f6:	98 17       	cp	r25, r24
     3f8:	69 f0       	breq	.+26     	; 0x414 <__vector_26+0x38>
     3fa:	e0 91 61 01 	lds	r30, 0x0161
     3fe:	ef 5f       	subi	r30, 0xFF	; 255
     400:	ef 71       	andi	r30, 0x1F	; 31
     402:	e0 93 61 01 	sts	0x0161, r30
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	ed 57       	subi	r30, 0x7D	; 125
     40a:	fe 4f       	sbci	r31, 0xFE	; 254
     40c:	80 81       	ld	r24, Z
     40e:	80 93 ce 00 	sts	0x00CE, r24
     412:	05 c0       	rjmp	.+10     	; 0x41e <__vector_26+0x42>
     414:	80 91 c9 00 	lds	r24, 0x00C9
     418:	8f 7d       	andi	r24, 0xDF	; 223
     41a:	80 93 c9 00 	sts	0x00C9, r24
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <uart1_init>:
     430:	10 92 62 01 	sts	0x0162, r1
     434:	10 92 61 01 	sts	0x0161, r1
     438:	10 92 60 01 	sts	0x0160, r1
     43c:	10 92 5f 01 	sts	0x015F, r1
     440:	97 ff       	sbrs	r25, 7
     442:	04 c0       	rjmp	.+8      	; 0x44c <uart1_init+0x1c>
     444:	22 e0       	ldi	r18, 0x02	; 2
     446:	20 93 c8 00 	sts	0x00C8, r18
     44a:	9f 77       	andi	r25, 0x7F	; 127
     44c:	90 93 cd 00 	sts	0x00CD, r25
     450:	80 93 cc 00 	sts	0x00CC, r24
     454:	88 e9       	ldi	r24, 0x98	; 152
     456:	80 93 c9 00 	sts	0x00C9, r24
     45a:	86 e0       	ldi	r24, 0x06	; 6
     45c:	80 93 ca 00 	sts	0x00CA, r24
     460:	08 95       	ret

00000462 <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
     462:	90 91 62 01 	lds	r25, 0x0162
     466:	9f 5f       	subi	r25, 0xFF	; 255
     468:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
     46a:	20 91 61 01 	lds	r18, 0x0161
     46e:	92 17       	cp	r25, r18
     470:	e1 f3       	breq	.-8      	; 0x46a <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
     472:	e9 2f       	mov	r30, r25
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	ed 57       	subi	r30, 0x7D	; 125
     478:	fe 4f       	sbci	r31, 0xFE	; 254
     47a:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
     47c:	90 93 62 01 	sts	0x0162, r25

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
     480:	80 91 c9 00 	lds	r24, 0x00C9
     484:	80 62       	ori	r24, 0x20	; 32
     486:	80 93 c9 00 	sts	0x00C9, r24
     48a:	08 95       	ret

0000048c <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ec 01       	movw	r28, r24
     492:	fc 01       	movw	r30, r24
     494:	70 96       	adiw	r30, 0x10	; 16
     496:	8b e0       	ldi	r24, 0x0B	; 11
     498:	df 01       	movw	r26, r30
     49a:	1d 92       	st	X+, r1
     49c:	8a 95       	dec	r24
     49e:	e9 f7       	brne	.-6      	; 0x49a <CDC_Device_ConfigureEndpoints+0xe>
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	8c 83       	std	Y+4, r24	; 0x04
     4a4:	89 87       	std	Y+9, r24	; 0x09
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	8e 87       	std	Y+14, r24	; 0x0e
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	7d d2       	rcall	.+1274   	; 0x9ac <Endpoint_ConfigureEndpointTable>
     4b2:	88 23       	and	r24, r24
     4b4:	61 f0       	breq	.+24     	; 0x4ce <CDC_Device_ConfigureEndpoints+0x42>
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	ce 01       	movw	r24, r28
     4ba:	06 96       	adiw	r24, 0x06	; 6
     4bc:	77 d2       	rcall	.+1262   	; 0x9ac <Endpoint_ConfigureEndpointTable>
     4be:	88 23       	and	r24, r24
     4c0:	31 f0       	breq	.+12     	; 0x4ce <CDC_Device_ConfigureEndpoints+0x42>
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	ce 01       	movw	r24, r28
     4c6:	0b 96       	adiw	r24, 0x0b	; 11
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	6f c2       	rjmp	.+1246   	; 0x9ac <Endpoint_ConfigureEndpointTable>
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <CDC_Device_SendByte>:
     4d6:	cf 93       	push	r28
     4d8:	c6 2f       	mov	r28, r22
     4da:	20 91 b5 01 	lds	r18, 0x01B5
     4de:	24 30       	cpi	r18, 0x04	; 4
     4e0:	f1 f4       	brne	.+60     	; 0x51e <CDC_Device_SendByte+0x48>
     4e2:	fc 01       	movw	r30, r24
     4e4:	44 89       	ldd	r20, Z+20	; 0x14
     4e6:	55 89       	ldd	r21, Z+21	; 0x15
     4e8:	66 89       	ldd	r22, Z+22	; 0x16
     4ea:	77 89       	ldd	r23, Z+23	; 0x17
     4ec:	45 2b       	or	r20, r21
     4ee:	46 2b       	or	r20, r22
     4f0:	47 2b       	or	r20, r23
     4f2:	a9 f0       	breq	.+42     	; 0x51e <CDC_Device_SendByte+0x48>
     4f4:	81 81       	ldd	r24, Z+1	; 0x01
     4f6:	8f 70       	andi	r24, 0x0F	; 15
     4f8:	80 93 e9 00 	sts	0x00E9, r24
     4fc:	80 91 e8 00 	lds	r24, 0x00E8
     500:	85 ff       	sbrs	r24, 5
     502:	04 c0       	rjmp	.+8      	; 0x50c <CDC_Device_SendByte+0x36>
     504:	c0 93 f1 00 	sts	0x00F1, r28
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0a c0       	rjmp	.+20     	; 0x520 <CDC_Device_SendByte+0x4a>
     50c:	80 91 e8 00 	lds	r24, 0x00E8
     510:	8e 77       	andi	r24, 0x7E	; 126
     512:	80 93 e8 00 	sts	0x00E8, r24
     516:	a8 d2       	rcall	.+1360   	; 0xa68 <Endpoint_WaitUntilReady>
     518:	88 23       	and	r24, r24
     51a:	a1 f3       	breq	.-24     	; 0x504 <CDC_Device_SendByte+0x2e>
     51c:	01 c0       	rjmp	.+2      	; 0x520 <CDC_Device_SendByte+0x4a>
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <CDC_Device_putchar>:
     524:	fb 01       	movw	r30, r22
     526:	68 2f       	mov	r22, r24
     528:	84 85       	ldd	r24, Z+12	; 0x0c
     52a:	95 85       	ldd	r25, Z+13	; 0x0d
     52c:	d4 df       	rcall	.-88     	; 0x4d6 <CDC_Device_SendByte>
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	81 11       	cpse	r24, r1
     534:	02 c0       	rjmp	.+4      	; 0x53a <CDC_Device_putchar+0x16>
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	88 27       	eor	r24, r24
     53c:	99 27       	eor	r25, r25
     53e:	82 1b       	sub	r24, r18
     540:	93 0b       	sbc	r25, r19
     542:	08 95       	ret

00000544 <CDC_Device_Flush>:
     544:	20 91 b5 01 	lds	r18, 0x01B5
     548:	24 30       	cpi	r18, 0x04	; 4
     54a:	41 f5       	brne	.+80     	; 0x59c <CDC_Device_Flush+0x58>
     54c:	fc 01       	movw	r30, r24
     54e:	44 89       	ldd	r20, Z+20	; 0x14
     550:	55 89       	ldd	r21, Z+21	; 0x15
     552:	66 89       	ldd	r22, Z+22	; 0x16
     554:	77 89       	ldd	r23, Z+23	; 0x17
     556:	45 2b       	or	r20, r21
     558:	46 2b       	or	r20, r22
     55a:	47 2b       	or	r20, r23
     55c:	f9 f0       	breq	.+62     	; 0x59c <CDC_Device_Flush+0x58>
     55e:	81 81       	ldd	r24, Z+1	; 0x01
     560:	8f 70       	andi	r24, 0x0F	; 15
     562:	80 93 e9 00 	sts	0x00E9, r24
     566:	20 91 f3 00 	lds	r18, 0x00F3
     56a:	80 91 f2 00 	lds	r24, 0x00F2
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	92 2b       	or	r25, r18
     572:	89 2b       	or	r24, r25
     574:	89 f0       	breq	.+34     	; 0x598 <CDC_Device_Flush+0x54>
     576:	90 91 e8 00 	lds	r25, 0x00E8
     57a:	80 91 e8 00 	lds	r24, 0x00E8
     57e:	8e 77       	andi	r24, 0x7E	; 126
     580:	80 93 e8 00 	sts	0x00E8, r24
     584:	95 fd       	sbrc	r25, 5
     586:	08 c0       	rjmp	.+16     	; 0x598 <CDC_Device_Flush+0x54>
     588:	6f d2       	rcall	.+1246   	; 0xa68 <Endpoint_WaitUntilReady>
     58a:	81 11       	cpse	r24, r1
     58c:	08 c0       	rjmp	.+16     	; 0x59e <CDC_Device_Flush+0x5a>
     58e:	80 91 e8 00 	lds	r24, 0x00E8
     592:	8e 77       	andi	r24, 0x7E	; 126
     594:	80 93 e8 00 	sts	0x00E8, r24
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	08 95       	ret
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	08 95       	ret

000005a0 <CDC_Device_USBTask>:
     5a0:	20 91 b5 01 	lds	r18, 0x01B5
     5a4:	24 30       	cpi	r18, 0x04	; 4
     5a6:	89 f4       	brne	.+34     	; 0x5ca <CDC_Device_USBTask+0x2a>
     5a8:	fc 01       	movw	r30, r24
     5aa:	44 89       	ldd	r20, Z+20	; 0x14
     5ac:	55 89       	ldd	r21, Z+21	; 0x15
     5ae:	66 89       	ldd	r22, Z+22	; 0x16
     5b0:	77 89       	ldd	r23, Z+23	; 0x17
     5b2:	45 2b       	or	r20, r21
     5b4:	46 2b       	or	r20, r22
     5b6:	47 2b       	or	r20, r23
     5b8:	41 f0       	breq	.+16     	; 0x5ca <CDC_Device_USBTask+0x2a>
     5ba:	21 81       	ldd	r18, Z+1	; 0x01
     5bc:	2f 70       	andi	r18, 0x0F	; 15
     5be:	20 93 e9 00 	sts	0x00E9, r18
     5c2:	20 91 e8 00 	lds	r18, 0x00E8
     5c6:	20 fd       	sbrc	r18, 0
     5c8:	bd cf       	rjmp	.-134    	; 0x544 <CDC_Device_Flush>
     5ca:	08 95       	ret

000005cc <CDC_Device_ReceiveByte>:
     5cc:	20 91 b5 01 	lds	r18, 0x01B5
     5d0:	24 30       	cpi	r18, 0x04	; 4
     5d2:	19 f0       	breq	.+6      	; 0x5da <CDC_Device_ReceiveByte+0xe>
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	9f ef       	ldi	r25, 0xFF	; 255
     5d8:	08 95       	ret
     5da:	fc 01       	movw	r30, r24
     5dc:	44 89       	ldd	r20, Z+20	; 0x14
     5de:	55 89       	ldd	r21, Z+21	; 0x15
     5e0:	66 89       	ldd	r22, Z+22	; 0x16
     5e2:	77 89       	ldd	r23, Z+23	; 0x17
     5e4:	45 2b       	or	r20, r21
     5e6:	46 2b       	or	r20, r22
     5e8:	47 2b       	or	r20, r23
     5ea:	a1 f3       	breq	.-24     	; 0x5d4 <CDC_Device_ReceiveByte+0x8>
     5ec:	86 81       	ldd	r24, Z+6	; 0x06
     5ee:	8f 70       	andi	r24, 0x0F	; 15
     5f0:	80 93 e9 00 	sts	0x00E9, r24
     5f4:	80 91 e8 00 	lds	r24, 0x00E8
     5f8:	82 ff       	sbrs	r24, 2
     5fa:	ec cf       	rjmp	.-40     	; 0x5d4 <CDC_Device_ReceiveByte+0x8>
     5fc:	20 91 f3 00 	lds	r18, 0x00F3
     600:	80 91 f2 00 	lds	r24, 0x00F2
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	92 2b       	or	r25, r18
     608:	89 2b       	or	r24, r25
     60a:	21 f0       	breq	.+8      	; 0x614 <CDC_Device_ReceiveByte+0x48>
     60c:	20 91 f1 00 	lds	r18, 0x00F1
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	02 c0       	rjmp	.+4      	; 0x618 <CDC_Device_ReceiveByte+0x4c>
     614:	2f ef       	ldi	r18, 0xFF	; 255
     616:	3f ef       	ldi	r19, 0xFF	; 255
     618:	40 91 f3 00 	lds	r20, 0x00F3
     61c:	80 91 f2 00 	lds	r24, 0x00F2
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	94 2b       	or	r25, r20
     624:	89 2b       	or	r24, r25
     626:	29 f4       	brne	.+10     	; 0x632 <CDC_Device_ReceiveByte+0x66>
     628:	80 91 e8 00 	lds	r24, 0x00E8
     62c:	8b 77       	andi	r24, 0x7B	; 123
     62e:	80 93 e8 00 	sts	0x00E8, r24
     632:	c9 01       	movw	r24, r18
     634:	08 95       	ret

00000636 <CDC_Device_getchar>:
     636:	fc 01       	movw	r30, r24
     638:	84 85       	ldd	r24, Z+12	; 0x0c
     63a:	95 85       	ldd	r25, Z+13	; 0x0d
     63c:	c7 df       	rcall	.-114    	; 0x5cc <CDC_Device_ReceiveByte>
     63e:	97 ff       	sbrs	r25, 7
     640:	02 c0       	rjmp	.+4      	; 0x646 <CDC_Device_getchar+0x10>
     642:	8e ef       	ldi	r24, 0xFE	; 254
     644:	9f ef       	ldi	r25, 0xFF	; 255
     646:	08 95       	ret

00000648 <CDC_Device_CreateStream>:
     648:	fb 01       	movw	r30, r22
     64a:	2e e0       	ldi	r18, 0x0E	; 14
     64c:	db 01       	movw	r26, r22
     64e:	1d 92       	st	X+, r1
     650:	2a 95       	dec	r18
     652:	e9 f7       	brne	.-6      	; 0x64e <CDC_Device_CreateStream+0x6>
     654:	23 e0       	ldi	r18, 0x03	; 3
     656:	23 83       	std	Z+3, r18	; 0x03
     658:	22 e9       	ldi	r18, 0x92	; 146
     65a:	32 e0       	ldi	r19, 0x02	; 2
     65c:	31 87       	std	Z+9, r19	; 0x09
     65e:	20 87       	std	Z+8, r18	; 0x08
     660:	2b e1       	ldi	r18, 0x1B	; 27
     662:	33 e0       	ldi	r19, 0x03	; 3
     664:	33 87       	std	Z+11, r19	; 0x0b
     666:	22 87       	std	Z+10, r18	; 0x0a
     668:	95 87       	std	Z+13, r25	; 0x0d
     66a:	84 87       	std	Z+12, r24	; 0x0c
     66c:	08 95       	ret

0000066e <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     66e:	08 95       	ret

00000670 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     676:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     67a:	83 ff       	sbrs	r24, 3
     67c:	a6 c0       	rjmp	.+332    	; 0x7ca <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     67e:	88 81       	ld	r24, Y
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	20 91 ba 01 	lds	r18, 0x01BA
     686:	30 91 bb 01 	lds	r19, 0x01BB
     68a:	28 17       	cp	r18, r24
     68c:	39 07       	cpc	r19, r25
     68e:	09 f0       	breq	.+2      	; 0x692 <CDC_Device_ProcessControlRequest+0x22>
     690:	9c c0       	rjmp	.+312    	; 0x7ca <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     692:	80 91 b7 01 	lds	r24, 0x01B7
     696:	81 32       	cpi	r24, 0x21	; 33
     698:	61 f0       	breq	.+24     	; 0x6b2 <CDC_Device_ProcessControlRequest+0x42>
     69a:	20 f4       	brcc	.+8      	; 0x6a4 <CDC_Device_ProcessControlRequest+0x34>
     69c:	80 32       	cpi	r24, 0x20	; 32
     69e:	09 f4       	brne	.+2      	; 0x6a2 <CDC_Device_ProcessControlRequest+0x32>
     6a0:	3e c0       	rjmp	.+124    	; 0x71e <CDC_Device_ProcessControlRequest+0xae>
     6a2:	93 c0       	rjmp	.+294    	; 0x7ca <CDC_Device_ProcessControlRequest+0x15a>
     6a4:	82 32       	cpi	r24, 0x22	; 34
     6a6:	09 f4       	brne	.+2      	; 0x6aa <CDC_Device_ProcessControlRequest+0x3a>
     6a8:	6c c0       	rjmp	.+216    	; 0x782 <CDC_Device_ProcessControlRequest+0x112>
     6aa:	83 32       	cpi	r24, 0x23	; 35
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <CDC_Device_ProcessControlRequest+0x40>
     6ae:	7d c0       	rjmp	.+250    	; 0x7aa <CDC_Device_ProcessControlRequest+0x13a>
     6b0:	8c c0       	rjmp	.+280    	; 0x7ca <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     6b2:	80 91 b6 01 	lds	r24, 0x01B6
     6b6:	81 3a       	cpi	r24, 0xA1	; 161
     6b8:	09 f0       	breq	.+2      	; 0x6bc <CDC_Device_ProcessControlRequest+0x4c>
     6ba:	87 c0       	rjmp	.+270    	; 0x7ca <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6bc:	80 91 e8 00 	lds	r24, 0x00E8
     6c0:	87 7f       	andi	r24, 0xF7	; 247
     6c2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6c6:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     6ca:	80 ff       	sbrs	r24, 0
     6cc:	fc cf       	rjmp	.-8      	; 0x6c6 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     6ce:	4c 89       	ldd	r20, Y+20	; 0x14
     6d0:	5d 89       	ldd	r21, Y+21	; 0x15
     6d2:	6e 89       	ldd	r22, Y+22	; 0x16
     6d4:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     6d6:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     6da:	bb 27       	eor	r27, r27
     6dc:	a7 2f       	mov	r26, r23
     6de:	96 2f       	mov	r25, r22
     6e0:	85 2f       	mov	r24, r21
     6e2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     6e6:	cb 01       	movw	r24, r22
     6e8:	aa 27       	eor	r26, r26
     6ea:	bb 27       	eor	r27, r27
     6ec:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     6f0:	47 2f       	mov	r20, r23
     6f2:	55 27       	eor	r21, r21
     6f4:	66 27       	eor	r22, r22
     6f6:	77 27       	eor	r23, r23
     6f8:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     6fc:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6fe:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     702:	89 8d       	ldd	r24, Y+25	; 0x19
     704:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     708:	8a 8d       	ldd	r24, Y+26	; 0x1a
     70a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     70e:	80 91 e8 00 	lds	r24, 0x00E8
     712:	8e 77       	andi	r24, 0x7E	; 126
     714:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     71c:	84 c1       	rjmp	.+776    	; 0xa26 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     71e:	80 91 b6 01 	lds	r24, 0x01B6
     722:	81 32       	cpi	r24, 0x21	; 33
     724:	09 f0       	breq	.+2      	; 0x728 <CDC_Device_ProcessControlRequest+0xb8>
     726:	51 c0       	rjmp	.+162    	; 0x7ca <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     728:	80 91 e8 00 	lds	r24, 0x00E8
     72c:	87 7f       	andi	r24, 0xF7	; 247
     72e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     732:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     736:	82 fd       	sbrc	r24, 2
     738:	05 c0       	rjmp	.+10     	; 0x744 <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     73a:	80 91 b5 01 	lds	r24, 0x01B5
     73e:	81 11       	cpse	r24, r1
     740:	f8 cf       	rjmp	.-16     	; 0x732 <CDC_Device_ProcessControlRequest+0xc2>
     742:	43 c0       	rjmp	.+134    	; 0x7ca <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     744:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     748:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     74c:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     750:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     754:	3c 8b       	std	Y+20, r19	; 0x14
     756:	2d 8b       	std	Y+21, r18	; 0x15
     758:	9e 8b       	std	Y+22, r25	; 0x16
     75a:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     75c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     760:	88 8f       	std	Y+24, r24	; 0x18
     762:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     766:	89 8f       	std	Y+25, r24	; 0x19
     768:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     76c:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     76e:	80 91 e8 00 	lds	r24, 0x00E8
     772:	8b 77       	andi	r24, 0x7B	; 123
     774:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     778:	56 d1       	rcall	.+684    	; 0xa26 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     77a:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     780:	76 cf       	rjmp	.-276    	; 0x66e <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     782:	80 91 b6 01 	lds	r24, 0x01B6
     786:	81 32       	cpi	r24, 0x21	; 33
     788:	01 f5       	brne	.+64     	; 0x7ca <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     78a:	80 91 e8 00 	lds	r24, 0x00E8
     78e:	87 7f       	andi	r24, 0xF7	; 247
     790:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     794:	48 d1       	rcall	.+656    	; 0xa26 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     796:	80 91 b8 01 	lds	r24, 0x01B8
     79a:	90 91 b9 01 	lds	r25, 0x01B9
     79e:	99 8b       	std	Y+17, r25	; 0x11
     7a0:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     7a2:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     7a8:	62 cf       	rjmp	.-316    	; 0x66e <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     7aa:	80 91 b6 01 	lds	r24, 0x01B6
     7ae:	81 32       	cpi	r24, 0x21	; 33
     7b0:	61 f4       	brne	.+24     	; 0x7ca <CDC_Device_ProcessControlRequest+0x15a>
     7b2:	80 91 e8 00 	lds	r24, 0x00E8
     7b6:	87 7f       	andi	r24, 0xF7	; 247
     7b8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     7bc:	34 d1       	rcall	.+616    	; 0xa26 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     7be:	60 91 b8 01 	lds	r22, 0x01B8
     7c2:	ce 01       	movw	r24, r28
			}

			break;
	}
}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     7c8:	52 cf       	rjmp	.-348    	; 0x66e <CDC_Device_Event_Stub>
			}

			break;
	}
}
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     7d0:	20 91 bc 01 	lds	r18, 0x01BC
     7d4:	30 91 bd 01 	lds	r19, 0x01BD
     7d8:	26 17       	cp	r18, r22
     7da:	37 07       	cpc	r19, r23
     7dc:	48 f0       	brcs	.+18     	; 0x7f0 <Endpoint_Write_Control_Stream_LE+0x20>
     7de:	61 15       	cp	r22, r1
     7e0:	71 05       	cpc	r23, r1
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <Endpoint_Write_Control_Stream_LE+0x22>
     7e4:	20 91 e8 00 	lds	r18, 0x00E8
     7e8:	2e 77       	andi	r18, 0x7E	; 126
     7ea:	20 93 e8 00 	sts	0x00E8, r18
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <Endpoint_Write_Control_Stream_LE+0x22>
     7f0:	b9 01       	movw	r22, r18
     7f2:	fc 01       	movw	r30, r24
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	61 15       	cp	r22, r1
     7f8:	71 05       	cpc	r23, r1
     7fa:	a9 f1       	breq	.+106    	; 0x866 <Endpoint_Write_Control_Stream_LE+0x96>
     7fc:	80 91 b5 01 	lds	r24, 0x01B5
     800:	88 23       	and	r24, r24
     802:	e9 f1       	breq	.+122    	; 0x87e <Endpoint_Write_Control_Stream_LE+0xae>
     804:	85 30       	cpi	r24, 0x05	; 5
     806:	e9 f1       	breq	.+122    	; 0x882 <Endpoint_Write_Control_Stream_LE+0xb2>
     808:	80 91 e8 00 	lds	r24, 0x00E8
     80c:	83 fd       	sbrc	r24, 3
     80e:	35 c0       	rjmp	.+106    	; 0x87a <Endpoint_Write_Control_Stream_LE+0xaa>
     810:	80 91 e8 00 	lds	r24, 0x00E8
     814:	82 ff       	sbrs	r24, 2
     816:	06 c0       	rjmp	.+12     	; 0x824 <Endpoint_Write_Control_Stream_LE+0x54>
     818:	80 91 e8 00 	lds	r24, 0x00E8
     81c:	82 ff       	sbrs	r24, 2
     81e:	26 c0       	rjmp	.+76     	; 0x86c <Endpoint_Write_Control_Stream_LE+0x9c>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	08 95       	ret
     824:	80 91 e8 00 	lds	r24, 0x00E8
     828:	80 ff       	sbrs	r24, 0
     82a:	e5 cf       	rjmp	.-54     	; 0x7f6 <Endpoint_Write_Control_Stream_LE+0x26>
     82c:	20 91 f3 00 	lds	r18, 0x00F3
     830:	80 91 f2 00 	lds	r24, 0x00F2
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	92 2b       	or	r25, r18
     838:	61 15       	cp	r22, r1
     83a:	71 05       	cpc	r23, r1
     83c:	51 f0       	breq	.+20     	; 0x852 <Endpoint_Write_Control_Stream_LE+0x82>
     83e:	88 30       	cpi	r24, 0x08	; 8
     840:	91 05       	cpc	r25, r1
     842:	38 f4       	brcc	.+14     	; 0x852 <Endpoint_Write_Control_Stream_LE+0x82>
     844:	21 91       	ld	r18, Z+
     846:	20 93 f1 00 	sts	0x00F1, r18
     84a:	61 50       	subi	r22, 0x01	; 1
     84c:	71 09       	sbc	r23, r1
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	f3 cf       	rjmp	.-26     	; 0x838 <Endpoint_Write_Control_Stream_LE+0x68>
     852:	21 e0       	ldi	r18, 0x01	; 1
     854:	08 97       	sbiw	r24, 0x08	; 8
     856:	09 f0       	breq	.+2      	; 0x85a <Endpoint_Write_Control_Stream_LE+0x8a>
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	80 91 e8 00 	lds	r24, 0x00E8
     85e:	8e 77       	andi	r24, 0x7E	; 126
     860:	80 93 e8 00 	sts	0x00E8, r24
     864:	c8 cf       	rjmp	.-112    	; 0x7f6 <Endpoint_Write_Control_Stream_LE+0x26>
     866:	21 11       	cpse	r18, r1
     868:	c9 cf       	rjmp	.-110    	; 0x7fc <Endpoint_Write_Control_Stream_LE+0x2c>
     86a:	d6 cf       	rjmp	.-84     	; 0x818 <Endpoint_Write_Control_Stream_LE+0x48>
     86c:	80 91 b5 01 	lds	r24, 0x01B5
     870:	88 23       	and	r24, r24
     872:	29 f0       	breq	.+10     	; 0x87e <Endpoint_Write_Control_Stream_LE+0xae>
     874:	85 30       	cpi	r24, 0x05	; 5
     876:	81 f6       	brne	.-96     	; 0x818 <Endpoint_Write_Control_Stream_LE+0x48>
     878:	04 c0       	rjmp	.+8      	; 0x882 <Endpoint_Write_Control_Stream_LE+0xb2>
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	08 95       	ret
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	08 95       	ret
     882:	83 e0       	ldi	r24, 0x03	; 3
     884:	08 95       	ret

00000886 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     886:	20 91 bc 01 	lds	r18, 0x01BC
     88a:	30 91 bd 01 	lds	r19, 0x01BD
     88e:	26 17       	cp	r18, r22
     890:	37 07       	cpc	r19, r23
     892:	48 f0       	brcs	.+18     	; 0x8a6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     894:	61 15       	cp	r22, r1
     896:	71 05       	cpc	r23, r1
     898:	39 f4       	brne	.+14     	; 0x8a8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     89a:	20 91 e8 00 	lds	r18, 0x00E8
     89e:	2e 77       	andi	r18, 0x7E	; 126
     8a0:	20 93 e8 00 	sts	0x00E8, r18
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <Endpoint_Write_Control_PStream_LE+0x22>
     8a6:	b9 01       	movw	r22, r18
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     8ac:	61 15       	cp	r22, r1
     8ae:	71 05       	cpc	r23, r1
     8b0:	c1 f1       	breq	.+112    	; 0x922 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8b2:	80 91 b5 01 	lds	r24, 0x01B5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8b6:	88 23       	and	r24, r24
     8b8:	09 f4       	brne	.+2      	; 0x8bc <Endpoint_Write_Control_PStream_LE+0x36>
     8ba:	3f c0       	rjmp	.+126    	; 0x93a <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8bc:	85 30       	cpi	r24, 0x05	; 5
     8be:	09 f4       	brne	.+2      	; 0x8c2 <Endpoint_Write_Control_PStream_LE+0x3c>
     8c0:	3e c0       	rjmp	.+124    	; 0x93e <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8c2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8c6:	83 fd       	sbrc	r24, 3
     8c8:	36 c0       	rjmp	.+108    	; 0x936 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     8ce:	82 ff       	sbrs	r24, 2
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <Endpoint_Write_Control_PStream_LE+0x58>
     8d2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     8d6:	82 ff       	sbrs	r24, 2
     8d8:	27 c0       	rjmp	.+78     	; 0x928 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8de:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     8e2:	80 ff       	sbrs	r24, 0
     8e4:	e3 cf       	rjmp	.-58     	; 0x8ac <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     8e6:	20 91 f3 00 	lds	r18, 0x00F3
     8ea:	80 91 f2 00 	lds	r24, 0x00F2
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     8f2:	61 15       	cp	r22, r1
     8f4:	71 05       	cpc	r23, r1
     8f6:	59 f0       	breq	.+22     	; 0x90e <Endpoint_Write_Control_PStream_LE+0x88>
     8f8:	88 30       	cpi	r24, 0x08	; 8
     8fa:	91 05       	cpc	r25, r1
     8fc:	40 f4       	brcc	.+16     	; 0x90e <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     8fe:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     900:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     904:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     906:	61 50       	subi	r22, 0x01	; 1
     908:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	f2 cf       	rjmp	.-28     	; 0x8f2 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	08 97       	sbiw	r24, 0x08	; 8
     912:	09 f0       	breq	.+2      	; 0x916 <Endpoint_Write_Control_PStream_LE+0x90>
     914:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     916:	80 91 e8 00 	lds	r24, 0x00E8
     91a:	8e 77       	andi	r24, 0x7E	; 126
     91c:	80 93 e8 00 	sts	0x00E8, r24
     920:	c5 cf       	rjmp	.-118    	; 0x8ac <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     922:	21 11       	cpse	r18, r1
     924:	c6 cf       	rjmp	.-116    	; 0x8b2 <Endpoint_Write_Control_PStream_LE+0x2c>
     926:	d5 cf       	rjmp	.-86     	; 0x8d2 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     928:	80 91 b5 01 	lds	r24, 0x01B5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     92c:	88 23       	and	r24, r24
     92e:	29 f0       	breq	.+10     	; 0x93a <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     930:	85 30       	cpi	r24, 0x05	; 5
     932:	79 f6       	brne	.-98     	; 0x8d2 <Endpoint_Write_Control_PStream_LE+0x4c>
     934:	04 c0       	rjmp	.+8      	; 0x93e <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     93e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     940:	08 95       	ret

00000942 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     942:	98 2f       	mov	r25, r24
     944:	97 30       	cpi	r25, 0x07	; 7
     946:	58 f5       	brcc	.+86     	; 0x99e <Endpoint_ConfigureEndpoint_Prv+0x5c>
     948:	90 93 e9 00 	sts	0x00E9, r25
     94c:	98 17       	cp	r25, r24
     94e:	39 f0       	breq	.+14     	; 0x95e <Endpoint_ConfigureEndpoint_Prv+0x1c>
     950:	70 91 ec 00 	lds	r23, 0x00EC
     954:	20 91 ed 00 	lds	r18, 0x00ED
     958:	50 91 f0 00 	lds	r21, 0x00F0
     95c:	03 c0       	rjmp	.+6      	; 0x964 <Endpoint_ConfigureEndpoint_Prv+0x22>
     95e:	24 2f       	mov	r18, r20
     960:	76 2f       	mov	r23, r22
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	21 ff       	sbrs	r18, 1
     966:	19 c0       	rjmp	.+50     	; 0x99a <Endpoint_ConfigureEndpoint_Prv+0x58>
     968:	30 91 eb 00 	lds	r19, 0x00EB
     96c:	3e 7f       	andi	r19, 0xFE	; 254
     96e:	30 93 eb 00 	sts	0x00EB, r19
     972:	30 91 ed 00 	lds	r19, 0x00ED
     976:	3d 7f       	andi	r19, 0xFD	; 253
     978:	30 93 ed 00 	sts	0x00ED, r19
     97c:	30 91 eb 00 	lds	r19, 0x00EB
     980:	31 60       	ori	r19, 0x01	; 1
     982:	30 93 eb 00 	sts	0x00EB, r19
     986:	70 93 ec 00 	sts	0x00EC, r23
     98a:	20 93 ed 00 	sts	0x00ED, r18
     98e:	50 93 f0 00 	sts	0x00F0, r21
     992:	20 91 ee 00 	lds	r18, 0x00EE
     996:	27 ff       	sbrs	r18, 7
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <Endpoint_ConfigureEndpoint_Prv+0x66>
     99a:	9f 5f       	subi	r25, 0xFF	; 255
     99c:	d3 cf       	rjmp	.-90     	; 0x944 <Endpoint_ConfigureEndpoint_Prv+0x2>
     99e:	8f 70       	andi	r24, 0x0F	; 15
     9a0:	80 93 e9 00 	sts	0x00E9, r24
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	08 95       	ret
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	08 95       	ret

000009ac <Endpoint_ConfigureEndpointTable>:
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	06 2f       	mov	r16, r22
     9b6:	ec 01       	movw	r28, r24
     9b8:	10 e0       	ldi	r17, 0x00	; 0
     9ba:	10 17       	cp	r17, r16
     9bc:	71 f1       	breq	.+92     	; 0xa1a <Endpoint_ConfigureEndpointTable+0x6e>
     9be:	98 81       	ld	r25, Y
     9c0:	99 23       	and	r25, r25
     9c2:	41 f1       	breq	.+80     	; 0xa14 <Endpoint_ConfigureEndpointTable+0x68>
     9c4:	2c 81       	ldd	r18, Y+4	; 0x04
     9c6:	e9 81       	ldd	r30, Y+1	; 0x01
     9c8:	fa 81       	ldd	r31, Y+2	; 0x02
     9ca:	7b 81       	ldd	r23, Y+3	; 0x03
     9cc:	89 2f       	mov	r24, r25
     9ce:	8f 70       	andi	r24, 0x0F	; 15
     9d0:	87 30       	cpi	r24, 0x07	; 7
     9d2:	10 f0       	brcs	.+4      	; 0x9d8 <Endpoint_ConfigureEndpointTable+0x2c>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	22 c0       	rjmp	.+68     	; 0xa1c <Endpoint_ConfigureEndpointTable+0x70>
     9d8:	22 30       	cpi	r18, 0x02	; 2
     9da:	10 f0       	brcs	.+4      	; 0x9e0 <Endpoint_ConfigureEndpointTable+0x34>
     9dc:	56 e0       	ldi	r21, 0x06	; 6
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <Endpoint_ConfigureEndpointTable+0x36>
     9e0:	52 e0       	ldi	r21, 0x02	; 2
     9e2:	28 e0       	ldi	r18, 0x08	; 8
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	2e 17       	cp	r18, r30
     9ea:	3f 07       	cpc	r19, r31
     9ec:	20 f4       	brcc	.+8      	; 0x9f6 <Endpoint_ConfigureEndpointTable+0x4a>
     9ee:	4f 5f       	subi	r20, 0xFF	; 255
     9f0:	22 0f       	add	r18, r18
     9f2:	33 1f       	adc	r19, r19
     9f4:	f9 cf       	rjmp	.-14     	; 0x9e8 <Endpoint_ConfigureEndpointTable+0x3c>
     9f6:	42 95       	swap	r20
     9f8:	40 7f       	andi	r20, 0xF0	; 240
     9fa:	45 2b       	or	r20, r21
     9fc:	69 2f       	mov	r22, r25
     9fe:	66 1f       	adc	r22, r22
     a00:	66 27       	eor	r22, r22
     a02:	66 1f       	adc	r22, r22
     a04:	90 e4       	ldi	r25, 0x40	; 64
     a06:	79 9f       	mul	r23, r25
     a08:	90 01       	movw	r18, r0
     a0a:	11 24       	eor	r1, r1
     a0c:	62 2b       	or	r22, r18
     a0e:	99 df       	rcall	.-206    	; 0x942 <Endpoint_ConfigureEndpoint_Prv>
     a10:	88 23       	and	r24, r24
     a12:	01 f3       	breq	.-64     	; 0x9d4 <Endpoint_ConfigureEndpointTable+0x28>
     a14:	1f 5f       	subi	r17, 0xFF	; 255
     a16:	25 96       	adiw	r28, 0x05	; 5
     a18:	d0 cf       	rjmp	.-96     	; 0x9ba <Endpoint_ConfigureEndpointTable+0xe>
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     a26:	80 91 b6 01 	lds	r24, 0x01B6
     a2a:	87 fd       	sbrc	r24, 7
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a2e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     a32:	80 ff       	sbrs	r24, 0
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <Endpoint_ClearStatusStage+0x2c>
     a36:	12 c0       	rjmp	.+36     	; 0xa5c <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a38:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     a3c:	82 fd       	sbrc	r24, 2
     a3e:	05 c0       	rjmp	.+10     	; 0xa4a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a40:	80 91 b5 01 	lds	r24, 0x01B5
     a44:	81 11       	cpse	r24, r1
     a46:	f8 cf       	rjmp	.-16     	; 0xa38 <Endpoint_ClearStatusStage+0x12>
     a48:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a4a:	80 91 e8 00 	lds	r24, 0x00E8
     a4e:	8b 77       	andi	r24, 0x7B	; 123
     a50:	08 c0       	rjmp	.+16     	; 0xa62 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a52:	80 91 b5 01 	lds	r24, 0x01B5
     a56:	81 11       	cpse	r24, r1
     a58:	ea cf       	rjmp	.-44     	; 0xa2e <Endpoint_ClearStatusStage+0x8>
     a5a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a5c:	80 91 e8 00 	lds	r24, 0x00E8
     a60:	8e 77       	andi	r24, 0x7E	; 126
     a62:	80 93 e8 00 	sts	0x00E8, r24
     a66:	08 95       	ret

00000a68 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     a68:	80 91 e4 00 	lds	r24, 0x00E4
     a6c:	90 91 e5 00 	lds	r25, 0x00E5
     a70:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a72:	20 91 ec 00 	lds	r18, 0x00EC
     a76:	20 ff       	sbrs	r18, 0
     a78:	21 c0       	rjmp	.+66     	; 0xabc <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a7a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     a7e:	20 fd       	sbrc	r18, 0
     a80:	21 c0       	rjmp	.+66     	; 0xac4 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a82:	20 91 b5 01 	lds	r18, 0x01B5

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a86:	22 23       	and	r18, r18
     a88:	89 f0       	breq	.+34     	; 0xaac <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a8a:	25 30       	cpi	r18, 0x05	; 5
     a8c:	89 f0       	breq	.+34     	; 0xab0 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a8e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     a92:	25 fd       	sbrc	r18, 5
     a94:	0f c0       	rjmp	.+30     	; 0xab4 <Endpoint_WaitUntilReady+0x4c>
     a96:	20 91 e4 00 	lds	r18, 0x00E4
     a9a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a9e:	28 17       	cp	r18, r24
     aa0:	39 07       	cpc	r19, r25
     aa2:	39 f3       	breq	.-50     	; 0xa72 <Endpoint_WaitUntilReady+0xa>
     aa4:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     aa6:	41 f0       	breq	.+16     	; 0xab8 <Endpoint_WaitUntilReady+0x50>
     aa8:	c9 01       	movw	r24, r18
     aaa:	e3 cf       	rjmp	.-58     	; 0xa72 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     ab8:	84 e0       	ldi	r24, 0x04	; 4
     aba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     abc:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     ac0:	22 ff       	sbrs	r18, 2
     ac2:	df cf       	rjmp	.-66     	; 0xa82 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	08 95       	ret

00000ac8 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     ad0:	4b d0       	rcall	.+150    	; 0xb68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ad2:	52 d0       	rcall	.+164    	; 0xb78 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ad4:	c8 ed       	ldi	r28, 0xD8	; 216
     ad6:	d0 e0       	ldi	r29, 0x00	; 0
     ad8:	88 81       	ld	r24, Y
     ada:	8f 77       	andi	r24, 0x7F	; 127
     adc:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     ade:	88 81       	ld	r24, Y
     ae0:	80 68       	ori	r24, 0x80	; 128
     ae2:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ae4:	88 81       	ld	r24, Y
     ae6:	8f 7d       	andi	r24, 0xDF	; 223
     ae8:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     aea:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     aec:	10 92 b5 01 	sts	0x01B5, r1
	USB_Device_ConfigurationNumber  = 0;
     af0:	10 92 b1 01 	sts	0x01B1, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     af4:	10 92 b3 01 	sts	0x01B3, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     af8:	10 92 b2 01 	sts	0x01B2, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     afc:	00 ee       	ldi	r16, 0xE0	; 224
     afe:	10 e0       	ldi	r17, 0x00	; 0
     b00:	f8 01       	movw	r30, r16
     b02:	80 81       	ld	r24, Z
     b04:	8b 7f       	andi	r24, 0xFB	; 251
     b06:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     b08:	88 81       	ld	r24, Y
     b0a:	81 60       	ori	r24, 0x01	; 1
     b0c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b0e:	42 e0       	ldi	r20, 0x02	; 2
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	16 df       	rcall	.-468    	; 0x942 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b16:	e1 ee       	ldi	r30, 0xE1	; 225
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	8e 7f       	andi	r24, 0xFE	; 254
     b1e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b20:	e2 ee       	ldi	r30, 0xE2	; 226
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	81 60       	ori	r24, 0x01	; 1
     b28:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     b2a:	80 81       	ld	r24, Z
     b2c:	88 60       	ori	r24, 0x08	; 8
     b2e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b30:	f8 01       	movw	r30, r16
     b32:	80 81       	ld	r24, Z
     b34:	8e 7f       	andi	r24, 0xFE	; 254
     b36:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b38:	88 81       	ld	r24, Y
     b3a:	80 61       	ori	r24, 0x10	; 16
     b3c:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	08 95       	ret

00000b48 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b48:	e8 ed       	ldi	r30, 0xD8	; 216
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	8f 7e       	andi	r24, 0xEF	; 239
     b50:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b52:	e7 ed       	ldi	r30, 0xD7	; 215
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	80 93 b4 01 	sts	0x01B4, r24

	USB_ResetInterface();
     b66:	b0 cf       	rjmp	.-160    	; 0xac8 <USB_ResetInterface>

00000b68 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     b68:	e8 ed       	ldi	r30, 0xD8	; 216
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8e 7f       	andi	r24, 0xFE	; 254
     b70:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     b72:	10 92 e2 00 	sts	0x00E2, r1
     b76:	08 95       	ret

00000b78 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b78:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     b7c:	10 92 e1 00 	sts	0x00E1, r1
     b80:	08 95       	ret

00000b82 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     ba4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     ba8:	82 ff       	sbrs	r24, 2
     baa:	0a c0       	rjmp	.+20     	; 0xbc0 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     bac:	80 91 e2 00 	lds	r24, 0x00E2
     bb0:	82 ff       	sbrs	r24, 2
     bb2:	06 c0       	rjmp	.+12     	; 0xbc0 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     bb4:	80 91 e1 00 	lds	r24, 0x00E1
     bb8:	8b 7f       	andi	r24, 0xFB	; 251
     bba:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     bbe:	2c d2       	rcall	.+1112   	; 0x1018 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     bc0:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     bc4:	80 ff       	sbrs	r24, 0
     bc6:	1d c0       	rjmp	.+58     	; 0xc02 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     bc8:	80 91 d8 00 	lds	r24, 0x00D8
     bcc:	80 ff       	sbrs	r24, 0
     bce:	19 c0       	rjmp	.+50     	; 0xc02 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     bd0:	80 91 da 00 	lds	r24, 0x00DA
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     bda:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     bde:	80 ff       	sbrs	r24, 0
     be0:	0c c0       	rjmp	.+24     	; 0xbfa <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     be2:	80 e1       	ldi	r24, 0x10	; 16
     be4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     be6:	82 e1       	ldi	r24, 0x12	; 18
     be8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     bea:	09 b4       	in	r0, 0x29	; 41
     bec:	00 fe       	sbrs	r0, 0
     bee:	fd cf       	rjmp	.-6      	; 0xbea <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	80 93 b5 01 	sts	0x01B5, r24
			EVENT_USB_Device_Connect();
     bf6:	51 d3       	rcall	.+1698   	; 0x129a <EVENT_USB_Device_Connect>
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bfa:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     bfc:	10 92 b5 01 	sts	0x01B5, r1
			EVENT_USB_Device_Disconnect();
     c00:	4e d3       	rcall	.+1692   	; 0x129e <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     c02:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     c06:	80 ff       	sbrs	r24, 0
     c08:	18 c0       	rjmp	.+48     	; 0xc3a <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     c0a:	80 91 e2 00 	lds	r24, 0x00E2
     c0e:	80 ff       	sbrs	r24, 0
     c10:	14 c0       	rjmp	.+40     	; 0xc3a <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c12:	80 91 e2 00 	lds	r24, 0x00E2
     c16:	8e 7f       	andi	r24, 0xFE	; 254
     c18:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c1c:	80 91 e2 00 	lds	r24, 0x00E2
     c20:	80 61       	ori	r24, 0x10	; 16
     c22:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     c26:	80 91 d8 00 	lds	r24, 0x00D8
     c2a:	80 62       	ori	r24, 0x20	; 32
     c2c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c30:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     c32:	85 e0       	ldi	r24, 0x05	; 5
     c34:	80 93 b5 01 	sts	0x01B5, r24
		EVENT_USB_Device_Suspend();
     c38:	ef d1       	rcall	.+990    	; 0x1018 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     c3a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     c3e:	84 ff       	sbrs	r24, 4
     c40:	2f c0       	rjmp	.+94     	; 0xca0 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     c42:	80 91 e2 00 	lds	r24, 0x00E2
     c46:	84 ff       	sbrs	r24, 4
     c48:	2b c0       	rjmp	.+86     	; 0xca0 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c4a:	80 e1       	ldi	r24, 0x10	; 16
     c4c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c4e:	82 e1       	ldi	r24, 0x12	; 18
     c50:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c52:	09 b4       	in	r0, 0x29	; 41
     c54:	00 fe       	sbrs	r0, 0
     c56:	fd cf       	rjmp	.-6      	; 0xc52 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c58:	80 91 d8 00 	lds	r24, 0x00D8
     c5c:	8f 7d       	andi	r24, 0xDF	; 223
     c5e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     c62:	80 91 e1 00 	lds	r24, 0x00E1
     c66:	8f 7e       	andi	r24, 0xEF	; 239
     c68:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     c6c:	80 91 e2 00 	lds	r24, 0x00E2
     c70:	8f 7e       	andi	r24, 0xEF	; 239
     c72:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     c76:	80 91 e2 00 	lds	r24, 0x00E2
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     c80:	80 91 b1 01 	lds	r24, 0x01B1
     c84:	88 23       	and	r24, r24
     c86:	11 f0       	breq	.+4      	; 0xc8c <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     c88:	84 e0       	ldi	r24, 0x04	; 4
     c8a:	07 c0       	rjmp	.+14     	; 0xc9a <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c8c:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     c90:	87 ff       	sbrs	r24, 7
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__vector_10+0x116>
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <__vector_10+0x118>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	80 93 b5 01 	sts	0x01B5, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     c9e:	bc d1       	rcall	.+888    	; 0x1018 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     ca0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     ca4:	83 ff       	sbrs	r24, 3
     ca6:	27 c0       	rjmp	.+78     	; 0xcf6 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     ca8:	80 91 e2 00 	lds	r24, 0x00E2
     cac:	83 ff       	sbrs	r24, 3
     cae:	23 c0       	rjmp	.+70     	; 0xcf6 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     cb0:	80 91 e1 00 	lds	r24, 0x00E1
     cb4:	87 7f       	andi	r24, 0xF7	; 247
     cb6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	80 93 b5 01 	sts	0x01B5, r24
		USB_Device_ConfigurationNumber = 0;
     cc0:	10 92 b1 01 	sts	0x01B1, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     cc4:	80 91 e1 00 	lds	r24, 0x00E1
     cc8:	8e 7f       	andi	r24, 0xFE	; 254
     cca:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     cce:	80 91 e2 00 	lds	r24, 0x00E2
     cd2:	8e 7f       	andi	r24, 0xFE	; 254
     cd4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     cd8:	80 91 e2 00 	lds	r24, 0x00E2
     cdc:	80 61       	ori	r24, 0x10	; 16
     cde:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ce2:	42 e0       	ldi	r20, 0x02	; 2
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	2c de       	rcall	.-936    	; 0x942 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     cea:	80 91 f0 00 	lds	r24, 0x00F0
     cee:	88 60       	ori	r24, 0x08	; 8
     cf0:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     cf4:	91 d1       	rcall	.+802    	; 0x1018 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	7f 91       	pop	r23
     d04:	6f 91       	pop	r22
     d06:	5f 91       	pop	r21
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     d18:	1f 92       	push	r1
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	0f 92       	push	r0
     d20:	11 24       	eor	r1, r1
     d22:	2f 93       	push	r18
     d24:	3f 93       	push	r19
     d26:	4f 93       	push	r20
     d28:	5f 93       	push	r21
     d2a:	6f 93       	push	r22
     d2c:	7f 93       	push	r23
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
     d32:	af 93       	push	r26
     d34:	bf 93       	push	r27
     d36:	cf 93       	push	r28
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d3c:	c0 91 e9 00 	lds	r28, 0x00E9
     d40:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d42:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d46:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     d4a:	80 91 f0 00 	lds	r24, 0x00F0
     d4e:	87 7f       	andi	r24, 0xF7	; 247
     d50:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     d54:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     d56:	1b d0       	rcall	.+54     	; 0xd8e <USB_Device_ProcessControlRequest>
     d58:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     d5c:	80 91 f0 00 	lds	r24, 0x00F0
     d60:	88 60       	ori	r24, 0x08	; 8
     d62:	80 93 f0 00 	sts	0x00F0, r24
     d66:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	cf 91       	pop	r28
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	aa 97       	sbiw	r28, 0x2a	; 42
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	e6 eb       	ldi	r30, 0xB6	; 182
     da6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     da8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     dac:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     dae:	21 e0       	ldi	r18, 0x01	; 1
     db0:	ee 3b       	cpi	r30, 0xBE	; 190
     db2:	f2 07       	cpc	r31, r18
     db4:	c9 f7       	brne	.-14     	; 0xda8 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     db6:	7e d2       	rcall	.+1276   	; 0x12b4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     db8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     dbc:	83 ff       	sbrs	r24, 3
     dbe:	14 c1       	rjmp	.+552    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     dc0:	20 91 b6 01 	lds	r18, 0x01B6

		switch (USB_ControlRequest.bRequest)
     dc4:	30 91 b7 01 	lds	r19, 0x01B7
     dc8:	83 2f       	mov	r24, r19
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	8a 30       	cpi	r24, 0x0A	; 10
     dce:	91 05       	cpc	r25, r1
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <USB_Device_ProcessControlRequest+0x46>
     dd2:	0a c1       	rjmp	.+532    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
     dd4:	fc 01       	movw	r30, r24
     dd6:	ea 5a       	subi	r30, 0xAA	; 170
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	60 c3       	rjmp	.+1728   	; 0x149c <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ddc:	20 38       	cpi	r18, 0x80	; 128
     dde:	81 f0       	breq	.+32     	; 0xe00 <USB_Device_ProcessControlRequest+0x72>
     de0:	22 38       	cpi	r18, 0x82	; 130
     de2:	09 f0       	breq	.+2      	; 0xde6 <USB_Device_ProcessControlRequest+0x58>
     de4:	01 c1       	rjmp	.+514    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     de6:	80 91 ba 01 	lds	r24, 0x01BA
     dea:	8f 70       	andi	r24, 0x0F	; 15
     dec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     df0:	80 91 eb 00 	lds	r24, 0x00EB
     df4:	85 fb       	bst	r24, 5
     df6:	88 27       	eor	r24, r24
     df8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dfa:	10 92 e9 00 	sts	0x00E9, r1
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     e00:	80 91 b2 01 	lds	r24, 0x01B2
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     e04:	90 91 b3 01 	lds	r25, 0x01B3
     e08:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     e0a:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e0c:	90 91 e8 00 	lds	r25, 0x00E8
     e10:	97 7f       	andi	r25, 0xF7	; 247
     e12:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     e16:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     e1a:	10 92 f1 00 	sts	0x00F1, r1
     e1e:	c1 c0       	rjmp	.+386    	; 0xfa2 <USB_Device_ProcessControlRequest+0x214>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e20:	82 2f       	mov	r24, r18
     e22:	8d 7f       	andi	r24, 0xFD	; 253
     e24:	09 f0       	breq	.+2      	; 0xe28 <USB_Device_ProcessControlRequest+0x9a>
     e26:	e0 c0       	rjmp	.+448    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     e28:	22 23       	and	r18, r18
     e2a:	19 f0       	breq	.+6      	; 0xe32 <USB_Device_ProcessControlRequest+0xa4>
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	61 f0       	breq	.+24     	; 0xe48 <USB_Device_ProcessControlRequest+0xba>
     e30:	db c0       	rjmp	.+438    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     e32:	80 91 b8 01 	lds	r24, 0x01B8
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	09 f0       	breq	.+2      	; 0xe3c <USB_Device_ProcessControlRequest+0xae>
     e3a:	d6 c0       	rjmp	.+428    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     e3c:	33 30       	cpi	r19, 0x03	; 3
     e3e:	09 f0       	breq	.+2      	; 0xe42 <USB_Device_ProcessControlRequest+0xb4>
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	80 93 b3 01 	sts	0x01B3, r24
     e46:	28 c0       	rjmp	.+80     	; 0xe98 <USB_Device_ProcessControlRequest+0x10a>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     e48:	80 91 b8 01 	lds	r24, 0x01B8
     e4c:	81 11       	cpse	r24, r1
     e4e:	24 c0       	rjmp	.+72     	; 0xe98 <USB_Device_ProcessControlRequest+0x10a>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     e50:	20 91 ba 01 	lds	r18, 0x01BA
     e54:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     e56:	09 f4       	brne	.+2      	; 0xe5a <USB_Device_ProcessControlRequest+0xcc>
     e58:	c7 c0       	rjmp	.+398    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e5a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e5e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     e62:	80 ff       	sbrs	r24, 0
     e64:	19 c0       	rjmp	.+50     	; 0xe98 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e66:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     e6a:	33 30       	cpi	r19, 0x03	; 3
     e6c:	11 f4       	brne	.+4      	; 0xe72 <USB_Device_ProcessControlRequest+0xe4>
     e6e:	80 62       	ori	r24, 0x20	; 32
     e70:	11 c0       	rjmp	.+34     	; 0xe94 <USB_Device_ProcessControlRequest+0x106>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     e72:	80 61       	ori	r24, 0x10	; 16
     e74:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <USB_Device_ProcessControlRequest+0xf4>
     e80:	88 0f       	add	r24, r24
     e82:	0a 94       	dec	r0
     e84:	ea f7       	brpl	.-6      	; 0xe80 <USB_Device_ProcessControlRequest+0xf2>
     e86:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     e8a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     e8e:	80 91 eb 00 	lds	r24, 0x00EB
     e92:	88 60       	ori	r24, 0x08	; 8
     e94:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e98:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e9c:	80 91 e8 00 	lds	r24, 0x00E8
     ea0:	87 7f       	andi	r24, 0xF7	; 247
     ea2:	82 c0       	rjmp	.+260    	; 0xfa8 <USB_Device_ProcessControlRequest+0x21a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ea4:	21 11       	cpse	r18, r1
     ea6:	a0 c0       	rjmp	.+320    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ea8:	10 91 b8 01 	lds	r17, 0x01B8
     eac:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     eae:	80 91 e3 00 	lds	r24, 0x00E3
     eb2:	80 78       	andi	r24, 0x80	; 128
     eb4:	81 2b       	or	r24, r17
     eb6:	80 93 e3 00 	sts	0x00E3, r24
     eba:	80 91 e8 00 	lds	r24, 0x00E8
     ebe:	87 7f       	andi	r24, 0xF7	; 247
     ec0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ec4:	b0 dd       	rcall	.-1184   	; 0xa26 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ec6:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     eca:	80 ff       	sbrs	r24, 0
     ecc:	fc cf       	rjmp	.-8      	; 0xec6 <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     ece:	80 91 e3 00 	lds	r24, 0x00E3
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     ed8:	11 23       	and	r17, r17
     eda:	11 f0       	breq	.+4      	; 0xee0 <USB_Device_ProcessControlRequest+0x152>
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <USB_Device_ProcessControlRequest+0x154>
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	80 93 b5 01 	sts	0x01B5, r24
     ee6:	80 c0       	rjmp	.+256    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ee8:	20 58       	subi	r18, 0x80	; 128
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	08 f0       	brcs	.+2      	; 0xef0 <USB_Device_ProcessControlRequest+0x162>
     eee:	7c c0       	rjmp	.+248    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ef0:	80 91 b8 01 	lds	r24, 0x01B8
     ef4:	90 91 b9 01 	lds	r25, 0x01B9
     ef8:	8c 3d       	cpi	r24, 0xDC	; 220
     efa:	23 e0       	ldi	r18, 0x03	; 3
     efc:	92 07       	cpc	r25, r18
     efe:	71 f5       	brne	.+92     	; 0xf5c <USB_Device_ProcessControlRequest+0x1ce>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     f04:	8a e2       	ldi	r24, 0x2A	; 42
     f06:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f08:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     f0a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     f0c:	de 01       	movw	r26, r28
     f0e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f10:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     f12:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     f14:	51 e2       	ldi	r21, 0x21	; 33
     f16:	e3 2f       	mov	r30, r19
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	50 93 57 00 	sts	0x0057, r21
     f1e:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     f20:	20 ff       	sbrs	r18, 0
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <USB_Device_ProcessControlRequest+0x19c>
					{
						SerialByte >>= 4;
     f24:	e2 95       	swap	r30
     f26:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     f28:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     f2a:	ef 70       	andi	r30, 0x0F	; 15
     f2c:	8e 2f       	mov	r24, r30
     f2e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     f30:	ea 30       	cpi	r30, 0x0A	; 10
     f32:	10 f0       	brcs	.+4      	; 0xf38 <USB_Device_ProcessControlRequest+0x1aa>
     f34:	c7 96       	adiw	r24, 0x37	; 55
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <USB_Device_ProcessControlRequest+0x1ac>
     f38:	c0 96       	adiw	r24, 0x30	; 48
     f3a:	8d 93       	st	X+, r24
     f3c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	24 31       	cpi	r18, 0x14	; 20
     f42:	49 f7       	brne	.-46     	; 0xf16 <USB_Device_ProcessControlRequest+0x188>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f44:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f46:	80 91 e8 00 	lds	r24, 0x00E8
     f4a:	87 7f       	andi	r24, 0xF7	; 247
     f4c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     f50:	6a e2       	ldi	r22, 0x2A	; 42
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	3b dc       	rcall	.-1930   	; 0x7d0 <Endpoint_Write_Control_Stream_LE>
     f5a:	12 c0       	rjmp	.+36     	; 0xf80 <USB_Device_ProcessControlRequest+0x1f2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     f5c:	ae 01       	movw	r20, r28
     f5e:	4f 5f       	subi	r20, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	60 91 ba 01 	lds	r22, 0x01BA
     f66:	10 d9       	rcall	.-3552   	; 0x188 <CALLBACK_USB_GetDescriptor>
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	09 f4       	brne	.+2      	; 0xf6e <USB_Device_ProcessControlRequest+0x1e0>
     f6c:	3d c0       	rjmp	.+122    	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
     f6e:	20 91 e8 00 	lds	r18, 0x00E8
     f72:	27 7f       	andi	r18, 0xF7	; 247
     f74:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     f78:	bc 01       	movw	r22, r24
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	83 dc       	rcall	.-1786   	; 0x886 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f80:	80 91 e8 00 	lds	r24, 0x00E8
     f84:	8b 77       	andi	r24, 0x7B	; 123
     f86:	80 93 e8 00 	sts	0x00E8, r24
     f8a:	2e c0       	rjmp	.+92     	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     f8c:	20 38       	cpi	r18, 0x80	; 128
     f8e:	61 f5       	brne	.+88     	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f90:	80 91 e8 00 	lds	r24, 0x00E8
     f94:	87 7f       	andi	r24, 0xF7	; 247
     f96:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     f9a:	80 91 b1 01 	lds	r24, 0x01B1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f9e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fa2:	80 91 e8 00 	lds	r24, 0x00E8
     fa6:	8e 77       	andi	r24, 0x7E	; 126
     fa8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     fac:	3c dd       	rcall	.-1416   	; 0xa26 <Endpoint_ClearStatusStage>
     fae:	1c c0       	rjmp	.+56     	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     fb0:	21 11       	cpse	r18, r1
     fb2:	1a c0       	rjmp	.+52     	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     fb4:	90 91 b8 01 	lds	r25, 0x01B8
     fb8:	92 30       	cpi	r25, 0x02	; 2
     fba:	b0 f4       	brcc	.+44     	; 0xfe8 <USB_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fbc:	80 91 e8 00 	lds	r24, 0x00E8
     fc0:	87 7f       	andi	r24, 0xF7	; 247
     fc2:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     fc6:	90 93 b1 01 	sts	0x01B1, r25

	Endpoint_ClearStatusStage();
     fca:	2d dd       	rcall	.-1446   	; 0xa26 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     fcc:	80 91 b1 01 	lds	r24, 0x01B1
     fd0:	81 11       	cpse	r24, r1
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <USB_Device_ProcessControlRequest+0x24e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     fd4:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     fd8:	87 ff       	sbrs	r24, 7
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <USB_Device_ProcessControlRequest+0x252>
     fdc:	84 e0       	ldi	r24, 0x04	; 4
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <USB_Device_ProcessControlRequest+0x254>
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 b5 01 	sts	0x01B5, r24

	EVENT_USB_Device_ConfigurationChanged();
     fe6:	5d d1       	rcall	.+698    	; 0x12a2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fe8:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     fec:	83 ff       	sbrs	r24, 3
     fee:	0a c0       	rjmp	.+20     	; 0x1004 <USB_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
     ff4:	87 7f       	andi	r24, 0xF7	; 247
     ff6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ffa:	80 91 eb 00 	lds	r24, 0x00EB
     ffe:	80 62       	ori	r24, 0x20	; 32
    1000:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1004:	aa 96       	adiw	r28, 0x2a	; 42
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	08 95       	ret

00001018 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1018:	08 95       	ret

0000101a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    101a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    101c:	80 91 b5 01 	lds	r24, 0x01B5
    1020:	88 23       	and	r24, r24
    1022:	a9 f0       	breq	.+42     	; 0x104e <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1024:	80 91 e9 00 	lds	r24, 0x00E9
    1028:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    102a:	90 91 ec 00 	lds	r25, 0x00EC
    102e:	90 ff       	sbrs	r25, 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <USB_USBTask+0x1c>
    1032:	90 e8       	ldi	r25, 0x80	; 128
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <USB_USBTask+0x1e>
    1036:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1038:	c9 2f       	mov	r28, r25
    103a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    103c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1040:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1044:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1046:	a3 de       	rcall	.-698    	; 0xd8e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1048:	cf 70       	andi	r28, 0x0F	; 15
    104a:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <LEDs_SetAllLEDs>:
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
    1052:	25 b1       	in	r18, 0x05	; 5
    1054:	98 2f       	mov	r25, r24
    1056:	91 70       	andi	r25, 0x01	; 1
    1058:	90 95       	com	r25
    105a:	21 60       	ori	r18, 0x01	; 1
    105c:	92 23       	and	r25, r18
    105e:	95 b9       	out	0x05, r25	; 5
    1060:	2b b1       	in	r18, 0x0b	; 11
    1062:	98 2f       	mov	r25, r24
    1064:	90 72       	andi	r25, 0x20	; 32
    1066:	90 95       	com	r25
    1068:	20 62       	ori	r18, 0x20	; 32
    106a:	92 23       	and	r25, r18
    106c:	9b b9       	out	0x0b, r25	; 11
    106e:	98 b1       	in	r25, 0x08	; 8
    1070:	80 78       	andi	r24, 0x80	; 128
    1072:	9f 77       	andi	r25, 0x7F	; 127
    1074:	89 2b       	or	r24, r25
    1076:	88 b9       	out	0x08, r24	; 8
    1078:	08 95       	ret

0000107a <SetupHardware>:
    107a:	84 b7       	in	r24, 0x34	; 52
    107c:	87 7f       	andi	r24, 0xF7	; 247
    107e:	84 bf       	out	0x34, r24	; 52
    1080:	88 e1       	ldi	r24, 0x18	; 24
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	80 93 60 00 	sts	0x0060, r24
    108a:	10 92 60 00 	sts	0x0060, r1
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	80 e8       	ldi	r24, 0x80	; 128
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	80 93 61 00 	sts	0x0061, r24
    109c:	90 93 61 00 	sts	0x0061, r25
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	20 9a       	sbi	0x04, 0	; 4
    10a4:	28 9a       	sbi	0x05, 0	; 5
    10a6:	55 9a       	sbi	0x0a, 5	; 10
    10a8:	5d 9a       	sbi	0x0b, 5	; 11
    10aa:	3f 9a       	sbi	0x07, 7	; 7
    10ac:	47 98       	cbi	0x08, 7	; 8
    10ae:	4c dd       	rcall	.-1384   	; 0xb48 <USB_Init>
    10b0:	08 d9       	rcall	.-3568   	; 0x2c2 <lcd_init>
    10b2:	2f ef       	ldi	r18, 0xFF	; 255
    10b4:	81 ee       	ldi	r24, 0xE1	; 225
    10b6:	94 e0       	ldi	r25, 0x04	; 4
    10b8:	21 50       	subi	r18, 0x01	; 1
    10ba:	80 40       	sbci	r24, 0x00	; 0
    10bc:	90 40       	sbci	r25, 0x00	; 0
    10be:	e1 f7       	brne	.-8      	; 0x10b8 <SetupHardware+0x3e>
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <SetupHardware+0x48>
    10c2:	00 00       	nop
    10c4:	ef d8       	rcall	.-3618   	; 0x2a4 <lcd_clrscr>
    10c6:	8b e1       	ldi	r24, 0x1B	; 27
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	f0 d8       	rcall	.-3616   	; 0x2ac <lcd_puts>
    10cc:	84 b1       	in	r24, 0x04	; 4
    10ce:	80 67       	ori	r24, 0x70	; 112
    10d0:	84 b9       	out	0x04, r24	; 4
    10d2:	3e 9a       	sbi	0x07, 6	; 7
    10d4:	3f 98       	cbi	0x07, 7	; 7
    10d6:	2c 98       	cbi	0x05, 4	; 5
    10d8:	2e 98       	cbi	0x05, 6	; 5
    10da:	46 9a       	sbi	0x08, 6	; 8
    10dc:	08 95       	ret

000010de <SetupUSART1>:
    10de:	87 e6       	ldi	r24, 0x67	; 103
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a6 c9       	rjmp	.-3252   	; 0x430 <uart1_init>

000010e4 <Read_DualSlope>:
/** Function to make measurement with Dual Slope hardware. Returns Nana Terayza if error value. Duh. #BaconPancakes */
int8_t Read_DualSlope(void)
{
	bool polFlag = 0;		// used to track polarity
	// step 0, auto zero
	C_SETBIT(InhSwt);		// disconnect input
    10e4:	46 9a       	sbi	0x08, 6	; 8
	C_CLEARBIT(IntSwt);	
    10e6:	2c 98       	cbi	0x05, 4	; 5
	C_SETBIT(ZeroSwt);		// zero cap
    10e8:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ea:	2f ef       	ldi	r18, 0xFF	; 255
    10ec:	36 e7       	ldi	r19, 0x76	; 118
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	21 50       	subi	r18, 0x01	; 1
    10f2:	30 40       	sbci	r19, 0x00	; 0
    10f4:	80 40       	sbci	r24, 0x00	; 0
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <Read_DualSlope+0xc>
    10f8:	00 c0       	rjmp	.+0      	; 0x10fa <Read_DualSlope+0x16>
    10fa:	00 00       	nop
	_delay_ms(ZERO_TIME);	// wait some time
	C_CLEARBIT(ZeroSwt);	// zero off
    10fc:	2e 98       	cbi	0x05, 6	; 5

	// step 1, int for INT_TIME mS (80mS ?) 
	C_CLEARBIT(InhSwt);		// turn switch on
    10fe:	46 98       	cbi	0x08, 6	; 8
	C_SETBIT(IntSwt);		// select input
    1100:	2c 9a       	sbi	0x05, 4	; 5
    1102:	9f ef       	ldi	r25, 0xFF	; 255
    1104:	23 ef       	ldi	r18, 0xF3	; 243
    1106:	31 e0       	ldi	r19, 0x01	; 1
    1108:	91 50       	subi	r25, 0x01	; 1
    110a:	20 40       	sbci	r18, 0x00	; 0
    110c:	30 40       	sbci	r19, 0x00	; 0
    110e:	e1 f7       	brne	.-8      	; 0x1108 <Read_DualSlope+0x24>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <Read_DualSlope+0x2e>
    1112:	00 00       	nop
	_delay_ms(INT_TIME/2);	// wait int time/2
	// half way, check polarity
	if(C_CHECKBIT(CompIn)){ // -ve pol
    1114:	47 9b       	sbis	0x08, 7	; 8
    1116:	03 c0       	rjmp	.+6      	; 0x111e <Read_DualSlope+0x3a>
		C_SETBIT(VrefSwt);
    1118:	2d 9a       	sbi	0x05, 5	; 5
		polFlag = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <Read_DualSlope+0x3e>
	}else{ // +ve pol
		C_CLEARBIT(VrefSwt);
    111e:	2d 98       	cbi	0x05, 5	; 5
		polFlag = 0;
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	9f ef       	ldi	r25, 0xFF	; 255
    1124:	23 ef       	ldi	r18, 0xF3	; 243
    1126:	31 e0       	ldi	r19, 0x01	; 1
    1128:	91 50       	subi	r25, 0x01	; 1
    112a:	20 40       	sbci	r18, 0x00	; 0
    112c:	30 40       	sbci	r19, 0x00	; 0
    112e:	e1 f7       	brne	.-8      	; 0x1128 <Read_DualSlope+0x44>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <Read_DualSlope+0x4e>
    1132:	00 00       	nop
	}
	_delay_ms(INT_TIME/2); // wait int time/2
	
	// step 2, dint for up to 160mS waiting for 0 crossing
	C_CLEARBIT(IntSwt);		// select dint
    1134:	2c 98       	cbi	0x05, 4	; 5
    1136:	9f ef       	ldi	r25, 0xFF	; 255
    1138:	2f ec       	ldi	r18, 0xCF	; 207
    113a:	37 e0       	ldi	r19, 0x07	; 7
    113c:	91 50       	subi	r25, 0x01	; 1
    113e:	20 40       	sbci	r18, 0x00	; 0
    1140:	30 40       	sbci	r19, 0x00	; 0
    1142:	e1 f7       	brne	.-8      	; 0x113c <Read_DualSlope+0x58>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <Read_DualSlope+0x62>
    1146:	00 00       	nop
	_delay_ms(DINT_TIME);
	
	// step 3, calc and output
	int8_t result = 956;
	
	if(polFlag){//-ve
    1148:	88 23       	and	r24, r24
    114a:	11 f0       	breq	.+4      	; 0x1150 <Read_DualSlope+0x6c>
		return result*-1;
    114c:	84 e4       	ldi	r24, 0x44	; 68
    114e:	08 95       	ret
	}else{//+ve
		return result;
    1150:	8c eb       	ldi	r24, 0xBC	; 188
	}
	
}
    1152:	08 95       	ret

00001154 <SendValLCD>:

void SendValLCD(int8_t val){
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	18 2f       	mov	r17, r24
	// we need to send data to the lcd in the correct structure
	
	// send command first
	uart1_putc(CMD_RESULT0);
    115c:	80 ea       	ldi	r24, 0xA0	; 160
    115e:	81 d9       	rcall	.-3326   	; 0x462 <uart1_putc>
	uart1_putc(CMD_RESULT1);
    1160:	82 ea       	ldi	r24, 0xA2	; 162
    1162:	7f d9       	rcall	.-3330   	; 0x462 <uart1_putc>
	
	// now send data
	uart1_putc(0x0F & val >> 12);
    1164:	c1 2f       	mov	r28, r17
    1166:	dd 27       	eor	r29, r29
    1168:	c7 fd       	sbrc	r28, 7
    116a:	d0 95       	com	r29
    116c:	8d 2f       	mov	r24, r29
    116e:	82 95       	swap	r24
    1170:	8f 70       	andi	r24, 0x0F	; 15
    1172:	77 d9       	rcall	.-3346   	; 0x462 <uart1_putc>
	uart1_putc(0x0F & val >> 8);
    1174:	8d 2f       	mov	r24, r29
    1176:	8f 70       	andi	r24, 0x0F	; 15
    1178:	74 d9       	rcall	.-3352   	; 0x462 <uart1_putc>
	uart1_putc(0x0F & val >> 4);
    117a:	81 2f       	mov	r24, r17
    117c:	82 95       	swap	r24
    117e:	8f 70       	andi	r24, 0x0F	; 15
    1180:	70 d9       	rcall	.-3360   	; 0x462 <uart1_putc>
	uart1_putc(0x0F & val );
    1182:	81 2f       	mov	r24, r17
    1184:	8f 70       	andi	r24, 0x0F	; 15
}
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
	
	// now send data
	uart1_putc(0x0F & val >> 12);
	uart1_putc(0x0F & val >> 8);
	uart1_putc(0x0F & val >> 4);
	uart1_putc(0x0F & val );
    118c:	6a c9       	rjmp	.-3372   	; 0x462 <uart1_putc>

0000118e <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	2a 97       	sbiw	r28, 0x0a	; 10
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
    11a2:	6b df       	rcall	.-298    	; 0x107a <SetupHardware>
	SetupUSART1();
    11a4:	9c df       	rcall	.-200    	; 0x10de <SetupUSART1>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    11a6:	63 ea       	ldi	r22, 0xA3	; 163
    11a8:	71 e0       	ldi	r23, 0x01	; 1
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	4c da       	rcall	.-2920   	; 0x648 <CDC_Device_CreateStream>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	4f df       	rcall	.-354    	; 0x1052 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    11b4:	78 94       	sei
	GlobalInterruptEnable();
	fputs("Welcome to Our Dual Slope Controller! \r\n", &USBSerialStream);
    11b6:	63 ea       	ldi	r22, 0xA3	; 163
    11b8:	71 e0       	ldi	r23, 0x01	; 1
    11ba:	88 e2       	ldi	r24, 0x28	; 40
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	a1 d1       	rcall	.+834    	; 0x1502 <fputs>
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
    11c0:	99 24       	eor	r9, r9
    11c2:	93 94       	inc	r9
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
    11c4:	80 e2       	ldi	r24, 0x20	; 32
    11c6:	a8 2e       	mov	r10, r24
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
    11c8:	90 e8       	ldi	r25, 0x80	; 128
    11ca:	b9 2e       	mov	r11, r25
		time++;
		_delay_ms(250);
		lcd_clrscr();
		lcd_puts("Hi ");
		char buffer[10];
		itoa(time,buffer,10);
    11cc:	8e 01       	movw	r16, r28
    11ce:	0f 5f       	subi	r16, 0xFF	; 255
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_puts(buffer);
		lcd_goto(0x40); // second line
		res = Read_DualSlope();
		SendValLCD(res);
		double result1 = res * 4.6875; // convert result to mV
		sprintf(buffer,"%f",result1); 
    11d2:	25 e5       	ldi	r18, 0x55	; 85
    11d4:	e2 2e       	mov	r14, r18
    11d6:	21 e0       	ldi	r18, 0x01	; 1
    11d8:	f2 2e       	mov	r15, r18
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
    11da:	93 b8       	out	0x03, r9	; 3
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
    11dc:	a9 b8       	out	0x09, r10	; 9
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
    11de:	b6 b8       	out	0x06, r11	; 6
	uint16_t time; 
	for (;;)
	{
		//CheckJoystickMovement();
		LEDs_ToggleLEDs(LEDS_LED1|LEDS_LED2|LEDS_LED3);
		time++;
    11e0:	2f ef       	ldi	r18, 0xFF	; 255
    11e2:	c2 1a       	sub	r12, r18
    11e4:	d2 0a       	sbc	r13, r18
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	94 e3       	ldi	r25, 0x34	; 52
    11ea:	2c e0       	ldi	r18, 0x0C	; 12
    11ec:	81 50       	subi	r24, 0x01	; 1
    11ee:	90 40       	sbci	r25, 0x00	; 0
    11f0:	20 40       	sbci	r18, 0x00	; 0
    11f2:	e1 f7       	brne	.-8      	; 0x11ec <main+0x5e>
    11f4:	00 c0       	rjmp	.+0      	; 0x11f6 <main+0x68>
    11f6:	00 00       	nop
		_delay_ms(250);
		lcd_clrscr();
    11f8:	55 d8       	rcall	.-3926   	; 0x2a4 <lcd_clrscr>
		lcd_puts("Hi ");
    11fa:	81 e5       	ldi	r24, 0x51	; 81
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	56 d8       	rcall	.-3924   	; 0x2ac <lcd_puts>
		char buffer[10];
		itoa(time,buffer,10);
    1200:	4a e0       	ldi	r20, 0x0A	; 10
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	b8 01       	movw	r22, r16
    1206:	c6 01       	movw	r24, r12
    1208:	4f d1       	rcall	.+670    	; 0x14a8 <itoa>
		lcd_puts(buffer);
    120a:	c8 01       	movw	r24, r16
    120c:	4f d8       	rcall	.-3938   	; 0x2ac <lcd_puts>
		lcd_goto(0x40); // second line
    120e:	80 e4       	ldi	r24, 0x40	; 64
    1210:	47 d8       	rcall	.-3954   	; 0x2a0 <lcd_goto>
		res = Read_DualSlope();
    1212:	68 df       	rcall	.-304    	; 0x10e4 <Read_DualSlope>
    1214:	80 93 be 01 	sts	0x01BE, r24
		SendValLCD(res);
    1218:	9d df       	rcall	.-198    	; 0x1154 <SendValLCD>
		double result1 = res * 4.6875; // convert result to mV
    121a:	60 91 be 01 	lds	r22, 0x01BE
    121e:	77 27       	eor	r23, r23
    1220:	67 fd       	sbrc	r22, 7
    1222:	70 95       	com	r23
    1224:	87 2f       	mov	r24, r23
    1226:	97 2f       	mov	r25, r23
    1228:	4a d0       	rcall	.+148    	; 0x12be <__floatsisf>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	46 e9       	ldi	r20, 0x96	; 150
    1230:	50 e4       	ldi	r21, 0x40	; 64
    1232:	80 d0       	rcall	.+256    	; 0x1334 <__mulsf3>
		sprintf(buffer,"%f",result1); 
    1234:	9f 93       	push	r25
    1236:	8f 93       	push	r24
    1238:	7f 93       	push	r23
    123a:	6f 93       	push	r22
    123c:	ff 92       	push	r15
    123e:	ef 92       	push	r14
    1240:	1f 93       	push	r17
    1242:	0f 93       	push	r16
    1244:	86 d1       	rcall	.+780    	; 0x1552 <sprintf>
		itoa(res,buffer, 10);
    1246:	80 91 be 01 	lds	r24, 0x01BE
    124a:	4a e0       	ldi	r20, 0x0A	; 10
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	b8 01       	movw	r22, r16
    1250:	99 27       	eor	r25, r25
    1252:	87 fd       	sbrc	r24, 7
    1254:	90 95       	com	r25
    1256:	28 d1       	rcall	.+592    	; 0x14a8 <itoa>
		fputs(buffer, &USBSerialStream);
    1258:	63 ea       	ldi	r22, 0xA3	; 163
    125a:	71 e0       	ldi	r23, 0x01	; 1
    125c:	c8 01       	movw	r24, r16
    125e:	51 d1       	rcall	.+674    	; 0x1502 <fputs>
		fputs("mV \r\n", &USBSerialStream);
    1260:	63 ea       	ldi	r22, 0xA3	; 163
    1262:	71 e0       	ldi	r23, 0x01	; 1
    1264:	88 e5       	ldi	r24, 0x58	; 88
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	4c d1       	rcall	.+664    	; 0x1502 <fputs>
		itoa(res,buffer, 10);
    126a:	80 91 be 01 	lds	r24, 0x01BE
    126e:	4a e0       	ldi	r20, 0x0A	; 10
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	b8 01       	movw	r22, r16
    1274:	99 27       	eor	r25, r25
    1276:	87 fd       	sbrc	r24, 7
    1278:	90 95       	com	r25
    127a:	16 d1       	rcall	.+556    	; 0x14a8 <itoa>
		lcd_puts(buffer);
    127c:	c8 01       	movw	r24, r16
    127e:	16 d8       	rcall	.-4052   	; 0x2ac <lcd_puts>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	a3 d9       	rcall	.-3258   	; 0x5cc <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	8a d9       	rcall	.-3308   	; 0x5a0 <CDC_Device_USBTask>
		USB_USBTask();
    128c:	c6 de       	rcall	.-628    	; 0x101a <USB_USBTask>
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	a0 cf       	rjmp	.-192    	; 0x11da <main+0x4c>

0000129a <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
    129a:	80 ea       	ldi	r24, 0xA0	; 160
    129c:	da ce       	rjmp	.-588    	; 0x1052 <LEDs_SetAllLEDs>

0000129e <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	d8 ce       	rjmp	.-592    	; 0x1052 <LEDs_SetAllLEDs>

000012a2 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	f2 d8       	rcall	.-3612   	; 0x48c <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    12a8:	88 23       	and	r24, r24
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <EVENT_USB_Device_ConfigurationChanged+0xe>
    12ac:	80 e2       	ldi	r24, 0x20	; 32
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <EVENT_USB_Device_ConfigurationChanged+0x10>
    12b0:	81 e8       	ldi	r24, 0x81	; 129
    12b2:	cf ce       	rjmp	.-610    	; 0x1052 <LEDs_SetAllLEDs>

000012b4 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	91 e0       	ldi	r25, 0x01	; 1
    12b8:	db c9       	rjmp	.-3146   	; 0x670 <CDC_Device_ProcessControlRequest>

000012ba <__floatunsisf>:
    12ba:	e8 94       	clt
    12bc:	09 c0       	rjmp	.+18     	; 0x12d0 <__floatsisf+0x12>

000012be <__floatsisf>:
    12be:	97 fb       	bst	r25, 7
    12c0:	3e f4       	brtc	.+14     	; 0x12d0 <__floatsisf+0x12>
    12c2:	90 95       	com	r25
    12c4:	80 95       	com	r24
    12c6:	70 95       	com	r23
    12c8:	61 95       	neg	r22
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	99 23       	and	r25, r25
    12d2:	a9 f0       	breq	.+42     	; 0x12fe <__floatsisf+0x40>
    12d4:	f9 2f       	mov	r31, r25
    12d6:	96 e9       	ldi	r25, 0x96	; 150
    12d8:	bb 27       	eor	r27, r27
    12da:	93 95       	inc	r25
    12dc:	f6 95       	lsr	r31
    12de:	87 95       	ror	r24
    12e0:	77 95       	ror	r23
    12e2:	67 95       	ror	r22
    12e4:	b7 95       	ror	r27
    12e6:	f1 11       	cpse	r31, r1
    12e8:	f8 cf       	rjmp	.-16     	; 0x12da <__floatsisf+0x1c>
    12ea:	fa f4       	brpl	.+62     	; 0x132a <__floatsisf+0x6c>
    12ec:	bb 0f       	add	r27, r27
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <__floatsisf+0x36>
    12f0:	60 ff       	sbrs	r22, 0
    12f2:	1b c0       	rjmp	.+54     	; 0x132a <__floatsisf+0x6c>
    12f4:	6f 5f       	subi	r22, 0xFF	; 255
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	8f 4f       	sbci	r24, 0xFF	; 255
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	16 c0       	rjmp	.+44     	; 0x132a <__floatsisf+0x6c>
    12fe:	88 23       	and	r24, r24
    1300:	11 f0       	breq	.+4      	; 0x1306 <__floatsisf+0x48>
    1302:	96 e9       	ldi	r25, 0x96	; 150
    1304:	11 c0       	rjmp	.+34     	; 0x1328 <__floatsisf+0x6a>
    1306:	77 23       	and	r23, r23
    1308:	21 f0       	breq	.+8      	; 0x1312 <__floatsisf+0x54>
    130a:	9e e8       	ldi	r25, 0x8E	; 142
    130c:	87 2f       	mov	r24, r23
    130e:	76 2f       	mov	r23, r22
    1310:	05 c0       	rjmp	.+10     	; 0x131c <__floatsisf+0x5e>
    1312:	66 23       	and	r22, r22
    1314:	71 f0       	breq	.+28     	; 0x1332 <__floatsisf+0x74>
    1316:	96 e8       	ldi	r25, 0x86	; 134
    1318:	86 2f       	mov	r24, r22
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	2a f0       	brmi	.+10     	; 0x132a <__floatsisf+0x6c>
    1320:	9a 95       	dec	r25
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	88 1f       	adc	r24, r24
    1328:	da f7       	brpl	.-10     	; 0x1320 <__floatsisf+0x62>
    132a:	88 0f       	add	r24, r24
    132c:	96 95       	lsr	r25
    132e:	87 95       	ror	r24
    1330:	97 f9       	bld	r25, 7
    1332:	08 95       	ret

00001334 <__mulsf3>:
    1334:	0b d0       	rcall	.+22     	; 0x134c <__mulsf3x>
    1336:	78 c0       	rjmp	.+240    	; 0x1428 <__fp_round>
    1338:	69 d0       	rcall	.+210    	; 0x140c <__fp_pscA>
    133a:	28 f0       	brcs	.+10     	; 0x1346 <__mulsf3+0x12>
    133c:	6e d0       	rcall	.+220    	; 0x141a <__fp_pscB>
    133e:	18 f0       	brcs	.+6      	; 0x1346 <__mulsf3+0x12>
    1340:	95 23       	and	r25, r21
    1342:	09 f0       	breq	.+2      	; 0x1346 <__mulsf3+0x12>
    1344:	5a c0       	rjmp	.+180    	; 0x13fa <__fp_inf>
    1346:	5f c0       	rjmp	.+190    	; 0x1406 <__fp_nan>
    1348:	11 24       	eor	r1, r1
    134a:	a2 c0       	rjmp	.+324    	; 0x1490 <__fp_szero>

0000134c <__mulsf3x>:
    134c:	7e d0       	rcall	.+252    	; 0x144a <__fp_split3>
    134e:	a0 f3       	brcs	.-24     	; 0x1338 <__mulsf3+0x4>

00001350 <__mulsf3_pse>:
    1350:	95 9f       	mul	r25, r21
    1352:	d1 f3       	breq	.-12     	; 0x1348 <__mulsf3+0x14>
    1354:	95 0f       	add	r25, r21
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	55 1f       	adc	r21, r21
    135a:	62 9f       	mul	r22, r18
    135c:	f0 01       	movw	r30, r0
    135e:	72 9f       	mul	r23, r18
    1360:	bb 27       	eor	r27, r27
    1362:	f0 0d       	add	r31, r0
    1364:	b1 1d       	adc	r27, r1
    1366:	63 9f       	mul	r22, r19
    1368:	aa 27       	eor	r26, r26
    136a:	f0 0d       	add	r31, r0
    136c:	b1 1d       	adc	r27, r1
    136e:	aa 1f       	adc	r26, r26
    1370:	64 9f       	mul	r22, r20
    1372:	66 27       	eor	r22, r22
    1374:	b0 0d       	add	r27, r0
    1376:	a1 1d       	adc	r26, r1
    1378:	66 1f       	adc	r22, r22
    137a:	82 9f       	mul	r24, r18
    137c:	22 27       	eor	r18, r18
    137e:	b0 0d       	add	r27, r0
    1380:	a1 1d       	adc	r26, r1
    1382:	62 1f       	adc	r22, r18
    1384:	73 9f       	mul	r23, r19
    1386:	b0 0d       	add	r27, r0
    1388:	a1 1d       	adc	r26, r1
    138a:	62 1f       	adc	r22, r18
    138c:	83 9f       	mul	r24, r19
    138e:	a0 0d       	add	r26, r0
    1390:	61 1d       	adc	r22, r1
    1392:	22 1f       	adc	r18, r18
    1394:	74 9f       	mul	r23, r20
    1396:	33 27       	eor	r19, r19
    1398:	a0 0d       	add	r26, r0
    139a:	61 1d       	adc	r22, r1
    139c:	23 1f       	adc	r18, r19
    139e:	84 9f       	mul	r24, r20
    13a0:	60 0d       	add	r22, r0
    13a2:	21 1d       	adc	r18, r1
    13a4:	82 2f       	mov	r24, r18
    13a6:	76 2f       	mov	r23, r22
    13a8:	6a 2f       	mov	r22, r26
    13aa:	11 24       	eor	r1, r1
    13ac:	9f 57       	subi	r25, 0x7F	; 127
    13ae:	50 40       	sbci	r21, 0x00	; 0
    13b0:	8a f0       	brmi	.+34     	; 0x13d4 <__mulsf3_pse+0x84>
    13b2:	e1 f0       	breq	.+56     	; 0x13ec <__mulsf3_pse+0x9c>
    13b4:	88 23       	and	r24, r24
    13b6:	4a f0       	brmi	.+18     	; 0x13ca <__mulsf3_pse+0x7a>
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	bb 1f       	adc	r27, r27
    13be:	66 1f       	adc	r22, r22
    13c0:	77 1f       	adc	r23, r23
    13c2:	88 1f       	adc	r24, r24
    13c4:	91 50       	subi	r25, 0x01	; 1
    13c6:	50 40       	sbci	r21, 0x00	; 0
    13c8:	a9 f7       	brne	.-22     	; 0x13b4 <__mulsf3_pse+0x64>
    13ca:	9e 3f       	cpi	r25, 0xFE	; 254
    13cc:	51 05       	cpc	r21, r1
    13ce:	70 f0       	brcs	.+28     	; 0x13ec <__mulsf3_pse+0x9c>
    13d0:	14 c0       	rjmp	.+40     	; 0x13fa <__fp_inf>
    13d2:	5e c0       	rjmp	.+188    	; 0x1490 <__fp_szero>
    13d4:	5f 3f       	cpi	r21, 0xFF	; 255
    13d6:	ec f3       	brlt	.-6      	; 0x13d2 <__mulsf3_pse+0x82>
    13d8:	98 3e       	cpi	r25, 0xE8	; 232
    13da:	dc f3       	brlt	.-10     	; 0x13d2 <__mulsf3_pse+0x82>
    13dc:	86 95       	lsr	r24
    13de:	77 95       	ror	r23
    13e0:	67 95       	ror	r22
    13e2:	b7 95       	ror	r27
    13e4:	f7 95       	ror	r31
    13e6:	e7 95       	ror	r30
    13e8:	9f 5f       	subi	r25, 0xFF	; 255
    13ea:	c1 f7       	brne	.-16     	; 0x13dc <__mulsf3_pse+0x8c>
    13ec:	fe 2b       	or	r31, r30
    13ee:	88 0f       	add	r24, r24
    13f0:	91 1d       	adc	r25, r1
    13f2:	96 95       	lsr	r25
    13f4:	87 95       	ror	r24
    13f6:	97 f9       	bld	r25, 7
    13f8:	08 95       	ret

000013fa <__fp_inf>:
    13fa:	97 f9       	bld	r25, 7
    13fc:	9f 67       	ori	r25, 0x7F	; 127
    13fe:	80 e8       	ldi	r24, 0x80	; 128
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	08 95       	ret

00001406 <__fp_nan>:
    1406:	9f ef       	ldi	r25, 0xFF	; 255
    1408:	80 ec       	ldi	r24, 0xC0	; 192
    140a:	08 95       	ret

0000140c <__fp_pscA>:
    140c:	00 24       	eor	r0, r0
    140e:	0a 94       	dec	r0
    1410:	16 16       	cp	r1, r22
    1412:	17 06       	cpc	r1, r23
    1414:	18 06       	cpc	r1, r24
    1416:	09 06       	cpc	r0, r25
    1418:	08 95       	ret

0000141a <__fp_pscB>:
    141a:	00 24       	eor	r0, r0
    141c:	0a 94       	dec	r0
    141e:	12 16       	cp	r1, r18
    1420:	13 06       	cpc	r1, r19
    1422:	14 06       	cpc	r1, r20
    1424:	05 06       	cpc	r0, r21
    1426:	08 95       	ret

00001428 <__fp_round>:
    1428:	09 2e       	mov	r0, r25
    142a:	03 94       	inc	r0
    142c:	00 0c       	add	r0, r0
    142e:	11 f4       	brne	.+4      	; 0x1434 <__fp_round+0xc>
    1430:	88 23       	and	r24, r24
    1432:	52 f0       	brmi	.+20     	; 0x1448 <__fp_round+0x20>
    1434:	bb 0f       	add	r27, r27
    1436:	40 f4       	brcc	.+16     	; 0x1448 <__fp_round+0x20>
    1438:	bf 2b       	or	r27, r31
    143a:	11 f4       	brne	.+4      	; 0x1440 <__fp_round+0x18>
    143c:	60 ff       	sbrs	r22, 0
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <__fp_round+0x20>
    1440:	6f 5f       	subi	r22, 0xFF	; 255
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	8f 4f       	sbci	r24, 0xFF	; 255
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	08 95       	ret

0000144a <__fp_split3>:
    144a:	57 fd       	sbrc	r21, 7
    144c:	90 58       	subi	r25, 0x80	; 128
    144e:	44 0f       	add	r20, r20
    1450:	55 1f       	adc	r21, r21
    1452:	59 f0       	breq	.+22     	; 0x146a <__fp_splitA+0x10>
    1454:	5f 3f       	cpi	r21, 0xFF	; 255
    1456:	71 f0       	breq	.+28     	; 0x1474 <__fp_splitA+0x1a>
    1458:	47 95       	ror	r20

0000145a <__fp_splitA>:
    145a:	88 0f       	add	r24, r24
    145c:	97 fb       	bst	r25, 7
    145e:	99 1f       	adc	r25, r25
    1460:	61 f0       	breq	.+24     	; 0x147a <__fp_splitA+0x20>
    1462:	9f 3f       	cpi	r25, 0xFF	; 255
    1464:	79 f0       	breq	.+30     	; 0x1484 <__fp_splitA+0x2a>
    1466:	87 95       	ror	r24
    1468:	08 95       	ret
    146a:	12 16       	cp	r1, r18
    146c:	13 06       	cpc	r1, r19
    146e:	14 06       	cpc	r1, r20
    1470:	55 1f       	adc	r21, r21
    1472:	f2 cf       	rjmp	.-28     	; 0x1458 <__fp_split3+0xe>
    1474:	46 95       	lsr	r20
    1476:	f1 df       	rcall	.-30     	; 0x145a <__fp_splitA>
    1478:	08 c0       	rjmp	.+16     	; 0x148a <__fp_splitA+0x30>
    147a:	16 16       	cp	r1, r22
    147c:	17 06       	cpc	r1, r23
    147e:	18 06       	cpc	r1, r24
    1480:	99 1f       	adc	r25, r25
    1482:	f1 cf       	rjmp	.-30     	; 0x1466 <__fp_splitA+0xc>
    1484:	86 95       	lsr	r24
    1486:	71 05       	cpc	r23, r1
    1488:	61 05       	cpc	r22, r1
    148a:	08 94       	sec
    148c:	08 95       	ret

0000148e <__fp_zero>:
    148e:	e8 94       	clt

00001490 <__fp_szero>:
    1490:	bb 27       	eor	r27, r27
    1492:	66 27       	eor	r22, r22
    1494:	77 27       	eor	r23, r23
    1496:	cb 01       	movw	r24, r22
    1498:	97 f9       	bld	r25, 7
    149a:	08 95       	ret

0000149c <__tablejump2__>:
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31

000014a0 <__tablejump__>:
    14a0:	05 90       	lpm	r0, Z+
    14a2:	f4 91       	lpm	r31, Z
    14a4:	e0 2d       	mov	r30, r0
    14a6:	09 94       	ijmp

000014a8 <itoa>:
    14a8:	45 32       	cpi	r20, 0x25	; 37
    14aa:	51 05       	cpc	r21, r1
    14ac:	18 f4       	brcc	.+6      	; 0x14b4 <itoa+0xc>
    14ae:	42 30       	cpi	r20, 0x02	; 2
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <itoa+0xc>
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <__itoa_ncheck>
    14b4:	fb 01       	movw	r30, r22
    14b6:	10 82       	st	Z, r1
    14b8:	cb 01       	movw	r24, r22
    14ba:	08 95       	ret

000014bc <__itoa_ncheck>:
    14bc:	bb 27       	eor	r27, r27
    14be:	4a 30       	cpi	r20, 0x0A	; 10
    14c0:	31 f4       	brne	.+12     	; 0x14ce <__itoa_ncheck+0x12>
    14c2:	99 23       	and	r25, r25
    14c4:	22 f4       	brpl	.+8      	; 0x14ce <__itoa_ncheck+0x12>
    14c6:	bd e2       	ldi	r27, 0x2D	; 45
    14c8:	90 95       	com	r25
    14ca:	81 95       	neg	r24
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <__utoa_common>

000014d0 <__utoa_ncheck>:
    14d0:	bb 27       	eor	r27, r27

000014d2 <__utoa_common>:
    14d2:	fb 01       	movw	r30, r22
    14d4:	55 27       	eor	r21, r21
    14d6:	aa 27       	eor	r26, r26
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	aa 1f       	adc	r26, r26
    14de:	a4 17       	cp	r26, r20
    14e0:	10 f0       	brcs	.+4      	; 0x14e6 <__utoa_common+0x14>
    14e2:	a4 1b       	sub	r26, r20
    14e4:	83 95       	inc	r24
    14e6:	50 51       	subi	r21, 0x10	; 16
    14e8:	b9 f7       	brne	.-18     	; 0x14d8 <__utoa_common+0x6>
    14ea:	a0 5d       	subi	r26, 0xD0	; 208
    14ec:	aa 33       	cpi	r26, 0x3A	; 58
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <__utoa_common+0x20>
    14f0:	a9 5d       	subi	r26, 0xD9	; 217
    14f2:	a1 93       	st	Z+, r26
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	79 f7       	brne	.-34     	; 0x14d6 <__utoa_common+0x4>
    14f8:	b1 11       	cpse	r27, r1
    14fa:	b1 93       	st	Z+, r27
    14fc:	11 92       	st	Z+, r1
    14fe:	cb 01       	movw	r24, r22
    1500:	20 c2       	rjmp	.+1088   	; 0x1942 <strrev>

00001502 <fputs>:
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	8b 01       	movw	r16, r22
    1510:	db 01       	movw	r26, r22
    1512:	13 96       	adiw	r26, 0x03	; 3
    1514:	2c 91       	ld	r18, X
    1516:	21 ff       	sbrs	r18, 1
    1518:	16 c0       	rjmp	.+44     	; 0x1546 <fputs+0x44>
    151a:	ec 01       	movw	r28, r24
    151c:	e1 2c       	mov	r14, r1
    151e:	f1 2c       	mov	r15, r1
    1520:	89 91       	ld	r24, Y+
    1522:	88 23       	and	r24, r24
    1524:	71 f0       	breq	.+28     	; 0x1542 <fputs+0x40>
    1526:	d8 01       	movw	r26, r16
    1528:	18 96       	adiw	r26, 0x08	; 8
    152a:	ed 91       	ld	r30, X+
    152c:	fc 91       	ld	r31, X
    152e:	19 97       	sbiw	r26, 0x09	; 9
    1530:	b8 01       	movw	r22, r16
    1532:	09 95       	icall
    1534:	89 2b       	or	r24, r25
    1536:	a1 f3       	breq	.-24     	; 0x1520 <fputs+0x1e>
    1538:	ee 24       	eor	r14, r14
    153a:	ea 94       	dec	r14
    153c:	ff 24       	eor	r15, r15
    153e:	fa 94       	dec	r15
    1540:	ef cf       	rjmp	.-34     	; 0x1520 <fputs+0x1e>
    1542:	c7 01       	movw	r24, r14
    1544:	02 c0       	rjmp	.+4      	; 0x154a <fputs+0x48>
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	9f ef       	ldi	r25, 0xFF	; 255
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	e6 e0       	ldi	r30, 0x06	; 6
    1550:	c0 c2       	rjmp	.+1408   	; 0x1ad2 <__epilogue_restores__+0x18>

00001552 <sprintf>:
    1552:	ae e0       	ldi	r26, 0x0E	; 14
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ee ea       	ldi	r30, 0xAE	; 174
    1558:	fa e0       	ldi	r31, 0x0A	; 10
    155a:	a1 c2       	rjmp	.+1346   	; 0x1a9e <__prologue_saves__+0x1c>
    155c:	0d 89       	ldd	r16, Y+21	; 0x15
    155e:	1e 89       	ldd	r17, Y+22	; 0x16
    1560:	86 e0       	ldi	r24, 0x06	; 6
    1562:	8c 83       	std	Y+4, r24	; 0x04
    1564:	1a 83       	std	Y+2, r17	; 0x02
    1566:	09 83       	std	Y+1, r16	; 0x01
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	9f e7       	ldi	r25, 0x7F	; 127
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	ae 01       	movw	r20, r28
    1572:	47 5e       	subi	r20, 0xE7	; 231
    1574:	5f 4f       	sbci	r21, 0xFF	; 255
    1576:	6f 89       	ldd	r22, Y+23	; 0x17
    1578:	78 8d       	ldd	r23, Y+24	; 0x18
    157a:	ce 01       	movw	r24, r28
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	08 d0       	rcall	.+16     	; 0x1590 <vfprintf>
    1580:	ef 81       	ldd	r30, Y+7	; 0x07
    1582:	f8 85       	ldd	r31, Y+8	; 0x08
    1584:	e0 0f       	add	r30, r16
    1586:	f1 1f       	adc	r31, r17
    1588:	10 82       	st	Z, r1
    158a:	2e 96       	adiw	r28, 0x0e	; 14
    158c:	e4 e0       	ldi	r30, 0x04	; 4
    158e:	a3 c2       	rjmp	.+1350   	; 0x1ad6 <__epilogue_restores__+0x1c>

00001590 <vfprintf>:
    1590:	ac e0       	ldi	r26, 0x0C	; 12
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ed ec       	ldi	r30, 0xCD	; 205
    1596:	fa e0       	ldi	r31, 0x0A	; 10
    1598:	74 c2       	rjmp	.+1256   	; 0x1a82 <__prologue_saves__>
    159a:	7c 01       	movw	r14, r24
    159c:	6b 01       	movw	r12, r22
    159e:	8a 01       	movw	r16, r20
    15a0:	fc 01       	movw	r30, r24
    15a2:	17 82       	std	Z+7, r1	; 0x07
    15a4:	16 82       	std	Z+6, r1	; 0x06
    15a6:	83 81       	ldd	r24, Z+3	; 0x03
    15a8:	81 ff       	sbrs	r24, 1
    15aa:	b0 c1       	rjmp	.+864    	; 0x190c <vfprintf+0x37c>
    15ac:	ce 01       	movw	r24, r28
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	4c 01       	movw	r8, r24
    15b2:	f7 01       	movw	r30, r14
    15b4:	93 81       	ldd	r25, Z+3	; 0x03
    15b6:	f6 01       	movw	r30, r12
    15b8:	93 fd       	sbrc	r25, 3
    15ba:	85 91       	lpm	r24, Z+
    15bc:	93 ff       	sbrs	r25, 3
    15be:	81 91       	ld	r24, Z+
    15c0:	6f 01       	movw	r12, r30
    15c2:	88 23       	and	r24, r24
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <vfprintf+0x38>
    15c6:	9e c1       	rjmp	.+828    	; 0x1904 <vfprintf+0x374>
    15c8:	85 32       	cpi	r24, 0x25	; 37
    15ca:	39 f4       	brne	.+14     	; 0x15da <vfprintf+0x4a>
    15cc:	93 fd       	sbrc	r25, 3
    15ce:	85 91       	lpm	r24, Z+
    15d0:	93 ff       	sbrs	r25, 3
    15d2:	81 91       	ld	r24, Z+
    15d4:	6f 01       	movw	r12, r30
    15d6:	85 32       	cpi	r24, 0x25	; 37
    15d8:	21 f4       	brne	.+8      	; 0x15e2 <vfprintf+0x52>
    15da:	b7 01       	movw	r22, r14
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	c1 d1       	rcall	.+898    	; 0x1962 <fputc>
    15e0:	e8 cf       	rjmp	.-48     	; 0x15b2 <vfprintf+0x22>
    15e2:	51 2c       	mov	r5, r1
    15e4:	31 2c       	mov	r3, r1
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	20 32       	cpi	r18, 0x20	; 32
    15ea:	a0 f4       	brcc	.+40     	; 0x1614 <vfprintf+0x84>
    15ec:	8b 32       	cpi	r24, 0x2B	; 43
    15ee:	69 f0       	breq	.+26     	; 0x160a <vfprintf+0x7a>
    15f0:	30 f4       	brcc	.+12     	; 0x15fe <vfprintf+0x6e>
    15f2:	80 32       	cpi	r24, 0x20	; 32
    15f4:	59 f0       	breq	.+22     	; 0x160c <vfprintf+0x7c>
    15f6:	83 32       	cpi	r24, 0x23	; 35
    15f8:	69 f4       	brne	.+26     	; 0x1614 <vfprintf+0x84>
    15fa:	20 61       	ori	r18, 0x10	; 16
    15fc:	2c c0       	rjmp	.+88     	; 0x1656 <vfprintf+0xc6>
    15fe:	8d 32       	cpi	r24, 0x2D	; 45
    1600:	39 f0       	breq	.+14     	; 0x1610 <vfprintf+0x80>
    1602:	80 33       	cpi	r24, 0x30	; 48
    1604:	39 f4       	brne	.+14     	; 0x1614 <vfprintf+0x84>
    1606:	21 60       	ori	r18, 0x01	; 1
    1608:	26 c0       	rjmp	.+76     	; 0x1656 <vfprintf+0xc6>
    160a:	22 60       	ori	r18, 0x02	; 2
    160c:	24 60       	ori	r18, 0x04	; 4
    160e:	23 c0       	rjmp	.+70     	; 0x1656 <vfprintf+0xc6>
    1610:	28 60       	ori	r18, 0x08	; 8
    1612:	21 c0       	rjmp	.+66     	; 0x1656 <vfprintf+0xc6>
    1614:	27 fd       	sbrc	r18, 7
    1616:	27 c0       	rjmp	.+78     	; 0x1666 <vfprintf+0xd6>
    1618:	30 ed       	ldi	r19, 0xD0	; 208
    161a:	38 0f       	add	r19, r24
    161c:	3a 30       	cpi	r19, 0x0A	; 10
    161e:	78 f4       	brcc	.+30     	; 0x163e <vfprintf+0xae>
    1620:	26 ff       	sbrs	r18, 6
    1622:	06 c0       	rjmp	.+12     	; 0x1630 <vfprintf+0xa0>
    1624:	fa e0       	ldi	r31, 0x0A	; 10
    1626:	5f 9e       	mul	r5, r31
    1628:	30 0d       	add	r19, r0
    162a:	11 24       	eor	r1, r1
    162c:	53 2e       	mov	r5, r19
    162e:	13 c0       	rjmp	.+38     	; 0x1656 <vfprintf+0xc6>
    1630:	8a e0       	ldi	r24, 0x0A	; 10
    1632:	38 9e       	mul	r3, r24
    1634:	30 0d       	add	r19, r0
    1636:	11 24       	eor	r1, r1
    1638:	33 2e       	mov	r3, r19
    163a:	20 62       	ori	r18, 0x20	; 32
    163c:	0c c0       	rjmp	.+24     	; 0x1656 <vfprintf+0xc6>
    163e:	8e 32       	cpi	r24, 0x2E	; 46
    1640:	21 f4       	brne	.+8      	; 0x164a <vfprintf+0xba>
    1642:	26 fd       	sbrc	r18, 6
    1644:	5f c1       	rjmp	.+702    	; 0x1904 <vfprintf+0x374>
    1646:	20 64       	ori	r18, 0x40	; 64
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <vfprintf+0xc6>
    164a:	8c 36       	cpi	r24, 0x6C	; 108
    164c:	11 f4       	brne	.+4      	; 0x1652 <vfprintf+0xc2>
    164e:	20 68       	ori	r18, 0x80	; 128
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <vfprintf+0xc6>
    1652:	88 36       	cpi	r24, 0x68	; 104
    1654:	41 f4       	brne	.+16     	; 0x1666 <vfprintf+0xd6>
    1656:	f6 01       	movw	r30, r12
    1658:	93 fd       	sbrc	r25, 3
    165a:	85 91       	lpm	r24, Z+
    165c:	93 ff       	sbrs	r25, 3
    165e:	81 91       	ld	r24, Z+
    1660:	6f 01       	movw	r12, r30
    1662:	81 11       	cpse	r24, r1
    1664:	c1 cf       	rjmp	.-126    	; 0x15e8 <vfprintf+0x58>
    1666:	98 2f       	mov	r25, r24
    1668:	9f 7d       	andi	r25, 0xDF	; 223
    166a:	95 54       	subi	r25, 0x45	; 69
    166c:	93 30       	cpi	r25, 0x03	; 3
    166e:	28 f4       	brcc	.+10     	; 0x167a <vfprintf+0xea>
    1670:	0c 5f       	subi	r16, 0xFC	; 252
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
    1674:	ff e3       	ldi	r31, 0x3F	; 63
    1676:	f9 83       	std	Y+1, r31	; 0x01
    1678:	0d c0       	rjmp	.+26     	; 0x1694 <vfprintf+0x104>
    167a:	83 36       	cpi	r24, 0x63	; 99
    167c:	31 f0       	breq	.+12     	; 0x168a <vfprintf+0xfa>
    167e:	83 37       	cpi	r24, 0x73	; 115
    1680:	71 f0       	breq	.+28     	; 0x169e <vfprintf+0x10e>
    1682:	83 35       	cpi	r24, 0x53	; 83
    1684:	09 f0       	breq	.+2      	; 0x1688 <vfprintf+0xf8>
    1686:	57 c0       	rjmp	.+174    	; 0x1736 <vfprintf+0x1a6>
    1688:	21 c0       	rjmp	.+66     	; 0x16cc <vfprintf+0x13c>
    168a:	f8 01       	movw	r30, r16
    168c:	80 81       	ld	r24, Z
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	0e 5f       	subi	r16, 0xFE	; 254
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	44 24       	eor	r4, r4
    1696:	43 94       	inc	r4
    1698:	51 2c       	mov	r5, r1
    169a:	54 01       	movw	r10, r8
    169c:	14 c0       	rjmp	.+40     	; 0x16c6 <vfprintf+0x136>
    169e:	38 01       	movw	r6, r16
    16a0:	f2 e0       	ldi	r31, 0x02	; 2
    16a2:	6f 0e       	add	r6, r31
    16a4:	71 1c       	adc	r7, r1
    16a6:	f8 01       	movw	r30, r16
    16a8:	a0 80       	ld	r10, Z
    16aa:	b1 80       	ldd	r11, Z+1	; 0x01
    16ac:	26 ff       	sbrs	r18, 6
    16ae:	03 c0       	rjmp	.+6      	; 0x16b6 <vfprintf+0x126>
    16b0:	65 2d       	mov	r22, r5
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <vfprintf+0x12a>
    16b6:	6f ef       	ldi	r22, 0xFF	; 255
    16b8:	7f ef       	ldi	r23, 0xFF	; 255
    16ba:	c5 01       	movw	r24, r10
    16bc:	2c 87       	std	Y+12, r18	; 0x0c
    16be:	36 d1       	rcall	.+620    	; 0x192c <strnlen>
    16c0:	2c 01       	movw	r4, r24
    16c2:	83 01       	movw	r16, r6
    16c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    16c6:	2f 77       	andi	r18, 0x7F	; 127
    16c8:	22 2e       	mov	r2, r18
    16ca:	16 c0       	rjmp	.+44     	; 0x16f8 <vfprintf+0x168>
    16cc:	38 01       	movw	r6, r16
    16ce:	f2 e0       	ldi	r31, 0x02	; 2
    16d0:	6f 0e       	add	r6, r31
    16d2:	71 1c       	adc	r7, r1
    16d4:	f8 01       	movw	r30, r16
    16d6:	a0 80       	ld	r10, Z
    16d8:	b1 80       	ldd	r11, Z+1	; 0x01
    16da:	26 ff       	sbrs	r18, 6
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <vfprintf+0x154>
    16de:	65 2d       	mov	r22, r5
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <vfprintf+0x158>
    16e4:	6f ef       	ldi	r22, 0xFF	; 255
    16e6:	7f ef       	ldi	r23, 0xFF	; 255
    16e8:	c5 01       	movw	r24, r10
    16ea:	2c 87       	std	Y+12, r18	; 0x0c
    16ec:	14 d1       	rcall	.+552    	; 0x1916 <strnlen_P>
    16ee:	2c 01       	movw	r4, r24
    16f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16f2:	20 68       	ori	r18, 0x80	; 128
    16f4:	22 2e       	mov	r2, r18
    16f6:	83 01       	movw	r16, r6
    16f8:	23 fc       	sbrc	r2, 3
    16fa:	19 c0       	rjmp	.+50     	; 0x172e <vfprintf+0x19e>
    16fc:	83 2d       	mov	r24, r3
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	48 16       	cp	r4, r24
    1702:	59 06       	cpc	r5, r25
    1704:	a0 f4       	brcc	.+40     	; 0x172e <vfprintf+0x19e>
    1706:	b7 01       	movw	r22, r14
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	2a d1       	rcall	.+596    	; 0x1962 <fputc>
    170e:	3a 94       	dec	r3
    1710:	f5 cf       	rjmp	.-22     	; 0x16fc <vfprintf+0x16c>
    1712:	f5 01       	movw	r30, r10
    1714:	27 fc       	sbrc	r2, 7
    1716:	85 91       	lpm	r24, Z+
    1718:	27 fe       	sbrs	r2, 7
    171a:	81 91       	ld	r24, Z+
    171c:	5f 01       	movw	r10, r30
    171e:	b7 01       	movw	r22, r14
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	1f d1       	rcall	.+574    	; 0x1962 <fputc>
    1724:	31 10       	cpse	r3, r1
    1726:	3a 94       	dec	r3
    1728:	f1 e0       	ldi	r31, 0x01	; 1
    172a:	4f 1a       	sub	r4, r31
    172c:	51 08       	sbc	r5, r1
    172e:	41 14       	cp	r4, r1
    1730:	51 04       	cpc	r5, r1
    1732:	79 f7       	brne	.-34     	; 0x1712 <vfprintf+0x182>
    1734:	de c0       	rjmp	.+444    	; 0x18f2 <vfprintf+0x362>
    1736:	84 36       	cpi	r24, 0x64	; 100
    1738:	11 f0       	breq	.+4      	; 0x173e <vfprintf+0x1ae>
    173a:	89 36       	cpi	r24, 0x69	; 105
    173c:	31 f5       	brne	.+76     	; 0x178a <vfprintf+0x1fa>
    173e:	f8 01       	movw	r30, r16
    1740:	27 ff       	sbrs	r18, 7
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <vfprintf+0x1c2>
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	82 81       	ldd	r24, Z+2	; 0x02
    174a:	93 81       	ldd	r25, Z+3	; 0x03
    174c:	0c 5f       	subi	r16, 0xFC	; 252
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	08 c0       	rjmp	.+16     	; 0x1762 <vfprintf+0x1d2>
    1752:	60 81       	ld	r22, Z
    1754:	71 81       	ldd	r23, Z+1	; 0x01
    1756:	88 27       	eor	r24, r24
    1758:	77 fd       	sbrc	r23, 7
    175a:	80 95       	com	r24
    175c:	98 2f       	mov	r25, r24
    175e:	0e 5f       	subi	r16, 0xFE	; 254
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	2f 76       	andi	r18, 0x6F	; 111
    1764:	b2 2e       	mov	r11, r18
    1766:	97 ff       	sbrs	r25, 7
    1768:	09 c0       	rjmp	.+18     	; 0x177c <vfprintf+0x1ec>
    176a:	90 95       	com	r25
    176c:	80 95       	com	r24
    176e:	70 95       	com	r23
    1770:	61 95       	neg	r22
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	8f 4f       	sbci	r24, 0xFF	; 255
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	20 68       	ori	r18, 0x80	; 128
    177a:	b2 2e       	mov	r11, r18
    177c:	2a e0       	ldi	r18, 0x0A	; 10
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	a4 01       	movw	r20, r8
    1782:	21 d1       	rcall	.+578    	; 0x19c6 <__ultoa_invert>
    1784:	a8 2e       	mov	r10, r24
    1786:	a8 18       	sub	r10, r8
    1788:	43 c0       	rjmp	.+134    	; 0x1810 <vfprintf+0x280>
    178a:	85 37       	cpi	r24, 0x75	; 117
    178c:	29 f4       	brne	.+10     	; 0x1798 <vfprintf+0x208>
    178e:	2f 7e       	andi	r18, 0xEF	; 239
    1790:	b2 2e       	mov	r11, r18
    1792:	2a e0       	ldi	r18, 0x0A	; 10
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	25 c0       	rjmp	.+74     	; 0x17e2 <vfprintf+0x252>
    1798:	f2 2f       	mov	r31, r18
    179a:	f9 7f       	andi	r31, 0xF9	; 249
    179c:	bf 2e       	mov	r11, r31
    179e:	8f 36       	cpi	r24, 0x6F	; 111
    17a0:	c1 f0       	breq	.+48     	; 0x17d2 <vfprintf+0x242>
    17a2:	18 f4       	brcc	.+6      	; 0x17aa <vfprintf+0x21a>
    17a4:	88 35       	cpi	r24, 0x58	; 88
    17a6:	79 f0       	breq	.+30     	; 0x17c6 <vfprintf+0x236>
    17a8:	ad c0       	rjmp	.+346    	; 0x1904 <vfprintf+0x374>
    17aa:	80 37       	cpi	r24, 0x70	; 112
    17ac:	19 f0       	breq	.+6      	; 0x17b4 <vfprintf+0x224>
    17ae:	88 37       	cpi	r24, 0x78	; 120
    17b0:	21 f0       	breq	.+8      	; 0x17ba <vfprintf+0x22a>
    17b2:	a8 c0       	rjmp	.+336    	; 0x1904 <vfprintf+0x374>
    17b4:	2f 2f       	mov	r18, r31
    17b6:	20 61       	ori	r18, 0x10	; 16
    17b8:	b2 2e       	mov	r11, r18
    17ba:	b4 fe       	sbrs	r11, 4
    17bc:	0d c0       	rjmp	.+26     	; 0x17d8 <vfprintf+0x248>
    17be:	8b 2d       	mov	r24, r11
    17c0:	84 60       	ori	r24, 0x04	; 4
    17c2:	b8 2e       	mov	r11, r24
    17c4:	09 c0       	rjmp	.+18     	; 0x17d8 <vfprintf+0x248>
    17c6:	24 ff       	sbrs	r18, 4
    17c8:	0a c0       	rjmp	.+20     	; 0x17de <vfprintf+0x24e>
    17ca:	9f 2f       	mov	r25, r31
    17cc:	96 60       	ori	r25, 0x06	; 6
    17ce:	b9 2e       	mov	r11, r25
    17d0:	06 c0       	rjmp	.+12     	; 0x17de <vfprintf+0x24e>
    17d2:	28 e0       	ldi	r18, 0x08	; 8
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <vfprintf+0x252>
    17d8:	20 e1       	ldi	r18, 0x10	; 16
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x252>
    17de:	20 e1       	ldi	r18, 0x10	; 16
    17e0:	32 e0       	ldi	r19, 0x02	; 2
    17e2:	f8 01       	movw	r30, r16
    17e4:	b7 fe       	sbrs	r11, 7
    17e6:	07 c0       	rjmp	.+14     	; 0x17f6 <vfprintf+0x266>
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	0c 5f       	subi	r16, 0xFC	; 252
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	06 c0       	rjmp	.+12     	; 0x1802 <vfprintf+0x272>
    17f6:	60 81       	ld	r22, Z
    17f8:	71 81       	ldd	r23, Z+1	; 0x01
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 5f       	subi	r16, 0xFE	; 254
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	a4 01       	movw	r20, r8
    1804:	e0 d0       	rcall	.+448    	; 0x19c6 <__ultoa_invert>
    1806:	a8 2e       	mov	r10, r24
    1808:	a8 18       	sub	r10, r8
    180a:	fb 2d       	mov	r31, r11
    180c:	ff 77       	andi	r31, 0x7F	; 127
    180e:	bf 2e       	mov	r11, r31
    1810:	b6 fe       	sbrs	r11, 6
    1812:	0b c0       	rjmp	.+22     	; 0x182a <vfprintf+0x29a>
    1814:	2b 2d       	mov	r18, r11
    1816:	2e 7f       	andi	r18, 0xFE	; 254
    1818:	a5 14       	cp	r10, r5
    181a:	50 f4       	brcc	.+20     	; 0x1830 <vfprintf+0x2a0>
    181c:	b4 fe       	sbrs	r11, 4
    181e:	0a c0       	rjmp	.+20     	; 0x1834 <vfprintf+0x2a4>
    1820:	b2 fc       	sbrc	r11, 2
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <vfprintf+0x2a4>
    1824:	2b 2d       	mov	r18, r11
    1826:	2e 7e       	andi	r18, 0xEE	; 238
    1828:	05 c0       	rjmp	.+10     	; 0x1834 <vfprintf+0x2a4>
    182a:	7a 2c       	mov	r7, r10
    182c:	2b 2d       	mov	r18, r11
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <vfprintf+0x2a6>
    1830:	7a 2c       	mov	r7, r10
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <vfprintf+0x2a6>
    1834:	75 2c       	mov	r7, r5
    1836:	24 ff       	sbrs	r18, 4
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <vfprintf+0x2c4>
    183a:	fe 01       	movw	r30, r28
    183c:	ea 0d       	add	r30, r10
    183e:	f1 1d       	adc	r31, r1
    1840:	80 81       	ld	r24, Z
    1842:	80 33       	cpi	r24, 0x30	; 48
    1844:	11 f4       	brne	.+4      	; 0x184a <vfprintf+0x2ba>
    1846:	29 7e       	andi	r18, 0xE9	; 233
    1848:	09 c0       	rjmp	.+18     	; 0x185c <vfprintf+0x2cc>
    184a:	22 ff       	sbrs	r18, 2
    184c:	06 c0       	rjmp	.+12     	; 0x185a <vfprintf+0x2ca>
    184e:	73 94       	inc	r7
    1850:	73 94       	inc	r7
    1852:	04 c0       	rjmp	.+8      	; 0x185c <vfprintf+0x2cc>
    1854:	82 2f       	mov	r24, r18
    1856:	86 78       	andi	r24, 0x86	; 134
    1858:	09 f0       	breq	.+2      	; 0x185c <vfprintf+0x2cc>
    185a:	73 94       	inc	r7
    185c:	23 fd       	sbrc	r18, 3
    185e:	12 c0       	rjmp	.+36     	; 0x1884 <vfprintf+0x2f4>
    1860:	20 ff       	sbrs	r18, 0
    1862:	06 c0       	rjmp	.+12     	; 0x1870 <vfprintf+0x2e0>
    1864:	5a 2c       	mov	r5, r10
    1866:	73 14       	cp	r7, r3
    1868:	18 f4       	brcc	.+6      	; 0x1870 <vfprintf+0x2e0>
    186a:	53 0c       	add	r5, r3
    186c:	57 18       	sub	r5, r7
    186e:	73 2c       	mov	r7, r3
    1870:	73 14       	cp	r7, r3
    1872:	60 f4       	brcc	.+24     	; 0x188c <vfprintf+0x2fc>
    1874:	b7 01       	movw	r22, r14
    1876:	80 e2       	ldi	r24, 0x20	; 32
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	2c 87       	std	Y+12, r18	; 0x0c
    187c:	72 d0       	rcall	.+228    	; 0x1962 <fputc>
    187e:	73 94       	inc	r7
    1880:	2c 85       	ldd	r18, Y+12	; 0x0c
    1882:	f6 cf       	rjmp	.-20     	; 0x1870 <vfprintf+0x2e0>
    1884:	73 14       	cp	r7, r3
    1886:	10 f4       	brcc	.+4      	; 0x188c <vfprintf+0x2fc>
    1888:	37 18       	sub	r3, r7
    188a:	01 c0       	rjmp	.+2      	; 0x188e <vfprintf+0x2fe>
    188c:	31 2c       	mov	r3, r1
    188e:	24 ff       	sbrs	r18, 4
    1890:	11 c0       	rjmp	.+34     	; 0x18b4 <vfprintf+0x324>
    1892:	b7 01       	movw	r22, r14
    1894:	80 e3       	ldi	r24, 0x30	; 48
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	2c 87       	std	Y+12, r18	; 0x0c
    189a:	63 d0       	rcall	.+198    	; 0x1962 <fputc>
    189c:	2c 85       	ldd	r18, Y+12	; 0x0c
    189e:	22 ff       	sbrs	r18, 2
    18a0:	16 c0       	rjmp	.+44     	; 0x18ce <vfprintf+0x33e>
    18a2:	21 ff       	sbrs	r18, 1
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <vfprintf+0x31c>
    18a6:	88 e5       	ldi	r24, 0x58	; 88
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x320>
    18ac:	88 e7       	ldi	r24, 0x78	; 120
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	b7 01       	movw	r22, r14
    18b2:	0c c0       	rjmp	.+24     	; 0x18cc <vfprintf+0x33c>
    18b4:	82 2f       	mov	r24, r18
    18b6:	86 78       	andi	r24, 0x86	; 134
    18b8:	51 f0       	breq	.+20     	; 0x18ce <vfprintf+0x33e>
    18ba:	21 fd       	sbrc	r18, 1
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <vfprintf+0x332>
    18be:	80 e2       	ldi	r24, 0x20	; 32
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <vfprintf+0x334>
    18c2:	8b e2       	ldi	r24, 0x2B	; 43
    18c4:	27 fd       	sbrc	r18, 7
    18c6:	8d e2       	ldi	r24, 0x2D	; 45
    18c8:	b7 01       	movw	r22, r14
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	4a d0       	rcall	.+148    	; 0x1962 <fputc>
    18ce:	a5 14       	cp	r10, r5
    18d0:	30 f4       	brcc	.+12     	; 0x18de <vfprintf+0x34e>
    18d2:	b7 01       	movw	r22, r14
    18d4:	80 e3       	ldi	r24, 0x30	; 48
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	44 d0       	rcall	.+136    	; 0x1962 <fputc>
    18da:	5a 94       	dec	r5
    18dc:	f8 cf       	rjmp	.-16     	; 0x18ce <vfprintf+0x33e>
    18de:	aa 94       	dec	r10
    18e0:	f4 01       	movw	r30, r8
    18e2:	ea 0d       	add	r30, r10
    18e4:	f1 1d       	adc	r31, r1
    18e6:	80 81       	ld	r24, Z
    18e8:	b7 01       	movw	r22, r14
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	3a d0       	rcall	.+116    	; 0x1962 <fputc>
    18ee:	a1 10       	cpse	r10, r1
    18f0:	f6 cf       	rjmp	.-20     	; 0x18de <vfprintf+0x34e>
    18f2:	33 20       	and	r3, r3
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <vfprintf+0x368>
    18f6:	5d ce       	rjmp	.-838    	; 0x15b2 <vfprintf+0x22>
    18f8:	b7 01       	movw	r22, r14
    18fa:	80 e2       	ldi	r24, 0x20	; 32
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	31 d0       	rcall	.+98     	; 0x1962 <fputc>
    1900:	3a 94       	dec	r3
    1902:	f7 cf       	rjmp	.-18     	; 0x18f2 <vfprintf+0x362>
    1904:	f7 01       	movw	r30, r14
    1906:	86 81       	ldd	r24, Z+6	; 0x06
    1908:	97 81       	ldd	r25, Z+7	; 0x07
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <vfprintf+0x380>
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	9f ef       	ldi	r25, 0xFF	; 255
    1910:	2c 96       	adiw	r28, 0x0c	; 12
    1912:	e2 e1       	ldi	r30, 0x12	; 18
    1914:	d2 c0       	rjmp	.+420    	; 0x1aba <__epilogue_restores__>

00001916 <strnlen_P>:
    1916:	fc 01       	movw	r30, r24
    1918:	05 90       	lpm	r0, Z+
    191a:	61 50       	subi	r22, 0x01	; 1
    191c:	70 40       	sbci	r23, 0x00	; 0
    191e:	01 10       	cpse	r0, r1
    1920:	d8 f7       	brcc	.-10     	; 0x1918 <strnlen_P+0x2>
    1922:	80 95       	com	r24
    1924:	90 95       	com	r25
    1926:	8e 0f       	add	r24, r30
    1928:	9f 1f       	adc	r25, r31
    192a:	08 95       	ret

0000192c <strnlen>:
    192c:	fc 01       	movw	r30, r24
    192e:	61 50       	subi	r22, 0x01	; 1
    1930:	70 40       	sbci	r23, 0x00	; 0
    1932:	01 90       	ld	r0, Z+
    1934:	01 10       	cpse	r0, r1
    1936:	d8 f7       	brcc	.-10     	; 0x192e <strnlen+0x2>
    1938:	80 95       	com	r24
    193a:	90 95       	com	r25
    193c:	8e 0f       	add	r24, r30
    193e:	9f 1f       	adc	r25, r31
    1940:	08 95       	ret

00001942 <strrev>:
    1942:	dc 01       	movw	r26, r24
    1944:	fc 01       	movw	r30, r24
    1946:	67 2f       	mov	r22, r23
    1948:	71 91       	ld	r23, Z+
    194a:	77 23       	and	r23, r23
    194c:	e1 f7       	brne	.-8      	; 0x1946 <strrev+0x4>
    194e:	32 97       	sbiw	r30, 0x02	; 2
    1950:	04 c0       	rjmp	.+8      	; 0x195a <strrev+0x18>
    1952:	7c 91       	ld	r23, X
    1954:	6d 93       	st	X+, r22
    1956:	70 83       	st	Z, r23
    1958:	62 91       	ld	r22, -Z
    195a:	ae 17       	cp	r26, r30
    195c:	bf 07       	cpc	r27, r31
    195e:	c8 f3       	brcs	.-14     	; 0x1952 <strrev+0x10>
    1960:	08 95       	ret

00001962 <fputc>:
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	18 2f       	mov	r17, r24
    196c:	09 2f       	mov	r16, r25
    196e:	eb 01       	movw	r28, r22
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	81 fd       	sbrc	r24, 1
    1974:	03 c0       	rjmp	.+6      	; 0x197c <fputc+0x1a>
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	9f ef       	ldi	r25, 0xFF	; 255
    197a:	20 c0       	rjmp	.+64     	; 0x19bc <fputc+0x5a>
    197c:	82 ff       	sbrs	r24, 2
    197e:	10 c0       	rjmp	.+32     	; 0x19a0 <fputc+0x3e>
    1980:	4e 81       	ldd	r20, Y+6	; 0x06
    1982:	5f 81       	ldd	r21, Y+7	; 0x07
    1984:	2c 81       	ldd	r18, Y+4	; 0x04
    1986:	3d 81       	ldd	r19, Y+5	; 0x05
    1988:	42 17       	cp	r20, r18
    198a:	53 07       	cpc	r21, r19
    198c:	7c f4       	brge	.+30     	; 0x19ac <fputc+0x4a>
    198e:	e8 81       	ld	r30, Y
    1990:	f9 81       	ldd	r31, Y+1	; 0x01
    1992:	9f 01       	movw	r18, r30
    1994:	2f 5f       	subi	r18, 0xFF	; 255
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	39 83       	std	Y+1, r19	; 0x01
    199a:	28 83       	st	Y, r18
    199c:	10 83       	st	Z, r17
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <fputc+0x4a>
    19a0:	e8 85       	ldd	r30, Y+8	; 0x08
    19a2:	f9 85       	ldd	r31, Y+9	; 0x09
    19a4:	81 2f       	mov	r24, r17
    19a6:	09 95       	icall
    19a8:	89 2b       	or	r24, r25
    19aa:	29 f7       	brne	.-54     	; 0x1976 <fputc+0x14>
    19ac:	2e 81       	ldd	r18, Y+6	; 0x06
    19ae:	3f 81       	ldd	r19, Y+7	; 0x07
    19b0:	2f 5f       	subi	r18, 0xFF	; 255
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	3f 83       	std	Y+7, r19	; 0x07
    19b6:	2e 83       	std	Y+6, r18	; 0x06
    19b8:	81 2f       	mov	r24, r17
    19ba:	90 2f       	mov	r25, r16
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	08 95       	ret

000019c6 <__ultoa_invert>:
    19c6:	fa 01       	movw	r30, r20
    19c8:	aa 27       	eor	r26, r26
    19ca:	28 30       	cpi	r18, 0x08	; 8
    19cc:	51 f1       	breq	.+84     	; 0x1a22 <__ultoa_invert+0x5c>
    19ce:	20 31       	cpi	r18, 0x10	; 16
    19d0:	81 f1       	breq	.+96     	; 0x1a32 <__ultoa_invert+0x6c>
    19d2:	e8 94       	clt
    19d4:	6f 93       	push	r22
    19d6:	6e 7f       	andi	r22, 0xFE	; 254
    19d8:	6e 5f       	subi	r22, 0xFE	; 254
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8f 4f       	sbci	r24, 0xFF	; 255
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	af 4f       	sbci	r26, 0xFF	; 255
    19e2:	b1 e0       	ldi	r27, 0x01	; 1
    19e4:	3e d0       	rcall	.+124    	; 0x1a62 <__ultoa_invert+0x9c>
    19e6:	b4 e0       	ldi	r27, 0x04	; 4
    19e8:	3c d0       	rcall	.+120    	; 0x1a62 <__ultoa_invert+0x9c>
    19ea:	67 0f       	add	r22, r23
    19ec:	78 1f       	adc	r23, r24
    19ee:	89 1f       	adc	r24, r25
    19f0:	9a 1f       	adc	r25, r26
    19f2:	a1 1d       	adc	r26, r1
    19f4:	68 0f       	add	r22, r24
    19f6:	79 1f       	adc	r23, r25
    19f8:	8a 1f       	adc	r24, r26
    19fa:	91 1d       	adc	r25, r1
    19fc:	a1 1d       	adc	r26, r1
    19fe:	6a 0f       	add	r22, r26
    1a00:	71 1d       	adc	r23, r1
    1a02:	81 1d       	adc	r24, r1
    1a04:	91 1d       	adc	r25, r1
    1a06:	a1 1d       	adc	r26, r1
    1a08:	20 d0       	rcall	.+64     	; 0x1a4a <__ultoa_invert+0x84>
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <__ultoa_invert+0x48>
    1a0c:	68 94       	set
    1a0e:	3f 91       	pop	r19
    1a10:	2a e0       	ldi	r18, 0x0A	; 10
    1a12:	26 9f       	mul	r18, r22
    1a14:	11 24       	eor	r1, r1
    1a16:	30 19       	sub	r19, r0
    1a18:	30 5d       	subi	r19, 0xD0	; 208
    1a1a:	31 93       	st	Z+, r19
    1a1c:	de f6       	brtc	.-74     	; 0x19d4 <__ultoa_invert+0xe>
    1a1e:	cf 01       	movw	r24, r30
    1a20:	08 95       	ret
    1a22:	46 2f       	mov	r20, r22
    1a24:	47 70       	andi	r20, 0x07	; 7
    1a26:	40 5d       	subi	r20, 0xD0	; 208
    1a28:	41 93       	st	Z+, r20
    1a2a:	b3 e0       	ldi	r27, 0x03	; 3
    1a2c:	0f d0       	rcall	.+30     	; 0x1a4c <__ultoa_invert+0x86>
    1a2e:	c9 f7       	brne	.-14     	; 0x1a22 <__ultoa_invert+0x5c>
    1a30:	f6 cf       	rjmp	.-20     	; 0x1a1e <__ultoa_invert+0x58>
    1a32:	46 2f       	mov	r20, r22
    1a34:	4f 70       	andi	r20, 0x0F	; 15
    1a36:	40 5d       	subi	r20, 0xD0	; 208
    1a38:	4a 33       	cpi	r20, 0x3A	; 58
    1a3a:	18 f0       	brcs	.+6      	; 0x1a42 <__ultoa_invert+0x7c>
    1a3c:	49 5d       	subi	r20, 0xD9	; 217
    1a3e:	31 fd       	sbrc	r19, 1
    1a40:	40 52       	subi	r20, 0x20	; 32
    1a42:	41 93       	st	Z+, r20
    1a44:	02 d0       	rcall	.+4      	; 0x1a4a <__ultoa_invert+0x84>
    1a46:	a9 f7       	brne	.-22     	; 0x1a32 <__ultoa_invert+0x6c>
    1a48:	ea cf       	rjmp	.-44     	; 0x1a1e <__ultoa_invert+0x58>
    1a4a:	b4 e0       	ldi	r27, 0x04	; 4
    1a4c:	a6 95       	lsr	r26
    1a4e:	97 95       	ror	r25
    1a50:	87 95       	ror	r24
    1a52:	77 95       	ror	r23
    1a54:	67 95       	ror	r22
    1a56:	ba 95       	dec	r27
    1a58:	c9 f7       	brne	.-14     	; 0x1a4c <__ultoa_invert+0x86>
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	61 05       	cpc	r22, r1
    1a5e:	71 05       	cpc	r23, r1
    1a60:	08 95       	ret
    1a62:	9b 01       	movw	r18, r22
    1a64:	ac 01       	movw	r20, r24
    1a66:	0a 2e       	mov	r0, r26
    1a68:	06 94       	lsr	r0
    1a6a:	57 95       	ror	r21
    1a6c:	47 95       	ror	r20
    1a6e:	37 95       	ror	r19
    1a70:	27 95       	ror	r18
    1a72:	ba 95       	dec	r27
    1a74:	c9 f7       	brne	.-14     	; 0x1a68 <__ultoa_invert+0xa2>
    1a76:	62 0f       	add	r22, r18
    1a78:	73 1f       	adc	r23, r19
    1a7a:	84 1f       	adc	r24, r20
    1a7c:	95 1f       	adc	r25, r21
    1a7e:	a0 1d       	adc	r26, r0
    1a80:	08 95       	ret

00001a82 <__prologue_saves__>:
    1a82:	2f 92       	push	r2
    1a84:	3f 92       	push	r3
    1a86:	4f 92       	push	r4
    1a88:	5f 92       	push	r5
    1a8a:	6f 92       	push	r6
    1a8c:	7f 92       	push	r7
    1a8e:	8f 92       	push	r8
    1a90:	9f 92       	push	r9
    1a92:	af 92       	push	r10
    1a94:	bf 92       	push	r11
    1a96:	cf 92       	push	r12
    1a98:	df 92       	push	r13
    1a9a:	ef 92       	push	r14
    1a9c:	ff 92       	push	r15
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	ca 1b       	sub	r28, r26
    1aac:	db 0b       	sbc	r29, r27
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	09 94       	ijmp

00001aba <__epilogue_restores__>:
    1aba:	2a 88       	ldd	r2, Y+18	; 0x12
    1abc:	39 88       	ldd	r3, Y+17	; 0x11
    1abe:	48 88       	ldd	r4, Y+16	; 0x10
    1ac0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ac2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ac4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ac6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ac8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aca:	aa 84       	ldd	r10, Y+10	; 0x0a
    1acc:	b9 84       	ldd	r11, Y+9	; 0x09
    1ace:	c8 84       	ldd	r12, Y+8	; 0x08
    1ad0:	df 80       	ldd	r13, Y+7	; 0x07
    1ad2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ad4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ad6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad8:	1b 81       	ldd	r17, Y+3	; 0x03
    1ada:	aa 81       	ldd	r26, Y+2	; 0x02
    1adc:	b9 81       	ldd	r27, Y+1	; 0x01
    1ade:	ce 0f       	add	r28, r30
    1ae0:	d1 1d       	adc	r29, r1
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	ed 01       	movw	r28, r26
    1aee:	08 95       	ret

00001af0 <_exit>:
    1af0:	f8 94       	cli

00001af2 <__stop_program>:
    1af2:	ff cf       	rjmp	.-2      	; 0x1af2 <__stop_program>
