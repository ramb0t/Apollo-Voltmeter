
Voltmeter V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00001224  000012b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001224  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  0080015a  0080015a  00001312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001312  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000748  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ad45  00000000  00000000  00001a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e28  00000000  00000000  0000c7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00014a58  00000000  00000000  0000f5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000109c  00000000  00000000  00024050  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001b23d  00000000  00000000  000250ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000068e1  00000000  00000000  00040329  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000790  00000000  00000000  00046c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b469  00000000  00000000  0004739a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a5 c0       	rjmp	.+330    	; 0x14c <__ctors_end>
       2:	00 00       	nop
       4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
       6:	00 00       	nop
       8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
       a:	00 00       	nop
       c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
       e:	00 00       	nop
      10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
      12:	00 00       	nop
      14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
      16:	00 00       	nop
      18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b1 c0       	rjmp	.+354    	; 0x184 <__bad_interrupt>
      22:	00 00       	nop
      24:	af c0       	rjmp	.+350    	; 0x184 <__bad_interrupt>
      26:	00 00       	nop
      28:	c2 c5       	rjmp	.+2948   	; 0xbae <__vector_10>
      2a:	00 00       	nop
      2c:	8b c6       	rjmp	.+3350   	; 0xd44 <__vector_11>
      2e:	00 00       	nop
      30:	a9 c0       	rjmp	.+338    	; 0x184 <__bad_interrupt>
      32:	00 00       	nop
      34:	a7 c0       	rjmp	.+334    	; 0x184 <__bad_interrupt>
      36:	00 00       	nop
      38:	a5 c0       	rjmp	.+330    	; 0x184 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a3 c0       	rjmp	.+326    	; 0x184 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a1 c0       	rjmp	.+322    	; 0x184 <__bad_interrupt>
      42:	00 00       	nop
      44:	9f c0       	rjmp	.+318    	; 0x184 <__bad_interrupt>
      46:	00 00       	nop
      48:	9d c0       	rjmp	.+314    	; 0x184 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9b c0       	rjmp	.+310    	; 0x184 <__bad_interrupt>
      4e:	00 00       	nop
      50:	99 c0       	rjmp	.+306    	; 0x184 <__bad_interrupt>
      52:	00 00       	nop
      54:	97 c0       	rjmp	.+302    	; 0x184 <__bad_interrupt>
      56:	00 00       	nop
      58:	95 c0       	rjmp	.+298    	; 0x184 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	93 c0       	rjmp	.+294    	; 0x184 <__bad_interrupt>
      5e:	00 00       	nop
      60:	91 c0       	rjmp	.+290    	; 0x184 <__bad_interrupt>
      62:	00 00       	nop
      64:	8f c0       	rjmp	.+286    	; 0x184 <__bad_interrupt>
      66:	00 00       	nop
      68:	8d c0       	rjmp	.+282    	; 0x184 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8b c0       	rjmp	.+278    	; 0x184 <__bad_interrupt>
      6e:	00 00       	nop
      70:	89 c0       	rjmp	.+274    	; 0x184 <__bad_interrupt>
      72:	00 00       	nop
      74:	87 c0       	rjmp	.+270    	; 0x184 <__bad_interrupt>
      76:	00 00       	nop
      78:	85 c0       	rjmp	.+266    	; 0x184 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	83 c0       	rjmp	.+262    	; 0x184 <__bad_interrupt>
      7e:	00 00       	nop
      80:	81 c0       	rjmp	.+258    	; 0x184 <__bad_interrupt>
      82:	00 00       	nop
      84:	7f c0       	rjmp	.+254    	; 0x184 <__bad_interrupt>
      86:	00 00       	nop
      88:	7d c0       	rjmp	.+250    	; 0x184 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b c0       	rjmp	.+246    	; 0x184 <__bad_interrupt>
      8e:	00 00       	nop
      90:	79 c0       	rjmp	.+242    	; 0x184 <__bad_interrupt>
      92:	00 00       	nop
      94:	77 c0       	rjmp	.+238    	; 0x184 <__bad_interrupt>
      96:	00 00       	nop
      98:	75 c0       	rjmp	.+234    	; 0x184 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	73 c0       	rjmp	.+230    	; 0x184 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	71 c0       	rjmp	.+226    	; 0x184 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6f c0       	rjmp	.+222    	; 0x184 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6d c0       	rjmp	.+218    	; 0x184 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	04 07       	cpc	r16, r20
      ae:	26 07       	cpc	r18, r22
      b0:	0a 08       	sbc	r0, r10
      b2:	26 07       	cpc	r18, r22
      b4:	0a 08       	sbc	r0, r10
      b6:	68 07       	cpc	r22, r24
      b8:	8a 07       	cpc	r24, r26
      ba:	0a 08       	sbc	r0, r10
      bc:	dc 07       	cpc	r29, r28
      be:	ee 07       	cpc	r30, r30

000000c0 <ProductString>:
      c0:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      d0:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000de <ManufacturerString>:
      de:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ee:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f8 <LanguageString>:
      f8:	04 03 09 04                                         ....

000000fc <ConfigurationDescriptor>:
      fc:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     10c:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     11c:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     12c:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000013a <DeviceDescriptor>:
     13a:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     14a:	dc 01                                               ..

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	da e0       	ldi	r29, 0x0A	; 10
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	e4 e2       	ldi	r30, 0x24	; 36
     160:	f2 e1       	ldi	r31, 0x12	; 18
     162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x10>
     164:	05 90       	lpm	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	aa 35       	cpi	r26, 0x5A	; 90
     16a:	b1 07       	cpc	r27, r17
     16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0xc>

0000016e <__do_clear_bss>:
     16e:	21 e0       	ldi	r18, 0x01	; 1
     170:	aa e5       	ldi	r26, 0x5A	; 90
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	a7 37       	cpi	r26, 0x77	; 119
     17a:	b2 07       	cpc	r27, r18
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
     17e:	c7 d7       	rcall	.+3982   	; 0x110e <main>
     180:	0c 94 10 09 	jmp	0x1220	; 0x1220 <_exit>

00000184 <__bad_interrupt>:
     184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     186:	29 2f       	mov	r18, r25
     188:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     18a:	22 30       	cpi	r18, 0x02	; 2
     18c:	31 05       	cpc	r19, r1
     18e:	59 f0       	breq	.+22     	; 0x1a6 <CALLBACK_USB_GetDescriptor+0x20>
     190:	23 30       	cpi	r18, 0x03	; 3
     192:	31 05       	cpc	r19, r1
     194:	69 f0       	breq	.+26     	; 0x1b0 <CALLBACK_USB_GetDescriptor+0x2a>
     196:	21 30       	cpi	r18, 0x01	; 1
     198:	31 05       	cpc	r19, r1
     19a:	f9 f4       	brne	.+62     	; 0x1da <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     19c:	82 e1       	ldi	r24, 0x12	; 18
     19e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1a0:	2a e3       	ldi	r18, 0x3A	; 58
     1a2:	31 e0       	ldi	r19, 0x01	; 1
     1a4:	1e c0       	rjmp	.+60     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1a6:	8e e3       	ldi	r24, 0x3E	; 62
     1a8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1aa:	2c ef       	ldi	r18, 0xFC	; 252
     1ac:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1ae:	19 c0       	rjmp	.+50     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x5c>
     1b0:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	91 05       	cpc	r25, r1
     1b6:	41 f0       	breq	.+16     	; 0x1c8 <CALLBACK_USB_GetDescriptor+0x42>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	91 05       	cpc	r25, r1
     1bc:	41 f0       	breq	.+16     	; 0x1ce <CALLBACK_USB_GetDescriptor+0x48>
     1be:	89 2b       	or	r24, r25
     1c0:	61 f4       	brne	.+24     	; 0x1da <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1c2:	e8 ef       	ldi	r30, 0xF8	; 248
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1c8:	ee ed       	ldi	r30, 0xDE	; 222
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1ce:	e0 ec       	ldi	r30, 0xC0	; 192
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	84 91       	lpm	r24, Z
     1d4:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1d6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1e2:	fa 01       	movw	r30, r20
     1e4:	31 83       	std	Z+1, r19	; 0x01
     1e6:	20 83       	st	Z, r18
	return Size;
}
     1e8:	08 95       	ret

000001ea <lcd_e_port_low>:
  {
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
      lcd_putc(c);
  }
     1ea:	76 98       	cbi	0x0e, 6	; 14
     1ec:	08 95       	ret

000001ee <lcd_e_port_high>:
     1ee:	76 9a       	sbi	0x0e, 6	; 14
     1f0:	08 95       	ret

000001f2 <lcd_read>:
     1f2:	af 92       	push	r10
     1f4:	bf 92       	push	r11
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	1f 92       	push	r1
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	88 23       	and	r24, r24
     20e:	19 f0       	breq	.+6      	; 0x216 <lcd_read+0x24>
     210:	89 83       	std	Y+1, r24	; 0x01
     212:	72 d0       	rcall	.+228    	; 0x2f8 <lcd_waitbusy>
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	90 91 5a 01 	lds	r25, 0x015A
     21a:	99 23       	and	r25, r25
     21c:	31 f0       	breq	.+12     	; 0x22a <lcd_read+0x38>
     21e:	9a e1       	ldi	r25, 0x1A	; 26
     220:	9a 95       	dec	r25
     222:	f1 f7       	brne	.-4      	; 0x220 <lcd_read+0x2e>
     224:	00 c0       	rjmp	.+0      	; 0x226 <lcd_read+0x34>
     226:	10 92 5a 01 	sts	0x015A, r1
     22a:	88 23       	and	r24, r24
     22c:	29 f0       	breq	.+10     	; 0x238 <lcd_read+0x46>
     22e:	5e 9a       	sbi	0x0b, 6	; 11
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	80 93 5a 01 	sts	0x015A, r24
     236:	01 c0       	rjmp	.+2      	; 0x23a <lcd_read+0x48>
     238:	5e 98       	cbi	0x0b, 6	; 11
     23a:	5f 9a       	sbi	0x0b, 7	; 11
     23c:	24 98       	cbi	0x04, 4	; 4
     23e:	25 98       	cbi	0x04, 5	; 4
     240:	26 98       	cbi	0x04, 6	; 4
     242:	27 98       	cbi	0x04, 7	; 4
     244:	d4 df       	rcall	.-88     	; 0x1ee <lcd_e_port_high>
     246:	e2 e0       	ldi	r30, 0x02	; 2
     248:	ea 95       	dec	r30
     24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_read+0x56>
     24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_read+0x5c>
     24e:	b3 b0       	in	r11, 0x03	; 3
     250:	bb 1c       	adc	r11, r11
     252:	bb 24       	eor	r11, r11
     254:	bb 1c       	adc	r11, r11
     256:	b2 94       	swap	r11
     258:	40 ef       	ldi	r20, 0xF0	; 240
     25a:	b4 22       	and	r11, r20
     25c:	1e 9b       	sbis	0x03, 6	; 3
     25e:	03 c0       	rjmp	.+6      	; 0x266 <lcd_read+0x74>
     260:	30 e2       	ldi	r19, 0x20	; 32
     262:	f3 2e       	mov	r15, r19
     264:	01 c0       	rjmp	.+2      	; 0x268 <lcd_read+0x76>
     266:	f1 2c       	mov	r15, r1
     268:	1d 9b       	sbis	0x03, 5	; 3
     26a:	02 c0       	rjmp	.+4      	; 0x270 <lcd_read+0x7e>
     26c:	00 e4       	ldi	r16, 0x40	; 64
     26e:	01 c0       	rjmp	.+2      	; 0x272 <lcd_read+0x80>
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	1c 9b       	sbis	0x03, 4	; 3
     274:	02 c0       	rjmp	.+4      	; 0x27a <lcd_read+0x88>
     276:	10 e8       	ldi	r17, 0x80	; 128
     278:	01 c0       	rjmp	.+2      	; 0x27c <lcd_read+0x8a>
     27a:	10 e0       	ldi	r17, 0x00	; 0
     27c:	b6 df       	rcall	.-148    	; 0x1ea <lcd_e_port_low>
     27e:	f2 e0       	ldi	r31, 0x02	; 2
     280:	fa 95       	dec	r31
     282:	f1 f7       	brne	.-4      	; 0x280 <lcd_read+0x8e>
     284:	00 c0       	rjmp	.+0      	; 0x286 <lcd_read+0x94>
     286:	b3 df       	rcall	.-154    	; 0x1ee <lcd_e_port_high>
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	8a 95       	dec	r24
     28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_read+0x98>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_read+0x9e>
     290:	a3 b0       	in	r10, 0x03	; 3
     292:	aa 1c       	adc	r10, r10
     294:	aa 24       	eor	r10, r10
     296:	aa 1c       	adc	r10, r10
     298:	1e 9b       	sbis	0x03, 6	; 3
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <lcd_read+0xb0>
     29c:	22 e0       	ldi	r18, 0x02	; 2
     29e:	c2 2e       	mov	r12, r18
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <lcd_read+0xb2>
     2a2:	c1 2c       	mov	r12, r1
     2a4:	1d 9b       	sbis	0x03, 5	; 3
     2a6:	03 c0       	rjmp	.+6      	; 0x2ae <lcd_read+0xbc>
     2a8:	94 e0       	ldi	r25, 0x04	; 4
     2aa:	d9 2e       	mov	r13, r25
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <lcd_read+0xbe>
     2ae:	d1 2c       	mov	r13, r1
     2b0:	1c 9b       	sbis	0x03, 4	; 3
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <lcd_read+0xc8>
     2b4:	88 e0       	ldi	r24, 0x08	; 8
     2b6:	e8 2e       	mov	r14, r24
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <lcd_read+0xca>
     2ba:	e1 2c       	mov	r14, r1
     2bc:	96 df       	rcall	.-212    	; 0x1ea <lcd_e_port_low>
     2be:	24 9a       	sbi	0x04, 4	; 4
     2c0:	25 9a       	sbi	0x04, 5	; 4
     2c2:	26 9a       	sbi	0x04, 6	; 4
     2c4:	27 9a       	sbi	0x04, 7	; 4
     2c6:	2c 9a       	sbi	0x05, 4	; 5
     2c8:	2d 9a       	sbi	0x05, 5	; 5
     2ca:	2e 9a       	sbi	0x05, 6	; 5
     2cc:	2f 9a       	sbi	0x05, 7	; 5
     2ce:	5f 98       	cbi	0x0b, 7	; 11
     2d0:	8b 2d       	mov	r24, r11
     2d2:	8a 29       	or	r24, r10
     2d4:	8f 29       	or	r24, r15
     2d6:	80 2b       	or	r24, r16
     2d8:	81 2b       	or	r24, r17
     2da:	8c 29       	or	r24, r12
     2dc:	8d 29       	or	r24, r13
     2de:	8e 29       	or	r24, r14
     2e0:	0f 90       	pop	r0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	df 90       	pop	r13
     2f0:	cf 90       	pop	r12
     2f2:	bf 90       	pop	r11
     2f4:	af 90       	pop	r10
     2f6:	08 95       	ret

000002f8 <lcd_waitbusy>:
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	c1 ed       	ldi	r28, 0xD1	; 209
     2fe:	d3 e0       	ldi	r29, 0x03	; 3
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	77 df       	rcall	.-274    	; 0x1f2 <lcd_read>
     304:	87 ff       	sbrs	r24, 7
     306:	03 c0       	rjmp	.+6      	; 0x30e <lcd_waitbusy+0x16>
     308:	21 97       	sbiw	r28, 0x01	; 1
     30a:	20 97       	sbiw	r28, 0x00	; 0
     30c:	c9 f7       	brne	.-14     	; 0x300 <lcd_waitbusy+0x8>
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <lcd_write>:
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	1f 92       	push	r1
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	18 2f       	mov	r17, r24
     322:	69 83       	std	Y+1, r22	; 0x01
     324:	e9 df       	rcall	.-46     	; 0x2f8 <lcd_waitbusy>
     326:	80 91 5a 01 	lds	r24, 0x015A
     32a:	69 81       	ldd	r22, Y+1	; 0x01
     32c:	88 23       	and	r24, r24
     32e:	31 f0       	breq	.+12     	; 0x33c <lcd_write+0x28>
     330:	8a e1       	ldi	r24, 0x1A	; 26
     332:	8a 95       	dec	r24
     334:	f1 f7       	brne	.-4      	; 0x332 <lcd_write+0x1e>
     336:	00 c0       	rjmp	.+0      	; 0x338 <lcd_write+0x24>
     338:	10 92 5a 01 	sts	0x015A, r1
     33c:	66 23       	and	r22, r22
     33e:	29 f0       	breq	.+10     	; 0x34a <lcd_write+0x36>
     340:	5e 9a       	sbi	0x0b, 6	; 11
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 5a 01 	sts	0x015A, r24
     348:	03 c0       	rjmp	.+6      	; 0x350 <lcd_write+0x3c>
     34a:	5e 98       	cbi	0x0b, 6	; 11
     34c:	10 92 5a 01 	sts	0x015A, r1
     350:	17 ff       	sbrs	r17, 7
     352:	02 c0       	rjmp	.+4      	; 0x358 <lcd_write+0x44>
     354:	2c 9a       	sbi	0x05, 4	; 5
     356:	01 c0       	rjmp	.+2      	; 0x35a <lcd_write+0x46>
     358:	2c 98       	cbi	0x05, 4	; 5
     35a:	16 ff       	sbrs	r17, 6
     35c:	02 c0       	rjmp	.+4      	; 0x362 <lcd_write+0x4e>
     35e:	2d 9a       	sbi	0x05, 5	; 5
     360:	01 c0       	rjmp	.+2      	; 0x364 <lcd_write+0x50>
     362:	2d 98       	cbi	0x05, 5	; 5
     364:	15 ff       	sbrs	r17, 5
     366:	02 c0       	rjmp	.+4      	; 0x36c <lcd_write+0x58>
     368:	2e 9a       	sbi	0x05, 6	; 5
     36a:	01 c0       	rjmp	.+2      	; 0x36e <lcd_write+0x5a>
     36c:	2e 98       	cbi	0x05, 6	; 5
     36e:	14 ff       	sbrs	r17, 4
     370:	02 c0       	rjmp	.+4      	; 0x376 <lcd_write+0x62>
     372:	2f 9a       	sbi	0x05, 7	; 5
     374:	01 c0       	rjmp	.+2      	; 0x378 <lcd_write+0x64>
     376:	2f 98       	cbi	0x05, 7	; 5
     378:	00 c0       	rjmp	.+0      	; 0x37a <lcd_write+0x66>
     37a:	39 df       	rcall	.-398    	; 0x1ee <lcd_e_port_high>
     37c:	e2 e0       	ldi	r30, 0x02	; 2
     37e:	ea 95       	dec	r30
     380:	f1 f7       	brne	.-4      	; 0x37e <lcd_write+0x6a>
     382:	00 c0       	rjmp	.+0      	; 0x384 <lcd_write+0x70>
     384:	32 df       	rcall	.-412    	; 0x1ea <lcd_e_port_low>
     386:	13 ff       	sbrs	r17, 3
     388:	02 c0       	rjmp	.+4      	; 0x38e <lcd_write+0x7a>
     38a:	2c 9a       	sbi	0x05, 4	; 5
     38c:	01 c0       	rjmp	.+2      	; 0x390 <lcd_write+0x7c>
     38e:	2c 98       	cbi	0x05, 4	; 5
     390:	12 ff       	sbrs	r17, 2
     392:	02 c0       	rjmp	.+4      	; 0x398 <lcd_write+0x84>
     394:	2d 9a       	sbi	0x05, 5	; 5
     396:	01 c0       	rjmp	.+2      	; 0x39a <lcd_write+0x86>
     398:	2d 98       	cbi	0x05, 5	; 5
     39a:	11 ff       	sbrs	r17, 1
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <lcd_write+0x8e>
     39e:	2e 9a       	sbi	0x05, 6	; 5
     3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <lcd_write+0x90>
     3a2:	2e 98       	cbi	0x05, 6	; 5
     3a4:	10 ff       	sbrs	r17, 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <lcd_write+0x98>
     3a8:	2f 9a       	sbi	0x05, 7	; 5
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <lcd_write+0x9a>
     3ac:	2f 98       	cbi	0x05, 7	; 5
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <lcd_write+0x9c>
     3b0:	1e df       	rcall	.-452    	; 0x1ee <lcd_e_port_high>
     3b2:	f2 e0       	ldi	r31, 0x02	; 2
     3b4:	fa 95       	dec	r31
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_write+0xa0>
     3b8:	00 c0       	rjmp	.+0      	; 0x3ba <lcd_write+0xa6>
     3ba:	17 df       	rcall	.-466    	; 0x1ea <lcd_e_port_low>
     3bc:	2c 9a       	sbi	0x05, 4	; 5
     3be:	2d 9a       	sbi	0x05, 5	; 5
     3c0:	2e 9a       	sbi	0x05, 6	; 5
     3c2:	2f 9a       	sbi	0x05, 7	; 5
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	08 95       	ret

000003ce <lcd_command>:
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	a1 cf       	rjmp	.-190    	; 0x314 <lcd_write>

000003d2 <lcd_clrscr>:
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	fc cf       	rjmp	.-8      	; 0x3ce <lcd_command>

000003d6 <lcd_putc>:
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	9d cf       	rjmp	.-198    	; 0x314 <lcd_write>

000003da <lcd_puts>:
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	ec 01       	movw	r28, r24
     3e0:	89 91       	ld	r24, Y+
     3e2:	88 23       	and	r24, r24
     3e4:	11 f0       	breq	.+4      	; 0x3ea <lcd_puts+0x10>
     3e6:	f7 df       	rcall	.-18     	; 0x3d6 <lcd_putc>
     3e8:	fb cf       	rjmp	.-10     	; 0x3e0 <lcd_puts+0x6>
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
     3f0:	6e 9a       	sbi	0x0d, 6	; 13
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
     3f2:	56 9a       	sbi	0x0a, 6	; 10
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
     3f4:	57 9a       	sbi	0x0a, 7	; 10
    #endif
    lcd_db7_ddr_high();
     3f6:	24 9a       	sbi	0x04, 4	; 4
    lcd_db6_ddr_high();
     3f8:	25 9a       	sbi	0x04, 5	; 4
    lcd_db5_ddr_high();
     3fa:	26 9a       	sbi	0x04, 6	; 4
    lcd_db4_ddr_high();
     3fc:	27 9a       	sbi	0x04, 7	; 4
      lcd_db1_ddr_high();
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
     3fe:	f5 de       	rcall	.-534    	; 0x1ea <lcd_e_port_low>
    lcd_rs_port_low();
     400:	5e 98       	cbi	0x0b, 6	; 11
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
     402:	5f 98       	cbi	0x0b, 7	; 11
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
     404:	2c 9a       	sbi	0x05, 4	; 5
    lcd_db6_port_high();
     406:	2d 9a       	sbi	0x05, 5	; 5
    lcd_db5_port_high();
     408:	2e 9a       	sbi	0x05, 6	; 5
    lcd_db4_port_high();
     40a:	2f 9a       	sbi	0x05, 7	; 5
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
     40c:	8f e5       	ldi	r24, 0x5F	; 95
     40e:	9a ee       	ldi	r25, 0xEA	; 234
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <lcd_init+0x20>
     414:	00 c0       	rjmp	.+0      	; 0x416 <lcd_init+0x26>
     416:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
     418:	2c 98       	cbi	0x05, 4	; 5
    lcd_db6_port_low();
     41a:	2d 98       	cbi	0x05, 5	; 5
    Delay_ns(100);
     41c:	00 c0       	rjmp	.+0      	; 0x41e <lcd_init+0x2e>
    lcd_e_port_high();
     41e:	e7 de       	rcall	.-562    	; 0x1ee <lcd_e_port_high>
    Delay_ns(500);
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	9a 95       	dec	r25
     424:	f1 f7       	brne	.-4      	; 0x422 <lcd_init+0x32>
     426:	00 c0       	rjmp	.+0      	; 0x428 <lcd_init+0x38>
    lcd_e_port_low();
     428:	e0 de       	rcall	.-576    	; 0x1ea <lcd_e_port_low>

    Delay_us(4100);
     42a:	8f e0       	ldi	r24, 0x0F	; 15
     42c:	90 e4       	ldi	r25, 0x40	; 64
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <lcd_init+0x3e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <lcd_init+0x44>
     434:	00 00       	nop

    lcd_e_port_high();
     436:	db de       	rcall	.-586    	; 0x1ee <lcd_e_port_high>
    Delay_ns(500);
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	9a 95       	dec	r25
     43c:	f1 f7       	brne	.-4      	; 0x43a <lcd_init+0x4a>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <lcd_init+0x50>
    lcd_e_port_low();
     440:	d4 de       	rcall	.-600    	; 0x1ea <lcd_e_port_low>

    Delay_us(100);
     442:	8f e8       	ldi	r24, 0x8F	; 143
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	f1 f7       	brne	.-4      	; 0x446 <lcd_init+0x56>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <lcd_init+0x5c>
     44c:	00 00       	nop

    lcd_e_port_high();
     44e:	cf de       	rcall	.-610    	; 0x1ee <lcd_e_port_high>
    Delay_ns(500);
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	9a 95       	dec	r25
     454:	f1 f7       	brne	.-4      	; 0x452 <lcd_init+0x62>
     456:	00 c0       	rjmp	.+0      	; 0x458 <lcd_init+0x68>
    lcd_e_port_low();
     458:	c8 de       	rcall	.-624    	; 0x1ea <lcd_e_port_low>

    Delay_us(40);
     45a:	85 ed       	ldi	r24, 0xD5	; 213
     45c:	8a 95       	dec	r24
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0x6c>
     460:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
     462:	2f 98       	cbi	0x05, 7	; 5
      Delay_ns(100);
     464:	00 c0       	rjmp	.+0      	; 0x466 <lcd_init+0x76>
      lcd_e_port_high();
     466:	c3 de       	rcall	.-634    	; 0x1ee <lcd_e_port_high>
      Delay_ns(500);
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	9a 95       	dec	r25
     46c:	f1 f7       	brne	.-4      	; 0x46a <lcd_init+0x7a>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <lcd_init+0x80>
      lcd_e_port_low();
     470:	bc de       	rcall	.-648    	; 0x1ea <lcd_e_port_low>
      Delay_us(40);
     472:	85 ed       	ldi	r24, 0xD5	; 213
     474:	8a 95       	dec	r24
     476:	f1 f7       	brne	.-4      	; 0x474 <lcd_init+0x84>
     478:	00 00       	nop

      lcd_db4_port_low();
     47a:	2f 98       	cbi	0x05, 7	; 5
      Delay_ns(100);
     47c:	00 c0       	rjmp	.+0      	; 0x47e <lcd_init+0x8e>
      lcd_e_port_high();
     47e:	b7 de       	rcall	.-658    	; 0x1ee <lcd_e_port_high>
      Delay_ns(500);
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	9a 95       	dec	r25
     484:	f1 f7       	brne	.-4      	; 0x482 <lcd_init+0x92>
     486:	00 c0       	rjmp	.+0      	; 0x488 <lcd_init+0x98>
      lcd_e_port_low();
     488:	b0 de       	rcall	.-672    	; 0x1ea <lcd_e_port_low>
      Delay_ns(500);
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	8a 95       	dec	r24
     48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_init+0x9c>
     490:	00 c0       	rjmp	.+0      	; 0x492 <lcd_init+0xa2>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
     492:	2c 9a       	sbi	0x05, 4	; 5
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
     494:	00 c0       	rjmp	.+0      	; 0x496 <lcd_init+0xa6>
      lcd_e_port_high();
     496:	ab de       	rcall	.-682    	; 0x1ee <lcd_e_port_high>
      Delay_ns(500);
     498:	92 e0       	ldi	r25, 0x02	; 2
     49a:	9a 95       	dec	r25
     49c:	f1 f7       	brne	.-4      	; 0x49a <lcd_init+0xaa>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <lcd_init+0xb0>
      lcd_e_port_low();
     4a0:	a4 de       	rcall	.-696    	; 0x1ea <lcd_e_port_low>
      Delay_us(40);
     4a2:	85 ed       	ldi	r24, 0xD5	; 213
     4a4:	8a 95       	dec	r24
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <lcd_init+0xb4>
     4a8:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
     4aa:	88 e0       	ldi	r24, 0x08	; 8
     4ac:	90 df       	rcall	.-224    	; 0x3ce <lcd_command>

    //Display Clear
    lcd_clrscr();
     4ae:	91 df       	rcall	.-222    	; 0x3d2 <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
     4b0:	86 e0       	ldi	r24, 0x06	; 6
     4b2:	8d df       	rcall	.-230    	; 0x3ce <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
     4b4:	8c e0       	ldi	r24, 0x0C	; 12
     4b6:	8b cf       	rjmp	.-234    	; 0x3ce <lcd_command>

000004b8 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ec 01       	movw	r28, r24
     4be:	fc 01       	movw	r30, r24
     4c0:	70 96       	adiw	r30, 0x10	; 16
     4c2:	8b e0       	ldi	r24, 0x0B	; 11
     4c4:	df 01       	movw	r26, r30
     4c6:	1d 92       	st	X+, r1
     4c8:	8a 95       	dec	r24
     4ca:	e9 f7       	brne	.-6      	; 0x4c6 <CDC_Device_ConfigureEndpoints+0xe>
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	8c 83       	std	Y+4, r24	; 0x04
     4d0:	89 87       	std	Y+9, r24	; 0x09
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	8e 87       	std	Y+14, r24	; 0x0e
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	7d d2       	rcall	.+1274   	; 0x9d8 <Endpoint_ConfigureEndpointTable>
     4de:	88 23       	and	r24, r24
     4e0:	61 f0       	breq	.+24     	; 0x4fa <CDC_Device_ConfigureEndpoints+0x42>
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	ce 01       	movw	r24, r28
     4e6:	06 96       	adiw	r24, 0x06	; 6
     4e8:	77 d2       	rcall	.+1262   	; 0x9d8 <Endpoint_ConfigureEndpointTable>
     4ea:	88 23       	and	r24, r24
     4ec:	31 f0       	breq	.+12     	; 0x4fa <CDC_Device_ConfigureEndpoints+0x42>
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	ce 01       	movw	r24, r28
     4f2:	0b 96       	adiw	r24, 0x0b	; 11
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	6f c2       	rjmp	.+1246   	; 0x9d8 <Endpoint_ConfigureEndpointTable>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <CDC_Device_SendByte>:
     502:	cf 93       	push	r28
     504:	c6 2f       	mov	r28, r22
     506:	20 91 6d 01 	lds	r18, 0x016D
     50a:	24 30       	cpi	r18, 0x04	; 4
     50c:	f1 f4       	brne	.+60     	; 0x54a <CDC_Device_SendByte+0x48>
     50e:	fc 01       	movw	r30, r24
     510:	44 89       	ldd	r20, Z+20	; 0x14
     512:	55 89       	ldd	r21, Z+21	; 0x15
     514:	66 89       	ldd	r22, Z+22	; 0x16
     516:	77 89       	ldd	r23, Z+23	; 0x17
     518:	45 2b       	or	r20, r21
     51a:	46 2b       	or	r20, r22
     51c:	47 2b       	or	r20, r23
     51e:	a9 f0       	breq	.+42     	; 0x54a <CDC_Device_SendByte+0x48>
     520:	81 81       	ldd	r24, Z+1	; 0x01
     522:	8f 70       	andi	r24, 0x0F	; 15
     524:	80 93 e9 00 	sts	0x00E9, r24
     528:	80 91 e8 00 	lds	r24, 0x00E8
     52c:	85 ff       	sbrs	r24, 5
     52e:	04 c0       	rjmp	.+8      	; 0x538 <CDC_Device_SendByte+0x36>
     530:	c0 93 f1 00 	sts	0x00F1, r28
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0a c0       	rjmp	.+20     	; 0x54c <CDC_Device_SendByte+0x4a>
     538:	80 91 e8 00 	lds	r24, 0x00E8
     53c:	8e 77       	andi	r24, 0x7E	; 126
     53e:	80 93 e8 00 	sts	0x00E8, r24
     542:	a8 d2       	rcall	.+1360   	; 0xa94 <Endpoint_WaitUntilReady>
     544:	88 23       	and	r24, r24
     546:	a1 f3       	breq	.-24     	; 0x530 <CDC_Device_SendByte+0x2e>
     548:	01 c0       	rjmp	.+2      	; 0x54c <CDC_Device_SendByte+0x4a>
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <CDC_Device_putchar>:
     550:	fb 01       	movw	r30, r22
     552:	68 2f       	mov	r22, r24
     554:	84 85       	ldd	r24, Z+12	; 0x0c
     556:	95 85       	ldd	r25, Z+13	; 0x0d
     558:	d4 df       	rcall	.-88     	; 0x502 <CDC_Device_SendByte>
     55a:	21 e0       	ldi	r18, 0x01	; 1
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	81 11       	cpse	r24, r1
     560:	02 c0       	rjmp	.+4      	; 0x566 <CDC_Device_putchar+0x16>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	88 27       	eor	r24, r24
     568:	99 27       	eor	r25, r25
     56a:	82 1b       	sub	r24, r18
     56c:	93 0b       	sbc	r25, r19
     56e:	08 95       	ret

00000570 <CDC_Device_Flush>:
     570:	20 91 6d 01 	lds	r18, 0x016D
     574:	24 30       	cpi	r18, 0x04	; 4
     576:	41 f5       	brne	.+80     	; 0x5c8 <CDC_Device_Flush+0x58>
     578:	fc 01       	movw	r30, r24
     57a:	44 89       	ldd	r20, Z+20	; 0x14
     57c:	55 89       	ldd	r21, Z+21	; 0x15
     57e:	66 89       	ldd	r22, Z+22	; 0x16
     580:	77 89       	ldd	r23, Z+23	; 0x17
     582:	45 2b       	or	r20, r21
     584:	46 2b       	or	r20, r22
     586:	47 2b       	or	r20, r23
     588:	f9 f0       	breq	.+62     	; 0x5c8 <CDC_Device_Flush+0x58>
     58a:	81 81       	ldd	r24, Z+1	; 0x01
     58c:	8f 70       	andi	r24, 0x0F	; 15
     58e:	80 93 e9 00 	sts	0x00E9, r24
     592:	20 91 f3 00 	lds	r18, 0x00F3
     596:	80 91 f2 00 	lds	r24, 0x00F2
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	92 2b       	or	r25, r18
     59e:	89 2b       	or	r24, r25
     5a0:	89 f0       	breq	.+34     	; 0x5c4 <CDC_Device_Flush+0x54>
     5a2:	90 91 e8 00 	lds	r25, 0x00E8
     5a6:	80 91 e8 00 	lds	r24, 0x00E8
     5aa:	8e 77       	andi	r24, 0x7E	; 126
     5ac:	80 93 e8 00 	sts	0x00E8, r24
     5b0:	95 fd       	sbrc	r25, 5
     5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <CDC_Device_Flush+0x54>
     5b4:	6f d2       	rcall	.+1246   	; 0xa94 <Endpoint_WaitUntilReady>
     5b6:	81 11       	cpse	r24, r1
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <CDC_Device_Flush+0x5a>
     5ba:	80 91 e8 00 	lds	r24, 0x00E8
     5be:	8e 77       	andi	r24, 0x7E	; 126
     5c0:	80 93 e8 00 	sts	0x00E8, r24
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	08 95       	ret
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	08 95       	ret

000005cc <CDC_Device_USBTask>:
     5cc:	20 91 6d 01 	lds	r18, 0x016D
     5d0:	24 30       	cpi	r18, 0x04	; 4
     5d2:	89 f4       	brne	.+34     	; 0x5f6 <CDC_Device_USBTask+0x2a>
     5d4:	fc 01       	movw	r30, r24
     5d6:	44 89       	ldd	r20, Z+20	; 0x14
     5d8:	55 89       	ldd	r21, Z+21	; 0x15
     5da:	66 89       	ldd	r22, Z+22	; 0x16
     5dc:	77 89       	ldd	r23, Z+23	; 0x17
     5de:	45 2b       	or	r20, r21
     5e0:	46 2b       	or	r20, r22
     5e2:	47 2b       	or	r20, r23
     5e4:	41 f0       	breq	.+16     	; 0x5f6 <CDC_Device_USBTask+0x2a>
     5e6:	21 81       	ldd	r18, Z+1	; 0x01
     5e8:	2f 70       	andi	r18, 0x0F	; 15
     5ea:	20 93 e9 00 	sts	0x00E9, r18
     5ee:	20 91 e8 00 	lds	r18, 0x00E8
     5f2:	20 fd       	sbrc	r18, 0
     5f4:	bd cf       	rjmp	.-134    	; 0x570 <CDC_Device_Flush>
     5f6:	08 95       	ret

000005f8 <CDC_Device_ReceiveByte>:
     5f8:	20 91 6d 01 	lds	r18, 0x016D
     5fc:	24 30       	cpi	r18, 0x04	; 4
     5fe:	19 f0       	breq	.+6      	; 0x606 <CDC_Device_ReceiveByte+0xe>
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	9f ef       	ldi	r25, 0xFF	; 255
     604:	08 95       	ret
     606:	fc 01       	movw	r30, r24
     608:	44 89       	ldd	r20, Z+20	; 0x14
     60a:	55 89       	ldd	r21, Z+21	; 0x15
     60c:	66 89       	ldd	r22, Z+22	; 0x16
     60e:	77 89       	ldd	r23, Z+23	; 0x17
     610:	45 2b       	or	r20, r21
     612:	46 2b       	or	r20, r22
     614:	47 2b       	or	r20, r23
     616:	a1 f3       	breq	.-24     	; 0x600 <CDC_Device_ReceiveByte+0x8>
     618:	86 81       	ldd	r24, Z+6	; 0x06
     61a:	8f 70       	andi	r24, 0x0F	; 15
     61c:	80 93 e9 00 	sts	0x00E9, r24
     620:	80 91 e8 00 	lds	r24, 0x00E8
     624:	82 ff       	sbrs	r24, 2
     626:	ec cf       	rjmp	.-40     	; 0x600 <CDC_Device_ReceiveByte+0x8>
     628:	20 91 f3 00 	lds	r18, 0x00F3
     62c:	80 91 f2 00 	lds	r24, 0x00F2
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	92 2b       	or	r25, r18
     634:	89 2b       	or	r24, r25
     636:	21 f0       	breq	.+8      	; 0x640 <CDC_Device_ReceiveByte+0x48>
     638:	20 91 f1 00 	lds	r18, 0x00F1
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	02 c0       	rjmp	.+4      	; 0x644 <CDC_Device_ReceiveByte+0x4c>
     640:	2f ef       	ldi	r18, 0xFF	; 255
     642:	3f ef       	ldi	r19, 0xFF	; 255
     644:	40 91 f3 00 	lds	r20, 0x00F3
     648:	80 91 f2 00 	lds	r24, 0x00F2
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	94 2b       	or	r25, r20
     650:	89 2b       	or	r24, r25
     652:	29 f4       	brne	.+10     	; 0x65e <CDC_Device_ReceiveByte+0x66>
     654:	80 91 e8 00 	lds	r24, 0x00E8
     658:	8b 77       	andi	r24, 0x7B	; 123
     65a:	80 93 e8 00 	sts	0x00E8, r24
     65e:	c9 01       	movw	r24, r18
     660:	08 95       	ret

00000662 <CDC_Device_getchar>:
     662:	fc 01       	movw	r30, r24
     664:	84 85       	ldd	r24, Z+12	; 0x0c
     666:	95 85       	ldd	r25, Z+13	; 0x0d
     668:	c7 df       	rcall	.-114    	; 0x5f8 <CDC_Device_ReceiveByte>
     66a:	97 ff       	sbrs	r25, 7
     66c:	02 c0       	rjmp	.+4      	; 0x672 <CDC_Device_getchar+0x10>
     66e:	8e ef       	ldi	r24, 0xFE	; 254
     670:	9f ef       	ldi	r25, 0xFF	; 255
     672:	08 95       	ret

00000674 <CDC_Device_CreateStream>:
     674:	fb 01       	movw	r30, r22
     676:	2e e0       	ldi	r18, 0x0E	; 14
     678:	db 01       	movw	r26, r22
     67a:	1d 92       	st	X+, r1
     67c:	2a 95       	dec	r18
     67e:	e9 f7       	brne	.-6      	; 0x67a <CDC_Device_CreateStream+0x6>
     680:	23 e0       	ldi	r18, 0x03	; 3
     682:	23 83       	std	Z+3, r18	; 0x03
     684:	28 ea       	ldi	r18, 0xA8	; 168
     686:	32 e0       	ldi	r19, 0x02	; 2
     688:	31 87       	std	Z+9, r19	; 0x09
     68a:	20 87       	std	Z+8, r18	; 0x08
     68c:	21 e3       	ldi	r18, 0x31	; 49
     68e:	33 e0       	ldi	r19, 0x03	; 3
     690:	33 87       	std	Z+11, r19	; 0x0b
     692:	22 87       	std	Z+10, r18	; 0x0a
     694:	95 87       	std	Z+13, r25	; 0x0d
     696:	84 87       	std	Z+12, r24	; 0x0c
     698:	08 95       	ret

0000069a <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     69a:	08 95       	ret

0000069c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     6a2:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     6a6:	83 ff       	sbrs	r24, 3
     6a8:	a6 c0       	rjmp	.+332    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     6aa:	88 81       	ld	r24, Y
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	20 91 72 01 	lds	r18, 0x0172
     6b2:	30 91 73 01 	lds	r19, 0x0173
     6b6:	28 17       	cp	r18, r24
     6b8:	39 07       	cpc	r19, r25
     6ba:	09 f0       	breq	.+2      	; 0x6be <CDC_Device_ProcessControlRequest+0x22>
     6bc:	9c c0       	rjmp	.+312    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     6be:	80 91 6f 01 	lds	r24, 0x016F
     6c2:	81 32       	cpi	r24, 0x21	; 33
     6c4:	61 f0       	breq	.+24     	; 0x6de <CDC_Device_ProcessControlRequest+0x42>
     6c6:	20 f4       	brcc	.+8      	; 0x6d0 <CDC_Device_ProcessControlRequest+0x34>
     6c8:	80 32       	cpi	r24, 0x20	; 32
     6ca:	09 f4       	brne	.+2      	; 0x6ce <CDC_Device_ProcessControlRequest+0x32>
     6cc:	3e c0       	rjmp	.+124    	; 0x74a <CDC_Device_ProcessControlRequest+0xae>
     6ce:	93 c0       	rjmp	.+294    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x15a>
     6d0:	82 32       	cpi	r24, 0x22	; 34
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <CDC_Device_ProcessControlRequest+0x3a>
     6d4:	6c c0       	rjmp	.+216    	; 0x7ae <CDC_Device_ProcessControlRequest+0x112>
     6d6:	83 32       	cpi	r24, 0x23	; 35
     6d8:	09 f4       	brne	.+2      	; 0x6dc <CDC_Device_ProcessControlRequest+0x40>
     6da:	7d c0       	rjmp	.+250    	; 0x7d6 <CDC_Device_ProcessControlRequest+0x13a>
     6dc:	8c c0       	rjmp	.+280    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     6de:	80 91 6e 01 	lds	r24, 0x016E
     6e2:	81 3a       	cpi	r24, 0xA1	; 161
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <CDC_Device_ProcessControlRequest+0x4c>
     6e6:	87 c0       	rjmp	.+270    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6e8:	80 91 e8 00 	lds	r24, 0x00E8
     6ec:	87 7f       	andi	r24, 0xF7	; 247
     6ee:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6f2:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     6f6:	80 ff       	sbrs	r24, 0
     6f8:	fc cf       	rjmp	.-8      	; 0x6f2 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     6fa:	4c 89       	ldd	r20, Y+20	; 0x14
     6fc:	5d 89       	ldd	r21, Y+21	; 0x15
     6fe:	6e 89       	ldd	r22, Y+22	; 0x16
     700:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     702:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     706:	bb 27       	eor	r27, r27
     708:	a7 2f       	mov	r26, r23
     70a:	96 2f       	mov	r25, r22
     70c:	85 2f       	mov	r24, r21
     70e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     712:	cb 01       	movw	r24, r22
     714:	aa 27       	eor	r26, r26
     716:	bb 27       	eor	r27, r27
     718:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     71c:	47 2f       	mov	r20, r23
     71e:	55 27       	eor	r21, r21
     720:	66 27       	eor	r22, r22
     722:	77 27       	eor	r23, r23
     724:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     728:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     72a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     72e:	89 8d       	ldd	r24, Y+25	; 0x19
     730:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     734:	8a 8d       	ldd	r24, Y+26	; 0x1a
     736:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     73a:	80 91 e8 00 	lds	r24, 0x00E8
     73e:	8e 77       	andi	r24, 0x7E	; 126
     740:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     748:	84 c1       	rjmp	.+776    	; 0xa52 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     74a:	80 91 6e 01 	lds	r24, 0x016E
     74e:	81 32       	cpi	r24, 0x21	; 33
     750:	09 f0       	breq	.+2      	; 0x754 <CDC_Device_ProcessControlRequest+0xb8>
     752:	51 c0       	rjmp	.+162    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     754:	80 91 e8 00 	lds	r24, 0x00E8
     758:	87 7f       	andi	r24, 0xF7	; 247
     75a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     75e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     762:	82 fd       	sbrc	r24, 2
     764:	05 c0       	rjmp	.+10     	; 0x770 <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     766:	80 91 6d 01 	lds	r24, 0x016D
     76a:	81 11       	cpse	r24, r1
     76c:	f8 cf       	rjmp	.-16     	; 0x75e <CDC_Device_ProcessControlRequest+0xc2>
     76e:	43 c0       	rjmp	.+134    	; 0x7f6 <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     770:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     774:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     778:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     77c:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     780:	3c 8b       	std	Y+20, r19	; 0x14
     782:	2d 8b       	std	Y+21, r18	; 0x15
     784:	9e 8b       	std	Y+22, r25	; 0x16
     786:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     788:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     78c:	88 8f       	std	Y+24, r24	; 0x18
     78e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     792:	89 8f       	std	Y+25, r24	; 0x19
     794:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     798:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     79a:	80 91 e8 00 	lds	r24, 0x00E8
     79e:	8b 77       	andi	r24, 0x7B	; 123
     7a0:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     7a4:	56 d1       	rcall	.+684    	; 0xa52 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     7a6:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     7ac:	76 cf       	rjmp	.-276    	; 0x69a <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     7ae:	80 91 6e 01 	lds	r24, 0x016E
     7b2:	81 32       	cpi	r24, 0x21	; 33
     7b4:	01 f5       	brne	.+64     	; 0x7f6 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     7b6:	80 91 e8 00 	lds	r24, 0x00E8
     7ba:	87 7f       	andi	r24, 0xF7	; 247
     7bc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     7c0:	48 d1       	rcall	.+656    	; 0xa52 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     7c2:	80 91 70 01 	lds	r24, 0x0170
     7c6:	90 91 71 01 	lds	r25, 0x0171
     7ca:	99 8b       	std	Y+17, r25	; 0x11
     7cc:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     7ce:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     7d4:	62 cf       	rjmp	.-316    	; 0x69a <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     7d6:	80 91 6e 01 	lds	r24, 0x016E
     7da:	81 32       	cpi	r24, 0x21	; 33
     7dc:	61 f4       	brne	.+24     	; 0x7f6 <CDC_Device_ProcessControlRequest+0x15a>
     7de:	80 91 e8 00 	lds	r24, 0x00E8
     7e2:	87 7f       	andi	r24, 0xF7	; 247
     7e4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     7e8:	34 d1       	rcall	.+616    	; 0xa52 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     7ea:	60 91 70 01 	lds	r22, 0x0170
     7ee:	ce 01       	movw	r24, r28
			}

			break;
	}
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     7f4:	52 cf       	rjmp	.-348    	; 0x69a <CDC_Device_Event_Stub>
			}

			break;
	}
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     7fc:	20 91 74 01 	lds	r18, 0x0174
     800:	30 91 75 01 	lds	r19, 0x0175
     804:	26 17       	cp	r18, r22
     806:	37 07       	cpc	r19, r23
     808:	48 f0       	brcs	.+18     	; 0x81c <Endpoint_Write_Control_Stream_LE+0x20>
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	39 f4       	brne	.+14     	; 0x81e <Endpoint_Write_Control_Stream_LE+0x22>
     810:	20 91 e8 00 	lds	r18, 0x00E8
     814:	2e 77       	andi	r18, 0x7E	; 126
     816:	20 93 e8 00 	sts	0x00E8, r18
     81a:	01 c0       	rjmp	.+2      	; 0x81e <Endpoint_Write_Control_Stream_LE+0x22>
     81c:	b9 01       	movw	r22, r18
     81e:	fc 01       	movw	r30, r24
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	61 15       	cp	r22, r1
     824:	71 05       	cpc	r23, r1
     826:	a9 f1       	breq	.+106    	; 0x892 <Endpoint_Write_Control_Stream_LE+0x96>
     828:	80 91 6d 01 	lds	r24, 0x016D
     82c:	88 23       	and	r24, r24
     82e:	e9 f1       	breq	.+122    	; 0x8aa <Endpoint_Write_Control_Stream_LE+0xae>
     830:	85 30       	cpi	r24, 0x05	; 5
     832:	e9 f1       	breq	.+122    	; 0x8ae <Endpoint_Write_Control_Stream_LE+0xb2>
     834:	80 91 e8 00 	lds	r24, 0x00E8
     838:	83 fd       	sbrc	r24, 3
     83a:	35 c0       	rjmp	.+106    	; 0x8a6 <Endpoint_Write_Control_Stream_LE+0xaa>
     83c:	80 91 e8 00 	lds	r24, 0x00E8
     840:	82 ff       	sbrs	r24, 2
     842:	06 c0       	rjmp	.+12     	; 0x850 <Endpoint_Write_Control_Stream_LE+0x54>
     844:	80 91 e8 00 	lds	r24, 0x00E8
     848:	82 ff       	sbrs	r24, 2
     84a:	26 c0       	rjmp	.+76     	; 0x898 <Endpoint_Write_Control_Stream_LE+0x9c>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	08 95       	ret
     850:	80 91 e8 00 	lds	r24, 0x00E8
     854:	80 ff       	sbrs	r24, 0
     856:	e5 cf       	rjmp	.-54     	; 0x822 <Endpoint_Write_Control_Stream_LE+0x26>
     858:	20 91 f3 00 	lds	r18, 0x00F3
     85c:	80 91 f2 00 	lds	r24, 0x00F2
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	92 2b       	or	r25, r18
     864:	61 15       	cp	r22, r1
     866:	71 05       	cpc	r23, r1
     868:	51 f0       	breq	.+20     	; 0x87e <Endpoint_Write_Control_Stream_LE+0x82>
     86a:	88 30       	cpi	r24, 0x08	; 8
     86c:	91 05       	cpc	r25, r1
     86e:	38 f4       	brcc	.+14     	; 0x87e <Endpoint_Write_Control_Stream_LE+0x82>
     870:	21 91       	ld	r18, Z+
     872:	20 93 f1 00 	sts	0x00F1, r18
     876:	61 50       	subi	r22, 0x01	; 1
     878:	71 09       	sbc	r23, r1
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	f3 cf       	rjmp	.-26     	; 0x864 <Endpoint_Write_Control_Stream_LE+0x68>
     87e:	21 e0       	ldi	r18, 0x01	; 1
     880:	08 97       	sbiw	r24, 0x08	; 8
     882:	09 f0       	breq	.+2      	; 0x886 <Endpoint_Write_Control_Stream_LE+0x8a>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	80 91 e8 00 	lds	r24, 0x00E8
     88a:	8e 77       	andi	r24, 0x7E	; 126
     88c:	80 93 e8 00 	sts	0x00E8, r24
     890:	c8 cf       	rjmp	.-112    	; 0x822 <Endpoint_Write_Control_Stream_LE+0x26>
     892:	21 11       	cpse	r18, r1
     894:	c9 cf       	rjmp	.-110    	; 0x828 <Endpoint_Write_Control_Stream_LE+0x2c>
     896:	d6 cf       	rjmp	.-84     	; 0x844 <Endpoint_Write_Control_Stream_LE+0x48>
     898:	80 91 6d 01 	lds	r24, 0x016D
     89c:	88 23       	and	r24, r24
     89e:	29 f0       	breq	.+10     	; 0x8aa <Endpoint_Write_Control_Stream_LE+0xae>
     8a0:	85 30       	cpi	r24, 0x05	; 5
     8a2:	81 f6       	brne	.-96     	; 0x844 <Endpoint_Write_Control_Stream_LE+0x48>
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <Endpoint_Write_Control_Stream_LE+0xb2>
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	08 95       	ret
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	08 95       	ret
     8ae:	83 e0       	ldi	r24, 0x03	; 3
     8b0:	08 95       	ret

000008b2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     8b2:	20 91 74 01 	lds	r18, 0x0174
     8b6:	30 91 75 01 	lds	r19, 0x0175
     8ba:	26 17       	cp	r18, r22
     8bc:	37 07       	cpc	r19, r23
     8be:	48 f0       	brcs	.+18     	; 0x8d2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8c0:	61 15       	cp	r22, r1
     8c2:	71 05       	cpc	r23, r1
     8c4:	39 f4       	brne	.+14     	; 0x8d4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8c6:	20 91 e8 00 	lds	r18, 0x00E8
     8ca:	2e 77       	andi	r18, 0x7E	; 126
     8cc:	20 93 e8 00 	sts	0x00E8, r18
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <Endpoint_Write_Control_PStream_LE+0x22>
     8d2:	b9 01       	movw	r22, r18
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     8d8:	61 15       	cp	r22, r1
     8da:	71 05       	cpc	r23, r1
     8dc:	c1 f1       	breq	.+112    	; 0x94e <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8de:	80 91 6d 01 	lds	r24, 0x016D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8e2:	88 23       	and	r24, r24
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0x36>
     8e6:	3f c0       	rjmp	.+126    	; 0x966 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8e8:	85 30       	cpi	r24, 0x05	; 5
     8ea:	09 f4       	brne	.+2      	; 0x8ee <Endpoint_Write_Control_PStream_LE+0x3c>
     8ec:	3e c0       	rjmp	.+124    	; 0x96a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8ee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8f2:	83 fd       	sbrc	r24, 3
     8f4:	36 c0       	rjmp	.+108    	; 0x962 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8f6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     8fa:	82 ff       	sbrs	r24, 2
     8fc:	06 c0       	rjmp	.+12     	; 0x90a <Endpoint_Write_Control_PStream_LE+0x58>
     8fe:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     902:	82 ff       	sbrs	r24, 2
     904:	27 c0       	rjmp	.+78     	; 0x954 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     90a:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     90e:	80 ff       	sbrs	r24, 0
     910:	e3 cf       	rjmp	.-58     	; 0x8d8 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     912:	20 91 f3 00 	lds	r18, 0x00F3
     916:	80 91 f2 00 	lds	r24, 0x00F2
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     91e:	61 15       	cp	r22, r1
     920:	71 05       	cpc	r23, r1
     922:	59 f0       	breq	.+22     	; 0x93a <Endpoint_Write_Control_PStream_LE+0x88>
     924:	88 30       	cpi	r24, 0x08	; 8
     926:	91 05       	cpc	r25, r1
     928:	40 f4       	brcc	.+16     	; 0x93a <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     92a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     92c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     930:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     932:	61 50       	subi	r22, 0x01	; 1
     934:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	f2 cf       	rjmp	.-28     	; 0x91e <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	08 97       	sbiw	r24, 0x08	; 8
     93e:	09 f0       	breq	.+2      	; 0x942 <Endpoint_Write_Control_PStream_LE+0x90>
     940:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     942:	80 91 e8 00 	lds	r24, 0x00E8
     946:	8e 77       	andi	r24, 0x7E	; 126
     948:	80 93 e8 00 	sts	0x00E8, r24
     94c:	c5 cf       	rjmp	.-118    	; 0x8d8 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     94e:	21 11       	cpse	r18, r1
     950:	c6 cf       	rjmp	.-116    	; 0x8de <Endpoint_Write_Control_PStream_LE+0x2c>
     952:	d5 cf       	rjmp	.-86     	; 0x8fe <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     954:	80 91 6d 01 	lds	r24, 0x016D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     958:	88 23       	and	r24, r24
     95a:	29 f0       	breq	.+10     	; 0x966 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     95c:	85 30       	cpi	r24, 0x05	; 5
     95e:	79 f6       	brne	.-98     	; 0x8fe <Endpoint_Write_Control_PStream_LE+0x4c>
     960:	04 c0       	rjmp	.+8      	; 0x96a <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     96a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     96c:	08 95       	ret

0000096e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     96e:	98 2f       	mov	r25, r24
     970:	97 30       	cpi	r25, 0x07	; 7
     972:	58 f5       	brcc	.+86     	; 0x9ca <Endpoint_ConfigureEndpoint_Prv+0x5c>
     974:	90 93 e9 00 	sts	0x00E9, r25
     978:	98 17       	cp	r25, r24
     97a:	39 f0       	breq	.+14     	; 0x98a <Endpoint_ConfigureEndpoint_Prv+0x1c>
     97c:	70 91 ec 00 	lds	r23, 0x00EC
     980:	20 91 ed 00 	lds	r18, 0x00ED
     984:	50 91 f0 00 	lds	r21, 0x00F0
     988:	03 c0       	rjmp	.+6      	; 0x990 <Endpoint_ConfigureEndpoint_Prv+0x22>
     98a:	24 2f       	mov	r18, r20
     98c:	76 2f       	mov	r23, r22
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	21 ff       	sbrs	r18, 1
     992:	19 c0       	rjmp	.+50     	; 0x9c6 <Endpoint_ConfigureEndpoint_Prv+0x58>
     994:	30 91 eb 00 	lds	r19, 0x00EB
     998:	3e 7f       	andi	r19, 0xFE	; 254
     99a:	30 93 eb 00 	sts	0x00EB, r19
     99e:	30 91 ed 00 	lds	r19, 0x00ED
     9a2:	3d 7f       	andi	r19, 0xFD	; 253
     9a4:	30 93 ed 00 	sts	0x00ED, r19
     9a8:	30 91 eb 00 	lds	r19, 0x00EB
     9ac:	31 60       	ori	r19, 0x01	; 1
     9ae:	30 93 eb 00 	sts	0x00EB, r19
     9b2:	70 93 ec 00 	sts	0x00EC, r23
     9b6:	20 93 ed 00 	sts	0x00ED, r18
     9ba:	50 93 f0 00 	sts	0x00F0, r21
     9be:	20 91 ee 00 	lds	r18, 0x00EE
     9c2:	27 ff       	sbrs	r18, 7
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <Endpoint_ConfigureEndpoint_Prv+0x66>
     9c6:	9f 5f       	subi	r25, 0xFF	; 255
     9c8:	d3 cf       	rjmp	.-90     	; 0x970 <Endpoint_ConfigureEndpoint_Prv+0x2>
     9ca:	8f 70       	andi	r24, 0x0F	; 15
     9cc:	80 93 e9 00 	sts	0x00E9, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	08 95       	ret
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	08 95       	ret

000009d8 <Endpoint_ConfigureEndpointTable>:
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	06 2f       	mov	r16, r22
     9e2:	ec 01       	movw	r28, r24
     9e4:	10 e0       	ldi	r17, 0x00	; 0
     9e6:	10 17       	cp	r17, r16
     9e8:	71 f1       	breq	.+92     	; 0xa46 <Endpoint_ConfigureEndpointTable+0x6e>
     9ea:	98 81       	ld	r25, Y
     9ec:	99 23       	and	r25, r25
     9ee:	41 f1       	breq	.+80     	; 0xa40 <Endpoint_ConfigureEndpointTable+0x68>
     9f0:	2c 81       	ldd	r18, Y+4	; 0x04
     9f2:	e9 81       	ldd	r30, Y+1	; 0x01
     9f4:	fa 81       	ldd	r31, Y+2	; 0x02
     9f6:	7b 81       	ldd	r23, Y+3	; 0x03
     9f8:	89 2f       	mov	r24, r25
     9fa:	8f 70       	andi	r24, 0x0F	; 15
     9fc:	87 30       	cpi	r24, 0x07	; 7
     9fe:	10 f0       	brcs	.+4      	; 0xa04 <Endpoint_ConfigureEndpointTable+0x2c>
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	22 c0       	rjmp	.+68     	; 0xa48 <Endpoint_ConfigureEndpointTable+0x70>
     a04:	22 30       	cpi	r18, 0x02	; 2
     a06:	10 f0       	brcs	.+4      	; 0xa0c <Endpoint_ConfigureEndpointTable+0x34>
     a08:	56 e0       	ldi	r21, 0x06	; 6
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <Endpoint_ConfigureEndpointTable+0x36>
     a0c:	52 e0       	ldi	r21, 0x02	; 2
     a0e:	28 e0       	ldi	r18, 0x08	; 8
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	2e 17       	cp	r18, r30
     a16:	3f 07       	cpc	r19, r31
     a18:	20 f4       	brcc	.+8      	; 0xa22 <Endpoint_ConfigureEndpointTable+0x4a>
     a1a:	4f 5f       	subi	r20, 0xFF	; 255
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	f9 cf       	rjmp	.-14     	; 0xa14 <Endpoint_ConfigureEndpointTable+0x3c>
     a22:	42 95       	swap	r20
     a24:	40 7f       	andi	r20, 0xF0	; 240
     a26:	45 2b       	or	r20, r21
     a28:	69 2f       	mov	r22, r25
     a2a:	66 1f       	adc	r22, r22
     a2c:	66 27       	eor	r22, r22
     a2e:	66 1f       	adc	r22, r22
     a30:	90 e4       	ldi	r25, 0x40	; 64
     a32:	79 9f       	mul	r23, r25
     a34:	90 01       	movw	r18, r0
     a36:	11 24       	eor	r1, r1
     a38:	62 2b       	or	r22, r18
     a3a:	99 df       	rcall	.-206    	; 0x96e <Endpoint_ConfigureEndpoint_Prv>
     a3c:	88 23       	and	r24, r24
     a3e:	01 f3       	breq	.-64     	; 0xa00 <Endpoint_ConfigureEndpointTable+0x28>
     a40:	1f 5f       	subi	r17, 0xFF	; 255
     a42:	25 96       	adiw	r28, 0x05	; 5
     a44:	d0 cf       	rjmp	.-96     	; 0x9e6 <Endpoint_ConfigureEndpointTable+0xe>
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     a52:	80 91 6e 01 	lds	r24, 0x016E
     a56:	87 fd       	sbrc	r24, 7
     a58:	05 c0       	rjmp	.+10     	; 0xa64 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a5a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     a5e:	80 ff       	sbrs	r24, 0
     a60:	0e c0       	rjmp	.+28     	; 0xa7e <Endpoint_ClearStatusStage+0x2c>
     a62:	12 c0       	rjmp	.+36     	; 0xa88 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a64:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     a68:	82 fd       	sbrc	r24, 2
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a6c:	80 91 6d 01 	lds	r24, 0x016D
     a70:	81 11       	cpse	r24, r1
     a72:	f8 cf       	rjmp	.-16     	; 0xa64 <Endpoint_ClearStatusStage+0x12>
     a74:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a76:	80 91 e8 00 	lds	r24, 0x00E8
     a7a:	8b 77       	andi	r24, 0x7B	; 123
     a7c:	08 c0       	rjmp	.+16     	; 0xa8e <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a7e:	80 91 6d 01 	lds	r24, 0x016D
     a82:	81 11       	cpse	r24, r1
     a84:	ea cf       	rjmp	.-44     	; 0xa5a <Endpoint_ClearStatusStage+0x8>
     a86:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a88:	80 91 e8 00 	lds	r24, 0x00E8
     a8c:	8e 77       	andi	r24, 0x7E	; 126
     a8e:	80 93 e8 00 	sts	0x00E8, r24
     a92:	08 95       	ret

00000a94 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     a94:	80 91 e4 00 	lds	r24, 0x00E4
     a98:	90 91 e5 00 	lds	r25, 0x00E5
     a9c:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a9e:	20 91 ec 00 	lds	r18, 0x00EC
     aa2:	20 ff       	sbrs	r18, 0
     aa4:	21 c0       	rjmp	.+66     	; 0xae8 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     aa6:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     aaa:	20 fd       	sbrc	r18, 0
     aac:	21 c0       	rjmp	.+66     	; 0xaf0 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     aae:	20 91 6d 01 	lds	r18, 0x016D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ab2:	22 23       	and	r18, r18
     ab4:	89 f0       	breq	.+34     	; 0xad8 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ab6:	25 30       	cpi	r18, 0x05	; 5
     ab8:	89 f0       	breq	.+34     	; 0xadc <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     aba:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     abe:	25 fd       	sbrc	r18, 5
     ac0:	0f c0       	rjmp	.+30     	; 0xae0 <Endpoint_WaitUntilReady+0x4c>
     ac2:	20 91 e4 00 	lds	r18, 0x00E4
     ac6:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     aca:	28 17       	cp	r18, r24
     acc:	39 07       	cpc	r19, r25
     ace:	39 f3       	breq	.-50     	; 0xa9e <Endpoint_WaitUntilReady+0xa>
     ad0:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ad2:	41 f0       	breq	.+16     	; 0xae4 <Endpoint_WaitUntilReady+0x50>
     ad4:	c9 01       	movw	r24, r18
     ad6:	e3 cf       	rjmp	.-58     	; 0xa9e <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     ae4:	84 e0       	ldi	r24, 0x04	; 4
     ae6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ae8:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     aec:	22 ff       	sbrs	r18, 2
     aee:	df cf       	rjmp	.-66     	; 0xaae <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	08 95       	ret

00000af4 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     afc:	4b d0       	rcall	.+150    	; 0xb94 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     afe:	52 d0       	rcall	.+164    	; 0xba4 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b00:	c8 ed       	ldi	r28, 0xD8	; 216
     b02:	d0 e0       	ldi	r29, 0x00	; 0
     b04:	88 81       	ld	r24, Y
     b06:	8f 77       	andi	r24, 0x7F	; 127
     b08:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     b0a:	88 81       	ld	r24, Y
     b0c:	80 68       	ori	r24, 0x80	; 128
     b0e:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b10:	88 81       	ld	r24, Y
     b12:	8f 7d       	andi	r24, 0xDF	; 223
     b14:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b16:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     b18:	10 92 6d 01 	sts	0x016D, r1
	USB_Device_ConfigurationNumber  = 0;
     b1c:	10 92 69 01 	sts	0x0169, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     b20:	10 92 6b 01 	sts	0x016B, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     b24:	10 92 6a 01 	sts	0x016A, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     b28:	00 ee       	ldi	r16, 0xE0	; 224
     b2a:	10 e0       	ldi	r17, 0x00	; 0
     b2c:	f8 01       	movw	r30, r16
     b2e:	80 81       	ld	r24, Z
     b30:	8b 7f       	andi	r24, 0xFB	; 251
     b32:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     b34:	88 81       	ld	r24, Y
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b3a:	42 e0       	ldi	r20, 0x02	; 2
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	16 df       	rcall	.-468    	; 0x96e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b42:	e1 ee       	ldi	r30, 0xE1	; 225
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8e 7f       	andi	r24, 0xFE	; 254
     b4a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b4c:	e2 ee       	ldi	r30, 0xE2	; 226
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	81 60       	ori	r24, 0x01	; 1
     b54:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b5c:	f8 01       	movw	r30, r16
     b5e:	80 81       	ld	r24, Z
     b60:	8e 7f       	andi	r24, 0xFE	; 254
     b62:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b64:	88 81       	ld	r24, Y
     b66:	80 61       	ori	r24, 0x10	; 16
     b68:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	08 95       	ret

00000b74 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b74:	e8 ed       	ldi	r30, 0xD8	; 216
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	8f 7e       	andi	r24, 0xEF	; 239
     b7c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b7e:	e7 ed       	ldi	r30, 0xD7	; 215
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     b88:	84 e0       	ldi	r24, 0x04	; 4
     b8a:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	80 93 6c 01 	sts	0x016C, r24

	USB_ResetInterface();
     b92:	b0 cf       	rjmp	.-160    	; 0xaf4 <USB_ResetInterface>

00000b94 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     b94:	e8 ed       	ldi	r30, 0xD8	; 216
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	8e 7f       	andi	r24, 0xFE	; 254
     b9c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     b9e:	10 92 e2 00 	sts	0x00E2, r1
     ba2:	08 95       	ret

00000ba4 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ba4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     ba8:	10 92 e1 00 	sts	0x00E1, r1
     bac:	08 95       	ret

00000bae <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     bae:	1f 92       	push	r1
     bb0:	0f 92       	push	r0
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	0f 92       	push	r0
     bb6:	11 24       	eor	r1, r1
     bb8:	2f 93       	push	r18
     bba:	3f 93       	push	r19
     bbc:	4f 93       	push	r20
     bbe:	5f 93       	push	r21
     bc0:	6f 93       	push	r22
     bc2:	7f 93       	push	r23
     bc4:	8f 93       	push	r24
     bc6:	9f 93       	push	r25
     bc8:	af 93       	push	r26
     bca:	bf 93       	push	r27
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     bd0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     bd4:	82 ff       	sbrs	r24, 2
     bd6:	0a c0       	rjmp	.+20     	; 0xbec <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     bd8:	80 91 e2 00 	lds	r24, 0x00E2
     bdc:	82 ff       	sbrs	r24, 2
     bde:	06 c0       	rjmp	.+12     	; 0xbec <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     be0:	80 91 e1 00 	lds	r24, 0x00E1
     be4:	8b 7f       	andi	r24, 0xFB	; 251
     be6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     bea:	2c d2       	rcall	.+1112   	; 0x1044 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     bec:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     bf0:	80 ff       	sbrs	r24, 0
     bf2:	1d c0       	rjmp	.+58     	; 0xc2e <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     bf4:	80 91 d8 00 	lds	r24, 0x00D8
     bf8:	80 ff       	sbrs	r24, 0
     bfa:	19 c0       	rjmp	.+50     	; 0xc2e <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     bfc:	80 91 da 00 	lds	r24, 0x00DA
     c00:	8e 7f       	andi	r24, 0xFE	; 254
     c02:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     c06:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     c0a:	80 ff       	sbrs	r24, 0
     c0c:	0c c0       	rjmp	.+24     	; 0xc26 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c0e:	80 e1       	ldi	r24, 0x10	; 16
     c10:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c12:	82 e1       	ldi	r24, 0x12	; 18
     c14:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     c16:	09 b4       	in	r0, 0x29	; 41
     c18:	00 fe       	sbrs	r0, 0
     c1a:	fd cf       	rjmp	.-6      	; 0xc16 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	80 93 6d 01 	sts	0x016D, r24
			EVENT_USB_Device_Connect();
     c22:	a5 d2       	rcall	.+1354   	; 0x116e <EVENT_USB_Device_Connect>
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c26:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     c28:	10 92 6d 01 	sts	0x016D, r1
			EVENT_USB_Device_Disconnect();
     c2c:	a2 d2       	rcall	.+1348   	; 0x1172 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     c2e:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     c32:	80 ff       	sbrs	r24, 0
     c34:	18 c0       	rjmp	.+48     	; 0xc66 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     c36:	80 91 e2 00 	lds	r24, 0x00E2
     c3a:	80 ff       	sbrs	r24, 0
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c3e:	80 91 e2 00 	lds	r24, 0x00E2
     c42:	8e 7f       	andi	r24, 0xFE	; 254
     c44:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c48:	80 91 e2 00 	lds	r24, 0x00E2
     c4c:	80 61       	ori	r24, 0x10	; 16
     c4e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     c52:	80 91 d8 00 	lds	r24, 0x00D8
     c56:	80 62       	ori	r24, 0x20	; 32
     c58:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c5c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	80 93 6d 01 	sts	0x016D, r24
		EVENT_USB_Device_Suspend();
     c64:	ef d1       	rcall	.+990    	; 0x1044 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     c66:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     c6a:	84 ff       	sbrs	r24, 4
     c6c:	2f c0       	rjmp	.+94     	; 0xccc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     c6e:	80 91 e2 00 	lds	r24, 0x00E2
     c72:	84 ff       	sbrs	r24, 4
     c74:	2b c0       	rjmp	.+86     	; 0xccc <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c76:	80 e1       	ldi	r24, 0x10	; 16
     c78:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c7a:	82 e1       	ldi	r24, 0x12	; 18
     c7c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c7e:	09 b4       	in	r0, 0x29	; 41
     c80:	00 fe       	sbrs	r0, 0
     c82:	fd cf       	rjmp	.-6      	; 0xc7e <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c84:	80 91 d8 00 	lds	r24, 0x00D8
     c88:	8f 7d       	andi	r24, 0xDF	; 223
     c8a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     c8e:	80 91 e1 00 	lds	r24, 0x00E1
     c92:	8f 7e       	andi	r24, 0xEF	; 239
     c94:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     c98:	80 91 e2 00 	lds	r24, 0x00E2
     c9c:	8f 7e       	andi	r24, 0xEF	; 239
     c9e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     ca2:	80 91 e2 00 	lds	r24, 0x00E2
     ca6:	81 60       	ori	r24, 0x01	; 1
     ca8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     cac:	80 91 69 01 	lds	r24, 0x0169
     cb0:	88 23       	and	r24, r24
     cb2:	11 f0       	breq	.+4      	; 0xcb8 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cb8:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     cbc:	87 ff       	sbrs	r24, 7
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <__vector_10+0x116>
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <__vector_10+0x118>
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 6d 01 	sts	0x016D, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     cca:	bc d1       	rcall	.+888    	; 0x1044 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     ccc:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     cd0:	83 ff       	sbrs	r24, 3
     cd2:	27 c0       	rjmp	.+78     	; 0xd22 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     cd4:	80 91 e2 00 	lds	r24, 0x00E2
     cd8:	83 ff       	sbrs	r24, 3
     cda:	23 c0       	rjmp	.+70     	; 0xd22 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     cdc:	80 91 e1 00 	lds	r24, 0x00E1
     ce0:	87 7f       	andi	r24, 0xF7	; 247
     ce2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	80 93 6d 01 	sts	0x016D, r24
		USB_Device_ConfigurationNumber = 0;
     cec:	10 92 69 01 	sts	0x0169, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     cf0:	80 91 e1 00 	lds	r24, 0x00E1
     cf4:	8e 7f       	andi	r24, 0xFE	; 254
     cf6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     cfa:	80 91 e2 00 	lds	r24, 0x00E2
     cfe:	8e 7f       	andi	r24, 0xFE	; 254
     d00:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d04:	80 91 e2 00 	lds	r24, 0x00E2
     d08:	80 61       	ori	r24, 0x10	; 16
     d0a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     d0e:	42 e0       	ldi	r20, 0x02	; 2
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	2c de       	rcall	.-936    	; 0x96e <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     d16:	80 91 f0 00 	lds	r24, 0x00F0
     d1a:	88 60       	ori	r24, 0x08	; 8
     d1c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     d20:	91 d1       	rcall	.+802    	; 0x1044 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d22:	ff 91       	pop	r31
     d24:	ef 91       	pop	r30
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	cf 93       	push	r28
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d68:	c0 91 e9 00 	lds	r28, 0x00E9
     d6c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d6e:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d72:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     d76:	80 91 f0 00 	lds	r24, 0x00F0
     d7a:	87 7f       	andi	r24, 0xF7	; 247
     d7c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     d80:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     d82:	1b d0       	rcall	.+54     	; 0xdba <USB_Device_ProcessControlRequest>
     d84:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     d88:	80 91 f0 00 	lds	r24, 0x00F0
     d8c:	88 60       	ori	r24, 0x08	; 8
     d8e:	80 93 f0 00 	sts	0x00F0, r24
     d92:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	cf 91       	pop	r28
     d9c:	bf 91       	pop	r27
     d9e:	af 91       	pop	r26
     da0:	9f 91       	pop	r25
     da2:	8f 91       	pop	r24
     da4:	7f 91       	pop	r23
     da6:	6f 91       	pop	r22
     da8:	5f 91       	pop	r21
     daa:	4f 91       	pop	r20
     dac:	3f 91       	pop	r19
     dae:	2f 91       	pop	r18
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	aa 97       	sbiw	r28, 0x2a	; 42
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	ee e6       	ldi	r30, 0x6E	; 110
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     dd4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     dd8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	e6 37       	cpi	r30, 0x76	; 118
     dde:	f2 07       	cpc	r31, r18
     de0:	c9 f7       	brne	.-14     	; 0xdd4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     de2:	d2 d1       	rcall	.+932    	; 0x1188 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     de4:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     de8:	83 ff       	sbrs	r24, 3
     dea:	14 c1       	rjmp	.+552    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     dec:	20 91 6e 01 	lds	r18, 0x016E

		switch (USB_ControlRequest.bRequest)
     df0:	30 91 6f 01 	lds	r19, 0x016F
     df4:	83 2f       	mov	r24, r19
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	8a 30       	cpi	r24, 0x0A	; 10
     dfa:	91 05       	cpc	r25, r1
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <USB_Device_ProcessControlRequest+0x46>
     dfe:	0a c1       	rjmp	.+532    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
     e00:	fc 01       	movw	r30, r24
     e02:	ea 5a       	subi	r30, 0xAA	; 170
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	c3 c1       	rjmp	.+902    	; 0x118e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e08:	20 38       	cpi	r18, 0x80	; 128
     e0a:	81 f0       	breq	.+32     	; 0xe2c <USB_Device_ProcessControlRequest+0x72>
     e0c:	22 38       	cpi	r18, 0x82	; 130
     e0e:	09 f0       	breq	.+2      	; 0xe12 <USB_Device_ProcessControlRequest+0x58>
     e10:	01 c1       	rjmp	.+514    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e12:	80 91 72 01 	lds	r24, 0x0172
     e16:	8f 70       	andi	r24, 0x0F	; 15
     e18:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e1c:	80 91 eb 00 	lds	r24, 0x00EB
     e20:	85 fb       	bst	r24, 5
     e22:	88 27       	eor	r24, r24
     e24:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e26:	10 92 e9 00 	sts	0x00E9, r1
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     e2c:	80 91 6a 01 	lds	r24, 0x016A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     e30:	90 91 6b 01 	lds	r25, 0x016B
     e34:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     e36:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e38:	90 91 e8 00 	lds	r25, 0x00E8
     e3c:	97 7f       	andi	r25, 0xF7	; 247
     e3e:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     e42:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     e46:	10 92 f1 00 	sts	0x00F1, r1
     e4a:	c1 c0       	rjmp	.+386    	; 0xfce <USB_Device_ProcessControlRequest+0x214>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e4c:	82 2f       	mov	r24, r18
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	09 f0       	breq	.+2      	; 0xe54 <USB_Device_ProcessControlRequest+0x9a>
     e52:	e0 c0       	rjmp	.+448    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     e54:	22 23       	and	r18, r18
     e56:	19 f0       	breq	.+6      	; 0xe5e <USB_Device_ProcessControlRequest+0xa4>
     e58:	22 30       	cpi	r18, 0x02	; 2
     e5a:	61 f0       	breq	.+24     	; 0xe74 <USB_Device_ProcessControlRequest+0xba>
     e5c:	db c0       	rjmp	.+438    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     e5e:	80 91 70 01 	lds	r24, 0x0170
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	09 f0       	breq	.+2      	; 0xe68 <USB_Device_ProcessControlRequest+0xae>
     e66:	d6 c0       	rjmp	.+428    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     e68:	33 30       	cpi	r19, 0x03	; 3
     e6a:	09 f0       	breq	.+2      	; 0xe6e <USB_Device_ProcessControlRequest+0xb4>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	80 93 6b 01 	sts	0x016B, r24
     e72:	28 c0       	rjmp	.+80     	; 0xec4 <USB_Device_ProcessControlRequest+0x10a>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     e74:	80 91 70 01 	lds	r24, 0x0170
     e78:	81 11       	cpse	r24, r1
     e7a:	24 c0       	rjmp	.+72     	; 0xec4 <USB_Device_ProcessControlRequest+0x10a>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     e7c:	20 91 72 01 	lds	r18, 0x0172
     e80:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     e82:	09 f4       	brne	.+2      	; 0xe86 <USB_Device_ProcessControlRequest+0xcc>
     e84:	c7 c0       	rjmp	.+398    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e86:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e8a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     e8e:	80 ff       	sbrs	r24, 0
     e90:	19 c0       	rjmp	.+50     	; 0xec4 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e92:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     e96:	33 30       	cpi	r19, 0x03	; 3
     e98:	11 f4       	brne	.+4      	; 0xe9e <USB_Device_ProcessControlRequest+0xe4>
     e9a:	80 62       	ori	r24, 0x20	; 32
     e9c:	11 c0       	rjmp	.+34     	; 0xec0 <USB_Device_ProcessControlRequest+0x106>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     e9e:	80 61       	ori	r24, 0x10	; 16
     ea0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <USB_Device_ProcessControlRequest+0xf4>
     eac:	88 0f       	add	r24, r24
     eae:	0a 94       	dec	r0
     eb0:	ea f7       	brpl	.-6      	; 0xeac <USB_Device_ProcessControlRequest+0xf2>
     eb2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     eb6:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     eba:	80 91 eb 00 	lds	r24, 0x00EB
     ebe:	88 60       	ori	r24, 0x08	; 8
     ec0:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ec4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ec8:	80 91 e8 00 	lds	r24, 0x00E8
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	82 c0       	rjmp	.+260    	; 0xfd4 <USB_Device_ProcessControlRequest+0x21a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ed0:	21 11       	cpse	r18, r1
     ed2:	a0 c0       	rjmp	.+320    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ed4:	10 91 70 01 	lds	r17, 0x0170
     ed8:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     eda:	80 91 e3 00 	lds	r24, 0x00E3
     ede:	80 78       	andi	r24, 0x80	; 128
     ee0:	81 2b       	or	r24, r17
     ee2:	80 93 e3 00 	sts	0x00E3, r24
     ee6:	80 91 e8 00 	lds	r24, 0x00E8
     eea:	87 7f       	andi	r24, 0xF7	; 247
     eec:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ef0:	b0 dd       	rcall	.-1184   	; 0xa52 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ef2:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     ef6:	80 ff       	sbrs	r24, 0
     ef8:	fc cf       	rjmp	.-8      	; 0xef2 <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     efa:	80 91 e3 00 	lds	r24, 0x00E3
     efe:	80 68       	ori	r24, 0x80	; 128
     f00:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     f04:	11 23       	and	r17, r17
     f06:	11 f0       	breq	.+4      	; 0xf0c <USB_Device_ProcessControlRequest+0x152>
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <USB_Device_ProcessControlRequest+0x154>
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	80 93 6d 01 	sts	0x016D, r24
     f12:	80 c0       	rjmp	.+256    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f14:	20 58       	subi	r18, 0x80	; 128
     f16:	22 30       	cpi	r18, 0x02	; 2
     f18:	08 f0       	brcs	.+2      	; 0xf1c <USB_Device_ProcessControlRequest+0x162>
     f1a:	7c c0       	rjmp	.+248    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     f1c:	80 91 70 01 	lds	r24, 0x0170
     f20:	90 91 71 01 	lds	r25, 0x0171
     f24:	8c 3d       	cpi	r24, 0xDC	; 220
     f26:	23 e0       	ldi	r18, 0x03	; 3
     f28:	92 07       	cpc	r25, r18
     f2a:	71 f5       	brne	.+92     	; 0xf88 <USB_Device_ProcessControlRequest+0x1ce>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     f30:	8a e2       	ldi	r24, 0x2A	; 42
     f32:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f34:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     f36:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     f38:	de 01       	movw	r26, r28
     f3a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f3c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     f3e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     f40:	51 e2       	ldi	r21, 0x21	; 33
     f42:	e3 2f       	mov	r30, r19
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	50 93 57 00 	sts	0x0057, r21
     f4a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     f4c:	20 ff       	sbrs	r18, 0
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <USB_Device_ProcessControlRequest+0x19c>
					{
						SerialByte >>= 4;
     f50:	e2 95       	swap	r30
     f52:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     f54:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     f56:	ef 70       	andi	r30, 0x0F	; 15
     f58:	8e 2f       	mov	r24, r30
     f5a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     f5c:	ea 30       	cpi	r30, 0x0A	; 10
     f5e:	10 f0       	brcs	.+4      	; 0xf64 <USB_Device_ProcessControlRequest+0x1aa>
     f60:	c7 96       	adiw	r24, 0x37	; 55
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <USB_Device_ProcessControlRequest+0x1ac>
     f64:	c0 96       	adiw	r24, 0x30	; 48
     f66:	8d 93       	st	X+, r24
     f68:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f6a:	2f 5f       	subi	r18, 0xFF	; 255
     f6c:	24 31       	cpi	r18, 0x14	; 20
     f6e:	49 f7       	brne	.-46     	; 0xf42 <USB_Device_ProcessControlRequest+0x188>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f70:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f72:	80 91 e8 00 	lds	r24, 0x00E8
     f76:	87 7f       	andi	r24, 0xF7	; 247
     f78:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     f7c:	6a e2       	ldi	r22, 0x2A	; 42
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	ce 01       	movw	r24, r28
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	3b dc       	rcall	.-1930   	; 0x7fc <Endpoint_Write_Control_Stream_LE>
     f86:	12 c0       	rjmp	.+36     	; 0xfac <USB_Device_ProcessControlRequest+0x1f2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     f88:	ae 01       	movw	r20, r28
     f8a:	4f 5f       	subi	r20, 0xFF	; 255
     f8c:	5f 4f       	sbci	r21, 0xFF	; 255
     f8e:	60 91 72 01 	lds	r22, 0x0172
     f92:	f9 d8       	rcall	.-3598   	; 0x186 <CALLBACK_USB_GetDescriptor>
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	09 f4       	brne	.+2      	; 0xf9a <USB_Device_ProcessControlRequest+0x1e0>
     f98:	3d c0       	rjmp	.+122    	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
     f9a:	20 91 e8 00 	lds	r18, 0x00E8
     f9e:	27 7f       	andi	r18, 0xF7	; 247
     fa0:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     fa4:	bc 01       	movw	r22, r24
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	83 dc       	rcall	.-1786   	; 0x8b2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fac:	80 91 e8 00 	lds	r24, 0x00E8
     fb0:	8b 77       	andi	r24, 0x7B	; 123
     fb2:	80 93 e8 00 	sts	0x00E8, r24
     fb6:	2e c0       	rjmp	.+92     	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     fb8:	20 38       	cpi	r18, 0x80	; 128
     fba:	61 f5       	brne	.+88     	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fbc:	80 91 e8 00 	lds	r24, 0x00E8
     fc0:	87 7f       	andi	r24, 0xF7	; 247
     fc2:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     fc6:	80 91 69 01 	lds	r24, 0x0169
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fca:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fce:	80 91 e8 00 	lds	r24, 0x00E8
     fd2:	8e 77       	andi	r24, 0x7E	; 126
     fd4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     fd8:	3c dd       	rcall	.-1416   	; 0xa52 <Endpoint_ClearStatusStage>
     fda:	1c c0       	rjmp	.+56     	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     fdc:	21 11       	cpse	r18, r1
     fde:	1a c0       	rjmp	.+52     	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     fe0:	90 91 70 01 	lds	r25, 0x0170
     fe4:	92 30       	cpi	r25, 0x02	; 2
     fe6:	b0 f4       	brcc	.+44     	; 0x1014 <USB_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fe8:	80 91 e8 00 	lds	r24, 0x00E8
     fec:	87 7f       	andi	r24, 0xF7	; 247
     fee:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     ff2:	90 93 69 01 	sts	0x0169, r25

	Endpoint_ClearStatusStage();
     ff6:	2d dd       	rcall	.-1446   	; 0xa52 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     ff8:	80 91 69 01 	lds	r24, 0x0169
     ffc:	81 11       	cpse	r24, r1
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <USB_Device_ProcessControlRequest+0x24e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1000:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1004:	87 ff       	sbrs	r24, 7
    1006:	02 c0       	rjmp	.+4      	; 0x100c <USB_Device_ProcessControlRequest+0x252>
    1008:	84 e0       	ldi	r24, 0x04	; 4
    100a:	01 c0       	rjmp	.+2      	; 0x100e <USB_Device_ProcessControlRequest+0x254>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 6d 01 	sts	0x016D, r24

	EVENT_USB_Device_ConfigurationChanged();
    1012:	b1 d0       	rcall	.+354    	; 0x1176 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1014:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1018:	83 ff       	sbrs	r24, 3
    101a:	0a c0       	rjmp	.+20     	; 0x1030 <USB_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    101c:	80 91 e8 00 	lds	r24, 0x00E8
    1020:	87 7f       	andi	r24, 0xF7	; 247
    1022:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1026:	80 91 eb 00 	lds	r24, 0x00EB
    102a:	80 62       	ori	r24, 0x20	; 32
    102c:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1030:	aa 96       	adiw	r28, 0x2a	; 42
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	08 95       	ret

00001044 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1044:	08 95       	ret

00001046 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1046:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1048:	80 91 6d 01 	lds	r24, 0x016D
    104c:	88 23       	and	r24, r24
    104e:	a9 f0       	breq	.+42     	; 0x107a <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1050:	80 91 e9 00 	lds	r24, 0x00E9
    1054:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1056:	90 91 ec 00 	lds	r25, 0x00EC
    105a:	90 ff       	sbrs	r25, 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <USB_USBTask+0x1c>
    105e:	90 e8       	ldi	r25, 0x80	; 128
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <USB_USBTask+0x1e>
    1062:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1064:	c9 2f       	mov	r28, r25
    1066:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1068:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    106c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1070:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1072:	a3 de       	rcall	.-698    	; 0xdba <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1074:	cf 70       	andi	r28, 0x0F	; 15
    1076:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <LEDs_SetAllLEDs>:
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
    107e:	25 b1       	in	r18, 0x05	; 5
    1080:	98 2f       	mov	r25, r24
    1082:	91 70       	andi	r25, 0x01	; 1
    1084:	90 95       	com	r25
    1086:	21 60       	ori	r18, 0x01	; 1
    1088:	92 23       	and	r25, r18
    108a:	95 b9       	out	0x05, r25	; 5
    108c:	2b b1       	in	r18, 0x0b	; 11
    108e:	98 2f       	mov	r25, r24
    1090:	90 72       	andi	r25, 0x20	; 32
    1092:	90 95       	com	r25
    1094:	20 62       	ori	r18, 0x20	; 32
    1096:	92 23       	and	r25, r18
    1098:	9b b9       	out	0x0b, r25	; 11
    109a:	98 b1       	in	r25, 0x08	; 8
    109c:	80 78       	andi	r24, 0x80	; 128
    109e:	9f 77       	andi	r25, 0x7F	; 127
    10a0:	89 2b       	or	r24, r25
    10a2:	88 b9       	out	0x08, r24	; 8
    10a4:	08 95       	ret

000010a6 <SetupHardware>:
    10a6:	84 b7       	in	r24, 0x34	; 52
    10a8:	87 7f       	andi	r24, 0xF7	; 247
    10aa:	84 bf       	out	0x34, r24	; 52
    10ac:	88 e1       	ldi	r24, 0x18	; 24
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	80 93 60 00 	sts	0x0060, r24
    10b6:	10 92 60 00 	sts	0x0060, r1
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	80 e8       	ldi	r24, 0x80	; 128
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	80 93 61 00 	sts	0x0061, r24
    10c8:	90 93 61 00 	sts	0x0061, r25
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	90 d9       	rcall	.-3296   	; 0x3f0 <lcd_init>
    10d0:	50 9a       	sbi	0x0a, 0	; 10
    10d2:	8a b1       	in	r24, 0x0a	; 10
    10d4:	1a b8       	out	0x0a, r1	; 10
    10d6:	8b b1       	in	r24, 0x0b	; 11
    10d8:	1b b8       	out	0x0b, r1	; 11
    10da:	20 9a       	sbi	0x04, 0	; 4
    10dc:	28 9a       	sbi	0x05, 0	; 5
    10de:	55 9a       	sbi	0x0a, 5	; 10
    10e0:	5d 9a       	sbi	0x0b, 5	; 11
    10e2:	3f 9a       	sbi	0x07, 7	; 7
    10e4:	47 98       	cbi	0x08, 7	; 8
    10e6:	46 dd       	rcall	.-1396   	; 0xb74 <USB_Init>
    10e8:	74 d9       	rcall	.-3352   	; 0x3d2 <lcd_clrscr>
    10ea:	8b e1       	ldi	r24, 0x1B	; 27
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	75 c9       	rjmp	.-3350   	; 0x3da <lcd_puts>

000010f0 <Read_DualSlope>:
		}
	
	// Turns on the specified pins and off the remainder
	static inline void PINs_SetAll(const uint8_t PINMask)
			{
				PORTD = ((PORTD |  PINS_PortD) & ~(PINMask & PINS_PortD));
    10f0:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10f2:	2f ef       	ldi	r18, 0xFF	; 255
    10f4:	87 ee       	ldi	r24, 0xE7	; 231
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	21 50       	subi	r18, 0x01	; 1
    10fa:	80 40       	sbci	r24, 0x00	; 0
    10fc:	90 40       	sbci	r25, 0x00	; 0
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <Read_DualSlope+0x8>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <Read_DualSlope+0x12>
    1102:	00 00       	nop
    1104:	58 9a       	sbi	0x0b, 0	; 11
	PINs_SetAll(PINS_In_Switch); 
	_delay_ms(t1); // wait 80mS
	//Step2
	PINs_SetAll(PINS_In_Switch); // integrate and wait for zero crossing
	//Step3
	result = 128; 
    1106:	80 e8       	ldi	r24, 0x80	; 128
    1108:	80 93 76 01 	sts	0x0176, r24
	return result;
	
	//Step4
	//Step5
	
}
    110c:	08 95       	ret

0000110e <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
    110e:	cb df       	rcall	.-106    	; 0x10a6 <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    1110:	6b e5       	ldi	r22, 0x5B	; 91
    1112:	71 e0       	ldi	r23, 0x01	; 1
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	ad da       	rcall	.-2726   	; 0x674 <CDC_Device_CreateStream>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	b0 df       	rcall	.-160    	; 0x107e <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    111e:	78 94       	sei
	GlobalInterruptEnable();
	fputs("Welcome to Our Dual Slope Controller! \r\n", &USBSerialStream);
    1120:	6b e5       	ldi	r22, 0x5B	; 91
    1122:	71 e0       	ldi	r23, 0x01	; 1
    1124:	88 e2       	ldi	r24, 0x28	; 40
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	38 d0       	rcall	.+112    	; 0x119a <fputs>
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
    112a:	11 e0       	ldi	r17, 0x01	; 1
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
    112c:	d0 e2       	ldi	r29, 0x20	; 32
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
    112e:	c0 e8       	ldi	r28, 0x80	; 128
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
    1130:	13 b9       	out	0x03, r17	; 3
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
    1132:	d9 b9       	out	0x09, r29	; 9
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
    1134:	c6 b9       	out	0x06, r28	; 6
    1136:	2f ef       	ldi	r18, 0xFF	; 255
    1138:	83 ed       	ldi	r24, 0xD3	; 211
    113a:	90 e3       	ldi	r25, 0x30	; 48
    113c:	21 50       	subi	r18, 0x01	; 1
    113e:	80 40       	sbci	r24, 0x00	; 0
    1140:	90 40       	sbci	r25, 0x00	; 0
    1142:	e1 f7       	brne	.-8      	; 0x113c <main+0x2e>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <main+0x38>
    1146:	00 00       	nop
	for (;;)
	{
		//CheckJoystickMovement();
		LEDs_ToggleLEDs(LEDS_LED1|LEDS_LED2|LEDS_LED3);
		_delay_ms(1000);
		lcd_puts("Hi");
    1148:	81 e5       	ldi	r24, 0x51	; 81
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	46 d9       	rcall	.-3444   	; 0x3da <lcd_puts>
		result = Read_DualSlope();
    114e:	d0 df       	rcall	.-96     	; 0x10f0 <Read_DualSlope>
    1150:	80 93 76 01 	sts	0x0176, r24
		float result1 = result * 4.6875; // convert result to mV
		//fputs(result1, &USBSerialStream);
		fputs("mV \r\n", &USBSerialStream);
    1154:	6b e5       	ldi	r22, 0x5B	; 91
    1156:	71 e0       	ldi	r23, 0x01	; 1
    1158:	84 e5       	ldi	r24, 0x54	; 84
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	1e d0       	rcall	.+60     	; 0x119a <fputs>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	4a da       	rcall	.-2924   	; 0x5f8 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	31 da       	rcall	.-2974   	; 0x5cc <CDC_Device_USBTask>
		USB_USBTask();
    116a:	6d df       	rcall	.-294    	; 0x1046 <USB_USBTask>
    116c:	e1 cf       	rjmp	.-62     	; 0x1130 <main+0x22>

0000116e <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
    116e:	80 ea       	ldi	r24, 0xA0	; 160
    1170:	86 cf       	rjmp	.-244    	; 0x107e <LEDs_SetAllLEDs>

00001172 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	84 cf       	rjmp	.-248    	; 0x107e <LEDs_SetAllLEDs>

00001176 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	9e d9       	rcall	.-3268   	; 0x4b8 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    117c:	88 23       	and	r24, r24
    117e:	11 f0       	breq	.+4      	; 0x1184 <EVENT_USB_Device_ConfigurationChanged+0xe>
    1180:	80 e2       	ldi	r24, 0x20	; 32
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <EVENT_USB_Device_ConfigurationChanged+0x10>
    1184:	81 e8       	ldi	r24, 0x81	; 129
    1186:	7b cf       	rjmp	.-266    	; 0x107e <LEDs_SetAllLEDs>

00001188 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	87 ca       	rjmp	.-2802   	; 0x69c <CDC_Device_ProcessControlRequest>

0000118e <__tablejump2__>:
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31

00001192 <__tablejump__>:
    1192:	05 90       	lpm	r0, Z+
    1194:	f4 91       	lpm	r31, Z
    1196:	e0 2d       	mov	r30, r0
    1198:	09 94       	ijmp

0000119a <fputs>:
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	8b 01       	movw	r16, r22
    11a8:	db 01       	movw	r26, r22
    11aa:	13 96       	adiw	r26, 0x03	; 3
    11ac:	2c 91       	ld	r18, X
    11ae:	21 ff       	sbrs	r18, 1
    11b0:	16 c0       	rjmp	.+44     	; 0x11de <fputs+0x44>
    11b2:	ec 01       	movw	r28, r24
    11b4:	e1 2c       	mov	r14, r1
    11b6:	f1 2c       	mov	r15, r1
    11b8:	89 91       	ld	r24, Y+
    11ba:	88 23       	and	r24, r24
    11bc:	71 f0       	breq	.+28     	; 0x11da <fputs+0x40>
    11be:	d8 01       	movw	r26, r16
    11c0:	18 96       	adiw	r26, 0x08	; 8
    11c2:	ed 91       	ld	r30, X+
    11c4:	fc 91       	ld	r31, X
    11c6:	19 97       	sbiw	r26, 0x09	; 9
    11c8:	b8 01       	movw	r22, r16
    11ca:	09 95       	icall
    11cc:	89 2b       	or	r24, r25
    11ce:	a1 f3       	breq	.-24     	; 0x11b8 <fputs+0x1e>
    11d0:	ee 24       	eor	r14, r14
    11d2:	ea 94       	dec	r14
    11d4:	ff 24       	eor	r15, r15
    11d6:	fa 94       	dec	r15
    11d8:	ef cf       	rjmp	.-34     	; 0x11b8 <fputs+0x1e>
    11da:	c7 01       	movw	r24, r14
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <fputs+0x48>
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	9f ef       	ldi	r25, 0xFF	; 255
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	e6 e0       	ldi	r30, 0x06	; 6
    11e8:	0c c0       	rjmp	.+24     	; 0x1202 <__epilogue_restores__+0x18>

000011ea <__epilogue_restores__>:
    11ea:	2a 88       	ldd	r2, Y+18	; 0x12
    11ec:	39 88       	ldd	r3, Y+17	; 0x11
    11ee:	48 88       	ldd	r4, Y+16	; 0x10
    11f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    11f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    11f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    11f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    11f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    11fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    11fc:	b9 84       	ldd	r11, Y+9	; 0x09
    11fe:	c8 84       	ldd	r12, Y+8	; 0x08
    1200:	df 80       	ldd	r13, Y+7	; 0x07
    1202:	ee 80       	ldd	r14, Y+6	; 0x06
    1204:	fd 80       	ldd	r15, Y+5	; 0x05
    1206:	0c 81       	ldd	r16, Y+4	; 0x04
    1208:	1b 81       	ldd	r17, Y+3	; 0x03
    120a:	aa 81       	ldd	r26, Y+2	; 0x02
    120c:	b9 81       	ldd	r27, Y+1	; 0x01
    120e:	ce 0f       	add	r28, r30
    1210:	d1 1d       	adc	r29, r1
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	ed 01       	movw	r28, r26
    121e:	08 95       	ret

00001220 <_exit>:
    1220:	f8 94       	cli

00001222 <__stop_program>:
    1222:	ff cf       	rjmp	.-2      	; 0x1222 <__stop_program>
