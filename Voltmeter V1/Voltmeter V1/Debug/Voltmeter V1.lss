
Voltmeter V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  0000195c  000019f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000195c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080015e  0080015e  00001a4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a4e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000730  00000000  00000000  00001aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ae1f  00000000  00000000  000021da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e2d  00000000  00000000  0000cff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0001493f  00000000  00000000  0000fe26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000102c  00000000  00000000  00024768  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001b0b8  00000000  00000000  00025794  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000067db  00000000  00000000  0004084c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000790  00000000  00000000  00047027  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b444  00000000  00000000  000477b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a5 c0       	rjmp	.+330    	; 0x14c <__ctors_end>
       2:	00 00       	nop
       4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
       6:	00 00       	nop
       8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
       a:	00 00       	nop
       c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
       e:	00 00       	nop
      10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
      12:	00 00       	nop
      14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
      16:	00 00       	nop
      18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b1 c0       	rjmp	.+354    	; 0x184 <__bad_interrupt>
      22:	00 00       	nop
      24:	af c0       	rjmp	.+350    	; 0x184 <__bad_interrupt>
      26:	00 00       	nop
      28:	28 c5       	rjmp	.+2640   	; 0xa7a <__vector_10>
      2a:	00 00       	nop
      2c:	f1 c5       	rjmp	.+3042   	; 0xc10 <__vector_11>
      2e:	00 00       	nop
      30:	a9 c0       	rjmp	.+338    	; 0x184 <__bad_interrupt>
      32:	00 00       	nop
      34:	a7 c0       	rjmp	.+334    	; 0x184 <__bad_interrupt>
      36:	00 00       	nop
      38:	a5 c0       	rjmp	.+330    	; 0x184 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a3 c0       	rjmp	.+326    	; 0x184 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a1 c0       	rjmp	.+322    	; 0x184 <__bad_interrupt>
      42:	00 00       	nop
      44:	9f c0       	rjmp	.+318    	; 0x184 <__bad_interrupt>
      46:	00 00       	nop
      48:	9d c0       	rjmp	.+314    	; 0x184 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9b c0       	rjmp	.+310    	; 0x184 <__bad_interrupt>
      4e:	00 00       	nop
      50:	99 c0       	rjmp	.+306    	; 0x184 <__bad_interrupt>
      52:	00 00       	nop
      54:	97 c0       	rjmp	.+302    	; 0x184 <__bad_interrupt>
      56:	00 00       	nop
      58:	95 c0       	rjmp	.+298    	; 0x184 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	93 c0       	rjmp	.+294    	; 0x184 <__bad_interrupt>
      5e:	00 00       	nop
      60:	91 c0       	rjmp	.+290    	; 0x184 <__bad_interrupt>
      62:	00 00       	nop
      64:	8f c0       	rjmp	.+286    	; 0x184 <__bad_interrupt>
      66:	00 00       	nop
      68:	8d c0       	rjmp	.+282    	; 0x184 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8b c0       	rjmp	.+278    	; 0x184 <__bad_interrupt>
      6e:	00 00       	nop
      70:	89 c0       	rjmp	.+274    	; 0x184 <__bad_interrupt>
      72:	00 00       	nop
      74:	87 c0       	rjmp	.+270    	; 0x184 <__bad_interrupt>
      76:	00 00       	nop
      78:	85 c0       	rjmp	.+266    	; 0x184 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	83 c0       	rjmp	.+262    	; 0x184 <__bad_interrupt>
      7e:	00 00       	nop
      80:	81 c0       	rjmp	.+258    	; 0x184 <__bad_interrupt>
      82:	00 00       	nop
      84:	7f c0       	rjmp	.+254    	; 0x184 <__bad_interrupt>
      86:	00 00       	nop
      88:	7d c0       	rjmp	.+250    	; 0x184 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b c0       	rjmp	.+246    	; 0x184 <__bad_interrupt>
      8e:	00 00       	nop
      90:	79 c0       	rjmp	.+242    	; 0x184 <__bad_interrupt>
      92:	00 00       	nop
      94:	77 c0       	rjmp	.+238    	; 0x184 <__bad_interrupt>
      96:	00 00       	nop
      98:	75 c0       	rjmp	.+234    	; 0x184 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	73 c0       	rjmp	.+230    	; 0x184 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	71 c0       	rjmp	.+226    	; 0x184 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6f c0       	rjmp	.+222    	; 0x184 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6d c0       	rjmp	.+218    	; 0x184 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	6a 06       	cpc	r6, r26
      ae:	8c 06       	cpc	r8, r28
      b0:	70 07       	cpc	r23, r16
      b2:	8c 06       	cpc	r8, r28
      b4:	70 07       	cpc	r23, r16
      b6:	ce 06       	cpc	r12, r30
      b8:	f0 06       	cpc	r15, r16
      ba:	70 07       	cpc	r23, r16
      bc:	42 07       	cpc	r20, r18
      be:	54 07       	cpc	r21, r20

000000c0 <ProductString>:
      c0:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      d0:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000de <ManufacturerString>:
      de:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ee:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f8 <LanguageString>:
      f8:	04 03 09 04                                         ....

000000fc <ConfigurationDescriptor>:
      fc:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     10c:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     11c:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     12c:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000013a <DeviceDescriptor>:
     13a:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     14a:	dc 01                                               ..

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	da e0       	ldi	r29, 0x0A	; 10
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	ec e5       	ldi	r30, 0x5C	; 92
     160:	f9 e1       	ldi	r31, 0x19	; 25
     162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x10>
     164:	05 90       	lpm	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	ae 35       	cpi	r26, 0x5E	; 94
     16a:	b1 07       	cpc	r27, r17
     16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0xc>

0000016e <__do_clear_bss>:
     16e:	21 e0       	ldi	r18, 0x01	; 1
     170:	ae e5       	ldi	r26, 0x5E	; 94
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	aa 37       	cpi	r26, 0x7A	; 122
     17a:	b2 07       	cpc	r27, r18
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
     17e:	4b d7       	rcall	.+3734   	; 0x1016 <main>
     180:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <_exit>

00000184 <__bad_interrupt>:
     184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     186:	29 2f       	mov	r18, r25
     188:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     18a:	22 30       	cpi	r18, 0x02	; 2
     18c:	31 05       	cpc	r19, r1
     18e:	59 f0       	breq	.+22     	; 0x1a6 <CALLBACK_USB_GetDescriptor+0x20>
     190:	23 30       	cpi	r18, 0x03	; 3
     192:	31 05       	cpc	r19, r1
     194:	69 f0       	breq	.+26     	; 0x1b0 <CALLBACK_USB_GetDescriptor+0x2a>
     196:	21 30       	cpi	r18, 0x01	; 1
     198:	31 05       	cpc	r19, r1
     19a:	f9 f4       	brne	.+62     	; 0x1da <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     19c:	82 e1       	ldi	r24, 0x12	; 18
     19e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1a0:	2a e3       	ldi	r18, 0x3A	; 58
     1a2:	31 e0       	ldi	r19, 0x01	; 1
     1a4:	1e c0       	rjmp	.+60     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1a6:	8e e3       	ldi	r24, 0x3E	; 62
     1a8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1aa:	2c ef       	ldi	r18, 0xFC	; 252
     1ac:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1ae:	19 c0       	rjmp	.+50     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x5c>
     1b0:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	91 05       	cpc	r25, r1
     1b6:	41 f0       	breq	.+16     	; 0x1c8 <CALLBACK_USB_GetDescriptor+0x42>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	91 05       	cpc	r25, r1
     1bc:	41 f0       	breq	.+16     	; 0x1ce <CALLBACK_USB_GetDescriptor+0x48>
     1be:	89 2b       	or	r24, r25
     1c0:	61 f4       	brne	.+24     	; 0x1da <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1c2:	e8 ef       	ldi	r30, 0xF8	; 248
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1c8:	ee ed       	ldi	r30, 0xDE	; 222
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1ce:	e0 ec       	ldi	r30, 0xC0	; 192
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	84 91       	lpm	r24, Z
     1d4:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1d6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1e2:	fa 01       	movw	r30, r20
     1e4:	31 83       	std	Z+1, r19	; 0x01
     1e6:	20 83       	st	Z, r18
	return Size;
}
     1e8:	08 95       	ret

000001ea <lcd_e_port_low>:
  {
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
      lcd_putc(c);
  }
     1ea:	76 98       	cbi	0x0e, 6	; 14
     1ec:	08 95       	ret

000001ee <lcd_e_port_high>:
     1ee:	76 9a       	sbi	0x0e, 6	; 14
     1f0:	08 95       	ret

000001f2 <lcd_write>:
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	c8 2f       	mov	r28, r24
     1f8:	d6 2f       	mov	r29, r22
     1fa:	66 23       	and	r22, r22
     1fc:	11 f0       	breq	.+4      	; 0x202 <lcd_write+0x10>
     1fe:	5e 9a       	sbi	0x0b, 6	; 11
     200:	01 c0       	rjmp	.+2      	; 0x204 <lcd_write+0x12>
     202:	5e 98       	cbi	0x0b, 6	; 11
     204:	c7 ff       	sbrs	r28, 7
     206:	02 c0       	rjmp	.+4      	; 0x20c <lcd_write+0x1a>
     208:	2c 9a       	sbi	0x05, 4	; 5
     20a:	01 c0       	rjmp	.+2      	; 0x20e <lcd_write+0x1c>
     20c:	2c 98       	cbi	0x05, 4	; 5
     20e:	c6 ff       	sbrs	r28, 6
     210:	02 c0       	rjmp	.+4      	; 0x216 <lcd_write+0x24>
     212:	2d 9a       	sbi	0x05, 5	; 5
     214:	01 c0       	rjmp	.+2      	; 0x218 <lcd_write+0x26>
     216:	2d 98       	cbi	0x05, 5	; 5
     218:	c5 ff       	sbrs	r28, 5
     21a:	02 c0       	rjmp	.+4      	; 0x220 <lcd_write+0x2e>
     21c:	2e 9a       	sbi	0x05, 6	; 5
     21e:	01 c0       	rjmp	.+2      	; 0x222 <lcd_write+0x30>
     220:	2e 98       	cbi	0x05, 6	; 5
     222:	c4 ff       	sbrs	r28, 4
     224:	02 c0       	rjmp	.+4      	; 0x22a <lcd_write+0x38>
     226:	2f 9a       	sbi	0x05, 7	; 5
     228:	01 c0       	rjmp	.+2      	; 0x22c <lcd_write+0x3a>
     22a:	2f 98       	cbi	0x05, 7	; 5
     22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_write+0x3c>
     22e:	df df       	rcall	.-66     	; 0x1ee <lcd_e_port_high>
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	8a 95       	dec	r24
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_write+0x40>
     236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_write+0x46>
     238:	d8 df       	rcall	.-80     	; 0x1ea <lcd_e_port_low>
     23a:	c3 ff       	sbrs	r28, 3
     23c:	02 c0       	rjmp	.+4      	; 0x242 <lcd_write+0x50>
     23e:	2c 9a       	sbi	0x05, 4	; 5
     240:	01 c0       	rjmp	.+2      	; 0x244 <lcd_write+0x52>
     242:	2c 98       	cbi	0x05, 4	; 5
     244:	c2 ff       	sbrs	r28, 2
     246:	02 c0       	rjmp	.+4      	; 0x24c <lcd_write+0x5a>
     248:	2d 9a       	sbi	0x05, 5	; 5
     24a:	01 c0       	rjmp	.+2      	; 0x24e <lcd_write+0x5c>
     24c:	2d 98       	cbi	0x05, 5	; 5
     24e:	c1 ff       	sbrs	r28, 1
     250:	02 c0       	rjmp	.+4      	; 0x256 <lcd_write+0x64>
     252:	2e 9a       	sbi	0x05, 6	; 5
     254:	01 c0       	rjmp	.+2      	; 0x258 <lcd_write+0x66>
     256:	2e 98       	cbi	0x05, 6	; 5
     258:	c0 ff       	sbrs	r28, 0
     25a:	02 c0       	rjmp	.+4      	; 0x260 <lcd_write+0x6e>
     25c:	2f 9a       	sbi	0x05, 7	; 5
     25e:	01 c0       	rjmp	.+2      	; 0x262 <lcd_write+0x70>
     260:	2f 98       	cbi	0x05, 7	; 5
     262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_write+0x72>
     264:	c4 df       	rcall	.-120    	; 0x1ee <lcd_e_port_high>
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	9a 95       	dec	r25
     26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_write+0x76>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_write+0x7c>
     26e:	bd df       	rcall	.-134    	; 0x1ea <lcd_e_port_low>
     270:	2c 9a       	sbi	0x05, 4	; 5
     272:	2d 9a       	sbi	0x05, 5	; 5
     274:	2e 9a       	sbi	0x05, 6	; 5
     276:	2f 9a       	sbi	0x05, 7	; 5
     278:	d1 11       	cpse	r29, r1
     27a:	08 c0       	rjmp	.+16     	; 0x28c <lcd_write+0x9a>
     27c:	c4 30       	cpi	r28, 0x04	; 4
     27e:	30 f4       	brcc	.+12     	; 0x28c <lcd_write+0x9a>
     280:	8f e9       	ldi	r24, 0x9F	; 159
     282:	99 e1       	ldi	r25, 0x19	; 25
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <lcd_write+0x92>
     288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_write+0x98>
     28a:	03 c0       	rjmp	.+6      	; 0x292 <lcd_write+0xa0>
     28c:	95 ed       	ldi	r25, 0xD5	; 213
     28e:	9a 95       	dec	r25
     290:	f1 f7       	brne	.-4      	; 0x28e <lcd_write+0x9c>
     292:	00 00       	nop
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <lcd_command>:
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	aa cf       	rjmp	.-172    	; 0x1f2 <lcd_write>

0000029e <lcd_goto>:
     29e:	80 58       	subi	r24, 0x80	; 128
     2a0:	fc cf       	rjmp	.-8      	; 0x29a <lcd_command>

000002a2 <lcd_clrscr>:
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	fa cf       	rjmp	.-12     	; 0x29a <lcd_command>

000002a6 <lcd_putc>:
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	a4 cf       	rjmp	.-184    	; 0x1f2 <lcd_write>

000002aa <lcd_puts>:
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	ec 01       	movw	r28, r24
     2b0:	89 91       	ld	r24, Y+
     2b2:	88 23       	and	r24, r24
     2b4:	11 f0       	breq	.+4      	; 0x2ba <lcd_puts+0x10>
     2b6:	f7 df       	rcall	.-18     	; 0x2a6 <lcd_putc>
     2b8:	fb cf       	rjmp	.-10     	; 0x2b0 <lcd_puts+0x6>
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
     2c0:	6e 9a       	sbi	0x0d, 6	; 13
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
     2c2:	56 9a       	sbi	0x0a, 6	; 10
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
     2c4:	24 9a       	sbi	0x04, 4	; 4
    lcd_db6_ddr_high();
     2c6:	25 9a       	sbi	0x04, 5	; 4
    lcd_db5_ddr_high();
     2c8:	26 9a       	sbi	0x04, 6	; 4
    lcd_db4_ddr_high();
     2ca:	27 9a       	sbi	0x04, 7	; 4
      lcd_db1_ddr_high();
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
     2cc:	8e df       	rcall	.-228    	; 0x1ea <lcd_e_port_low>
    lcd_rs_port_low();
     2ce:	5e 98       	cbi	0x0b, 6	; 11
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
     2d0:	2c 9a       	sbi	0x05, 4	; 5
    lcd_db6_port_high();
     2d2:	2d 9a       	sbi	0x05, 5	; 5
    lcd_db5_port_high();
     2d4:	2e 9a       	sbi	0x05, 6	; 5
    lcd_db4_port_high();
     2d6:	2f 9a       	sbi	0x05, 7	; 5
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
     2d8:	8f e5       	ldi	r24, 0x5F	; 95
     2da:	9a ee       	ldi	r25, 0xEA	; 234
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_init+0x1c>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_init+0x22>
     2e2:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
     2e4:	2c 98       	cbi	0x05, 4	; 5
    lcd_db6_port_low();
     2e6:	2d 98       	cbi	0x05, 5	; 5
    Delay_ns(100);
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcd_init+0x2a>
    lcd_e_port_high();
     2ea:	81 df       	rcall	.-254    	; 0x1ee <lcd_e_port_high>
    Delay_ns(500);
     2ec:	92 e0       	ldi	r25, 0x02	; 2
     2ee:	9a 95       	dec	r25
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_init+0x2e>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <lcd_init+0x34>
    lcd_e_port_low();
     2f4:	7a df       	rcall	.-268    	; 0x1ea <lcd_e_port_low>

    Delay_us(4100);
     2f6:	8f e0       	ldi	r24, 0x0F	; 15
     2f8:	90 e4       	ldi	r25, 0x40	; 64
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_init+0x3a>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <lcd_init+0x40>
     300:	00 00       	nop

    lcd_e_port_high();
     302:	75 df       	rcall	.-278    	; 0x1ee <lcd_e_port_high>
    Delay_ns(500);
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	9a 95       	dec	r25
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0x46>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_init+0x4c>
    lcd_e_port_low();
     30c:	6e df       	rcall	.-292    	; 0x1ea <lcd_e_port_low>

    Delay_us(100);
     30e:	8f e8       	ldi	r24, 0x8F	; 143
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <lcd_init+0x52>
     316:	00 c0       	rjmp	.+0      	; 0x318 <lcd_init+0x58>
     318:	00 00       	nop

    lcd_e_port_high();
     31a:	69 df       	rcall	.-302    	; 0x1ee <lcd_e_port_high>
    Delay_ns(500);
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	9a 95       	dec	r25
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_init+0x5e>
     322:	00 c0       	rjmp	.+0      	; 0x324 <lcd_init+0x64>
    lcd_e_port_low();
     324:	62 df       	rcall	.-316    	; 0x1ea <lcd_e_port_low>

    Delay_us(40);
     326:	85 ed       	ldi	r24, 0xD5	; 213
     328:	8a 95       	dec	r24
     32a:	f1 f7       	brne	.-4      	; 0x328 <lcd_init+0x68>
     32c:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
     32e:	2f 98       	cbi	0x05, 7	; 5
      Delay_ns(100);
     330:	00 c0       	rjmp	.+0      	; 0x332 <lcd_init+0x72>
      lcd_e_port_high();
     332:	5d df       	rcall	.-326    	; 0x1ee <lcd_e_port_high>
      Delay_ns(500);
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	9a 95       	dec	r25
     338:	f1 f7       	brne	.-4      	; 0x336 <lcd_init+0x76>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_init+0x7c>
      lcd_e_port_low();
     33c:	56 df       	rcall	.-340    	; 0x1ea <lcd_e_port_low>
      Delay_us(40);
     33e:	85 ed       	ldi	r24, 0xD5	; 213
     340:	8a 95       	dec	r24
     342:	f1 f7       	brne	.-4      	; 0x340 <lcd_init+0x80>
     344:	00 00       	nop

      lcd_db4_port_low();
     346:	2f 98       	cbi	0x05, 7	; 5
      Delay_ns(100);
     348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_init+0x8a>
      lcd_e_port_high();
     34a:	51 df       	rcall	.-350    	; 0x1ee <lcd_e_port_high>
      Delay_ns(500);
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	9a 95       	dec	r25
     350:	f1 f7       	brne	.-4      	; 0x34e <lcd_init+0x8e>
     352:	00 c0       	rjmp	.+0      	; 0x354 <lcd_init+0x94>
      lcd_e_port_low();
     354:	4a df       	rcall	.-364    	; 0x1ea <lcd_e_port_low>
      Delay_ns(500);
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	8a 95       	dec	r24
     35a:	f1 f7       	brne	.-4      	; 0x358 <lcd_init+0x98>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <lcd_init+0x9e>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
     35e:	2c 9a       	sbi	0x05, 4	; 5
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_init+0xa2>
      lcd_e_port_high();
     362:	45 df       	rcall	.-374    	; 0x1ee <lcd_e_port_high>
      Delay_ns(500);
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	9a 95       	dec	r25
     368:	f1 f7       	brne	.-4      	; 0x366 <lcd_init+0xa6>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <lcd_init+0xac>
      lcd_e_port_low();
     36c:	3e df       	rcall	.-388    	; 0x1ea <lcd_e_port_low>
      Delay_us(40);
     36e:	85 ed       	ldi	r24, 0xD5	; 213
     370:	8a 95       	dec	r24
     372:	f1 f7       	brne	.-4      	; 0x370 <lcd_init+0xb0>
     374:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
     376:	88 e0       	ldi	r24, 0x08	; 8
     378:	90 df       	rcall	.-224    	; 0x29a <lcd_command>

    //Display Clear
    lcd_clrscr();
     37a:	93 df       	rcall	.-218    	; 0x2a2 <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
     37c:	86 e0       	ldi	r24, 0x06	; 6
     37e:	8d df       	rcall	.-230    	; 0x29a <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
     380:	8c e0       	ldi	r24, 0x0C	; 12
     382:	8b cf       	rjmp	.-234    	; 0x29a <lcd_command>

00000384 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	ec 01       	movw	r28, r24
     38a:	fc 01       	movw	r30, r24
     38c:	70 96       	adiw	r30, 0x10	; 16
     38e:	8b e0       	ldi	r24, 0x0B	; 11
     390:	df 01       	movw	r26, r30
     392:	1d 92       	st	X+, r1
     394:	8a 95       	dec	r24
     396:	e9 f7       	brne	.-6      	; 0x392 <CDC_Device_ConfigureEndpoints+0xe>
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	8c 83       	std	Y+4, r24	; 0x04
     39c:	89 87       	std	Y+9, r24	; 0x09
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	8e 87       	std	Y+14, r24	; 0x0e
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	ce 01       	movw	r24, r28
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	7d d2       	rcall	.+1274   	; 0x8a4 <Endpoint_ConfigureEndpointTable>
     3aa:	88 23       	and	r24, r24
     3ac:	61 f0       	breq	.+24     	; 0x3c6 <CDC_Device_ConfigureEndpoints+0x42>
     3ae:	61 e0       	ldi	r22, 0x01	; 1
     3b0:	ce 01       	movw	r24, r28
     3b2:	06 96       	adiw	r24, 0x06	; 6
     3b4:	77 d2       	rcall	.+1262   	; 0x8a4 <Endpoint_ConfigureEndpointTable>
     3b6:	88 23       	and	r24, r24
     3b8:	31 f0       	breq	.+12     	; 0x3c6 <CDC_Device_ConfigureEndpoints+0x42>
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	ce 01       	movw	r24, r28
     3be:	0b 96       	adiw	r24, 0x0b	; 11
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	6f c2       	rjmp	.+1246   	; 0x8a4 <Endpoint_ConfigureEndpointTable>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <CDC_Device_SendByte>:
     3ce:	cf 93       	push	r28
     3d0:	c6 2f       	mov	r28, r22
     3d2:	20 91 70 01 	lds	r18, 0x0170
     3d6:	24 30       	cpi	r18, 0x04	; 4
     3d8:	f1 f4       	brne	.+60     	; 0x416 <CDC_Device_SendByte+0x48>
     3da:	fc 01       	movw	r30, r24
     3dc:	44 89       	ldd	r20, Z+20	; 0x14
     3de:	55 89       	ldd	r21, Z+21	; 0x15
     3e0:	66 89       	ldd	r22, Z+22	; 0x16
     3e2:	77 89       	ldd	r23, Z+23	; 0x17
     3e4:	45 2b       	or	r20, r21
     3e6:	46 2b       	or	r20, r22
     3e8:	47 2b       	or	r20, r23
     3ea:	a9 f0       	breq	.+42     	; 0x416 <CDC_Device_SendByte+0x48>
     3ec:	81 81       	ldd	r24, Z+1	; 0x01
     3ee:	8f 70       	andi	r24, 0x0F	; 15
     3f0:	80 93 e9 00 	sts	0x00E9, r24
     3f4:	80 91 e8 00 	lds	r24, 0x00E8
     3f8:	85 ff       	sbrs	r24, 5
     3fa:	04 c0       	rjmp	.+8      	; 0x404 <CDC_Device_SendByte+0x36>
     3fc:	c0 93 f1 00 	sts	0x00F1, r28
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0a c0       	rjmp	.+20     	; 0x418 <CDC_Device_SendByte+0x4a>
     404:	80 91 e8 00 	lds	r24, 0x00E8
     408:	8e 77       	andi	r24, 0x7E	; 126
     40a:	80 93 e8 00 	sts	0x00E8, r24
     40e:	a8 d2       	rcall	.+1360   	; 0x960 <Endpoint_WaitUntilReady>
     410:	88 23       	and	r24, r24
     412:	a1 f3       	breq	.-24     	; 0x3fc <CDC_Device_SendByte+0x2e>
     414:	01 c0       	rjmp	.+2      	; 0x418 <CDC_Device_SendByte+0x4a>
     416:	82 e0       	ldi	r24, 0x02	; 2
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <CDC_Device_putchar>:
     41c:	fb 01       	movw	r30, r22
     41e:	68 2f       	mov	r22, r24
     420:	84 85       	ldd	r24, Z+12	; 0x0c
     422:	95 85       	ldd	r25, Z+13	; 0x0d
     424:	d4 df       	rcall	.-88     	; 0x3ce <CDC_Device_SendByte>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	81 11       	cpse	r24, r1
     42c:	02 c0       	rjmp	.+4      	; 0x432 <CDC_Device_putchar+0x16>
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	88 27       	eor	r24, r24
     434:	99 27       	eor	r25, r25
     436:	82 1b       	sub	r24, r18
     438:	93 0b       	sbc	r25, r19
     43a:	08 95       	ret

0000043c <CDC_Device_Flush>:
     43c:	20 91 70 01 	lds	r18, 0x0170
     440:	24 30       	cpi	r18, 0x04	; 4
     442:	41 f5       	brne	.+80     	; 0x494 <CDC_Device_Flush+0x58>
     444:	fc 01       	movw	r30, r24
     446:	44 89       	ldd	r20, Z+20	; 0x14
     448:	55 89       	ldd	r21, Z+21	; 0x15
     44a:	66 89       	ldd	r22, Z+22	; 0x16
     44c:	77 89       	ldd	r23, Z+23	; 0x17
     44e:	45 2b       	or	r20, r21
     450:	46 2b       	or	r20, r22
     452:	47 2b       	or	r20, r23
     454:	f9 f0       	breq	.+62     	; 0x494 <CDC_Device_Flush+0x58>
     456:	81 81       	ldd	r24, Z+1	; 0x01
     458:	8f 70       	andi	r24, 0x0F	; 15
     45a:	80 93 e9 00 	sts	0x00E9, r24
     45e:	20 91 f3 00 	lds	r18, 0x00F3
     462:	80 91 f2 00 	lds	r24, 0x00F2
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	92 2b       	or	r25, r18
     46a:	89 2b       	or	r24, r25
     46c:	89 f0       	breq	.+34     	; 0x490 <CDC_Device_Flush+0x54>
     46e:	90 91 e8 00 	lds	r25, 0x00E8
     472:	80 91 e8 00 	lds	r24, 0x00E8
     476:	8e 77       	andi	r24, 0x7E	; 126
     478:	80 93 e8 00 	sts	0x00E8, r24
     47c:	95 fd       	sbrc	r25, 5
     47e:	08 c0       	rjmp	.+16     	; 0x490 <CDC_Device_Flush+0x54>
     480:	6f d2       	rcall	.+1246   	; 0x960 <Endpoint_WaitUntilReady>
     482:	81 11       	cpse	r24, r1
     484:	08 c0       	rjmp	.+16     	; 0x496 <CDC_Device_Flush+0x5a>
     486:	80 91 e8 00 	lds	r24, 0x00E8
     48a:	8e 77       	andi	r24, 0x7E	; 126
     48c:	80 93 e8 00 	sts	0x00E8, r24
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	08 95       	ret
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	08 95       	ret

00000498 <CDC_Device_USBTask>:
     498:	20 91 70 01 	lds	r18, 0x0170
     49c:	24 30       	cpi	r18, 0x04	; 4
     49e:	89 f4       	brne	.+34     	; 0x4c2 <CDC_Device_USBTask+0x2a>
     4a0:	fc 01       	movw	r30, r24
     4a2:	44 89       	ldd	r20, Z+20	; 0x14
     4a4:	55 89       	ldd	r21, Z+21	; 0x15
     4a6:	66 89       	ldd	r22, Z+22	; 0x16
     4a8:	77 89       	ldd	r23, Z+23	; 0x17
     4aa:	45 2b       	or	r20, r21
     4ac:	46 2b       	or	r20, r22
     4ae:	47 2b       	or	r20, r23
     4b0:	41 f0       	breq	.+16     	; 0x4c2 <CDC_Device_USBTask+0x2a>
     4b2:	21 81       	ldd	r18, Z+1	; 0x01
     4b4:	2f 70       	andi	r18, 0x0F	; 15
     4b6:	20 93 e9 00 	sts	0x00E9, r18
     4ba:	20 91 e8 00 	lds	r18, 0x00E8
     4be:	20 fd       	sbrc	r18, 0
     4c0:	bd cf       	rjmp	.-134    	; 0x43c <CDC_Device_Flush>
     4c2:	08 95       	ret

000004c4 <CDC_Device_ReceiveByte>:
     4c4:	20 91 70 01 	lds	r18, 0x0170
     4c8:	24 30       	cpi	r18, 0x04	; 4
     4ca:	19 f0       	breq	.+6      	; 0x4d2 <CDC_Device_ReceiveByte+0xe>
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	9f ef       	ldi	r25, 0xFF	; 255
     4d0:	08 95       	ret
     4d2:	fc 01       	movw	r30, r24
     4d4:	44 89       	ldd	r20, Z+20	; 0x14
     4d6:	55 89       	ldd	r21, Z+21	; 0x15
     4d8:	66 89       	ldd	r22, Z+22	; 0x16
     4da:	77 89       	ldd	r23, Z+23	; 0x17
     4dc:	45 2b       	or	r20, r21
     4de:	46 2b       	or	r20, r22
     4e0:	47 2b       	or	r20, r23
     4e2:	a1 f3       	breq	.-24     	; 0x4cc <CDC_Device_ReceiveByte+0x8>
     4e4:	86 81       	ldd	r24, Z+6	; 0x06
     4e6:	8f 70       	andi	r24, 0x0F	; 15
     4e8:	80 93 e9 00 	sts	0x00E9, r24
     4ec:	80 91 e8 00 	lds	r24, 0x00E8
     4f0:	82 ff       	sbrs	r24, 2
     4f2:	ec cf       	rjmp	.-40     	; 0x4cc <CDC_Device_ReceiveByte+0x8>
     4f4:	20 91 f3 00 	lds	r18, 0x00F3
     4f8:	80 91 f2 00 	lds	r24, 0x00F2
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	92 2b       	or	r25, r18
     500:	89 2b       	or	r24, r25
     502:	21 f0       	breq	.+8      	; 0x50c <CDC_Device_ReceiveByte+0x48>
     504:	20 91 f1 00 	lds	r18, 0x00F1
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	02 c0       	rjmp	.+4      	; 0x510 <CDC_Device_ReceiveByte+0x4c>
     50c:	2f ef       	ldi	r18, 0xFF	; 255
     50e:	3f ef       	ldi	r19, 0xFF	; 255
     510:	40 91 f3 00 	lds	r20, 0x00F3
     514:	80 91 f2 00 	lds	r24, 0x00F2
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	94 2b       	or	r25, r20
     51c:	89 2b       	or	r24, r25
     51e:	29 f4       	brne	.+10     	; 0x52a <CDC_Device_ReceiveByte+0x66>
     520:	80 91 e8 00 	lds	r24, 0x00E8
     524:	8b 77       	andi	r24, 0x7B	; 123
     526:	80 93 e8 00 	sts	0x00E8, r24
     52a:	c9 01       	movw	r24, r18
     52c:	08 95       	ret

0000052e <CDC_Device_getchar>:
     52e:	fc 01       	movw	r30, r24
     530:	84 85       	ldd	r24, Z+12	; 0x0c
     532:	95 85       	ldd	r25, Z+13	; 0x0d
     534:	c7 df       	rcall	.-114    	; 0x4c4 <CDC_Device_ReceiveByte>
     536:	97 ff       	sbrs	r25, 7
     538:	02 c0       	rjmp	.+4      	; 0x53e <CDC_Device_getchar+0x10>
     53a:	8e ef       	ldi	r24, 0xFE	; 254
     53c:	9f ef       	ldi	r25, 0xFF	; 255
     53e:	08 95       	ret

00000540 <CDC_Device_CreateStream>:
     540:	fb 01       	movw	r30, r22
     542:	2e e0       	ldi	r18, 0x0E	; 14
     544:	db 01       	movw	r26, r22
     546:	1d 92       	st	X+, r1
     548:	2a 95       	dec	r18
     54a:	e9 f7       	brne	.-6      	; 0x546 <CDC_Device_CreateStream+0x6>
     54c:	23 e0       	ldi	r18, 0x03	; 3
     54e:	23 83       	std	Z+3, r18	; 0x03
     550:	2e e0       	ldi	r18, 0x0E	; 14
     552:	32 e0       	ldi	r19, 0x02	; 2
     554:	31 87       	std	Z+9, r19	; 0x09
     556:	20 87       	std	Z+8, r18	; 0x08
     558:	27 e9       	ldi	r18, 0x97	; 151
     55a:	32 e0       	ldi	r19, 0x02	; 2
     55c:	33 87       	std	Z+11, r19	; 0x0b
     55e:	22 87       	std	Z+10, r18	; 0x0a
     560:	95 87       	std	Z+13, r25	; 0x0d
     562:	84 87       	std	Z+12, r24	; 0x0c
     564:	08 95       	ret

00000566 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     566:	08 95       	ret

00000568 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     56e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     572:	83 ff       	sbrs	r24, 3
     574:	a6 c0       	rjmp	.+332    	; 0x6c2 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     576:	88 81       	ld	r24, Y
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	20 91 75 01 	lds	r18, 0x0175
     57e:	30 91 76 01 	lds	r19, 0x0176
     582:	28 17       	cp	r18, r24
     584:	39 07       	cpc	r19, r25
     586:	09 f0       	breq	.+2      	; 0x58a <CDC_Device_ProcessControlRequest+0x22>
     588:	9c c0       	rjmp	.+312    	; 0x6c2 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     58a:	80 91 72 01 	lds	r24, 0x0172
     58e:	81 32       	cpi	r24, 0x21	; 33
     590:	61 f0       	breq	.+24     	; 0x5aa <CDC_Device_ProcessControlRequest+0x42>
     592:	20 f4       	brcc	.+8      	; 0x59c <CDC_Device_ProcessControlRequest+0x34>
     594:	80 32       	cpi	r24, 0x20	; 32
     596:	09 f4       	brne	.+2      	; 0x59a <CDC_Device_ProcessControlRequest+0x32>
     598:	3e c0       	rjmp	.+124    	; 0x616 <CDC_Device_ProcessControlRequest+0xae>
     59a:	93 c0       	rjmp	.+294    	; 0x6c2 <CDC_Device_ProcessControlRequest+0x15a>
     59c:	82 32       	cpi	r24, 0x22	; 34
     59e:	09 f4       	brne	.+2      	; 0x5a2 <CDC_Device_ProcessControlRequest+0x3a>
     5a0:	6c c0       	rjmp	.+216    	; 0x67a <CDC_Device_ProcessControlRequest+0x112>
     5a2:	83 32       	cpi	r24, 0x23	; 35
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <CDC_Device_ProcessControlRequest+0x40>
     5a6:	7d c0       	rjmp	.+250    	; 0x6a2 <CDC_Device_ProcessControlRequest+0x13a>
     5a8:	8c c0       	rjmp	.+280    	; 0x6c2 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     5aa:	80 91 71 01 	lds	r24, 0x0171
     5ae:	81 3a       	cpi	r24, 0xA1	; 161
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <CDC_Device_ProcessControlRequest+0x4c>
     5b2:	87 c0       	rjmp	.+270    	; 0x6c2 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     5b4:	80 91 e8 00 	lds	r24, 0x00E8
     5b8:	87 7f       	andi	r24, 0xF7	; 247
     5ba:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5be:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     5c2:	80 ff       	sbrs	r24, 0
     5c4:	fc cf       	rjmp	.-8      	; 0x5be <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     5c6:	4c 89       	ldd	r20, Y+20	; 0x14
     5c8:	5d 89       	ldd	r21, Y+21	; 0x15
     5ca:	6e 89       	ldd	r22, Y+22	; 0x16
     5cc:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     5ce:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     5d2:	bb 27       	eor	r27, r27
     5d4:	a7 2f       	mov	r26, r23
     5d6:	96 2f       	mov	r25, r22
     5d8:	85 2f       	mov	r24, r21
     5da:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     5de:	cb 01       	movw	r24, r22
     5e0:	aa 27       	eor	r26, r26
     5e2:	bb 27       	eor	r27, r27
     5e4:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     5e8:	47 2f       	mov	r20, r23
     5ea:	55 27       	eor	r21, r21
     5ec:	66 27       	eor	r22, r22
     5ee:	77 27       	eor	r23, r23
     5f0:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     5f4:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5f6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     5fa:	89 8d       	ldd	r24, Y+25	; 0x19
     5fc:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     600:	8a 8d       	ldd	r24, Y+26	; 0x1a
     602:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     606:	80 91 e8 00 	lds	r24, 0x00E8
     60a:	8e 77       	andi	r24, 0x7E	; 126
     60c:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     614:	84 c1       	rjmp	.+776    	; 0x91e <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     616:	80 91 71 01 	lds	r24, 0x0171
     61a:	81 32       	cpi	r24, 0x21	; 33
     61c:	09 f0       	breq	.+2      	; 0x620 <CDC_Device_ProcessControlRequest+0xb8>
     61e:	51 c0       	rjmp	.+162    	; 0x6c2 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     620:	80 91 e8 00 	lds	r24, 0x00E8
     624:	87 7f       	andi	r24, 0xF7	; 247
     626:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     62a:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     62e:	82 fd       	sbrc	r24, 2
     630:	05 c0       	rjmp	.+10     	; 0x63c <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     632:	80 91 70 01 	lds	r24, 0x0170
     636:	81 11       	cpse	r24, r1
     638:	f8 cf       	rjmp	.-16     	; 0x62a <CDC_Device_ProcessControlRequest+0xc2>
     63a:	43 c0       	rjmp	.+134    	; 0x6c2 <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     63c:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     640:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     644:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     648:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     64c:	3c 8b       	std	Y+20, r19	; 0x14
     64e:	2d 8b       	std	Y+21, r18	; 0x15
     650:	9e 8b       	std	Y+22, r25	; 0x16
     652:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     654:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     658:	88 8f       	std	Y+24, r24	; 0x18
     65a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     65e:	89 8f       	std	Y+25, r24	; 0x19
     660:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     664:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     666:	80 91 e8 00 	lds	r24, 0x00E8
     66a:	8b 77       	andi	r24, 0x7B	; 123
     66c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     670:	56 d1       	rcall	.+684    	; 0x91e <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     672:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     678:	76 cf       	rjmp	.-276    	; 0x566 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     67a:	80 91 71 01 	lds	r24, 0x0171
     67e:	81 32       	cpi	r24, 0x21	; 33
     680:	01 f5       	brne	.+64     	; 0x6c2 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     682:	80 91 e8 00 	lds	r24, 0x00E8
     686:	87 7f       	andi	r24, 0xF7	; 247
     688:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     68c:	48 d1       	rcall	.+656    	; 0x91e <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     68e:	80 91 73 01 	lds	r24, 0x0173
     692:	90 91 74 01 	lds	r25, 0x0174
     696:	99 8b       	std	Y+17, r25	; 0x11
     698:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     69a:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     6a0:	62 cf       	rjmp	.-316    	; 0x566 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6a2:	80 91 71 01 	lds	r24, 0x0171
     6a6:	81 32       	cpi	r24, 0x21	; 33
     6a8:	61 f4       	brne	.+24     	; 0x6c2 <CDC_Device_ProcessControlRequest+0x15a>
     6aa:	80 91 e8 00 	lds	r24, 0x00E8
     6ae:	87 7f       	andi	r24, 0xF7	; 247
     6b0:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     6b4:	34 d1       	rcall	.+616    	; 0x91e <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     6b6:	60 91 73 01 	lds	r22, 0x0173
     6ba:	ce 01       	movw	r24, r28
			}

			break;
	}
}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     6c0:	52 cf       	rjmp	.-348    	; 0x566 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6c8:	20 91 77 01 	lds	r18, 0x0177
     6cc:	30 91 78 01 	lds	r19, 0x0178
     6d0:	26 17       	cp	r18, r22
     6d2:	37 07       	cpc	r19, r23
     6d4:	48 f0       	brcs	.+18     	; 0x6e8 <Endpoint_Write_Control_Stream_LE+0x20>
     6d6:	61 15       	cp	r22, r1
     6d8:	71 05       	cpc	r23, r1
     6da:	39 f4       	brne	.+14     	; 0x6ea <Endpoint_Write_Control_Stream_LE+0x22>
     6dc:	20 91 e8 00 	lds	r18, 0x00E8
     6e0:	2e 77       	andi	r18, 0x7E	; 126
     6e2:	20 93 e8 00 	sts	0x00E8, r18
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <Endpoint_Write_Control_Stream_LE+0x22>
     6e8:	b9 01       	movw	r22, r18
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	61 15       	cp	r22, r1
     6f0:	71 05       	cpc	r23, r1
     6f2:	a9 f1       	breq	.+106    	; 0x75e <Endpoint_Write_Control_Stream_LE+0x96>
     6f4:	80 91 70 01 	lds	r24, 0x0170
     6f8:	88 23       	and	r24, r24
     6fa:	e9 f1       	breq	.+122    	; 0x776 <Endpoint_Write_Control_Stream_LE+0xae>
     6fc:	85 30       	cpi	r24, 0x05	; 5
     6fe:	e9 f1       	breq	.+122    	; 0x77a <Endpoint_Write_Control_Stream_LE+0xb2>
     700:	80 91 e8 00 	lds	r24, 0x00E8
     704:	83 fd       	sbrc	r24, 3
     706:	35 c0       	rjmp	.+106    	; 0x772 <Endpoint_Write_Control_Stream_LE+0xaa>
     708:	80 91 e8 00 	lds	r24, 0x00E8
     70c:	82 ff       	sbrs	r24, 2
     70e:	06 c0       	rjmp	.+12     	; 0x71c <Endpoint_Write_Control_Stream_LE+0x54>
     710:	80 91 e8 00 	lds	r24, 0x00E8
     714:	82 ff       	sbrs	r24, 2
     716:	26 c0       	rjmp	.+76     	; 0x764 <Endpoint_Write_Control_Stream_LE+0x9c>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	08 95       	ret
     71c:	80 91 e8 00 	lds	r24, 0x00E8
     720:	80 ff       	sbrs	r24, 0
     722:	e5 cf       	rjmp	.-54     	; 0x6ee <Endpoint_Write_Control_Stream_LE+0x26>
     724:	20 91 f3 00 	lds	r18, 0x00F3
     728:	80 91 f2 00 	lds	r24, 0x00F2
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	92 2b       	or	r25, r18
     730:	61 15       	cp	r22, r1
     732:	71 05       	cpc	r23, r1
     734:	51 f0       	breq	.+20     	; 0x74a <Endpoint_Write_Control_Stream_LE+0x82>
     736:	88 30       	cpi	r24, 0x08	; 8
     738:	91 05       	cpc	r25, r1
     73a:	38 f4       	brcc	.+14     	; 0x74a <Endpoint_Write_Control_Stream_LE+0x82>
     73c:	21 91       	ld	r18, Z+
     73e:	20 93 f1 00 	sts	0x00F1, r18
     742:	61 50       	subi	r22, 0x01	; 1
     744:	71 09       	sbc	r23, r1
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	f3 cf       	rjmp	.-26     	; 0x730 <Endpoint_Write_Control_Stream_LE+0x68>
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	08 97       	sbiw	r24, 0x08	; 8
     74e:	09 f0       	breq	.+2      	; 0x752 <Endpoint_Write_Control_Stream_LE+0x8a>
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	80 91 e8 00 	lds	r24, 0x00E8
     756:	8e 77       	andi	r24, 0x7E	; 126
     758:	80 93 e8 00 	sts	0x00E8, r24
     75c:	c8 cf       	rjmp	.-112    	; 0x6ee <Endpoint_Write_Control_Stream_LE+0x26>
     75e:	21 11       	cpse	r18, r1
     760:	c9 cf       	rjmp	.-110    	; 0x6f4 <Endpoint_Write_Control_Stream_LE+0x2c>
     762:	d6 cf       	rjmp	.-84     	; 0x710 <Endpoint_Write_Control_Stream_LE+0x48>
     764:	80 91 70 01 	lds	r24, 0x0170
     768:	88 23       	and	r24, r24
     76a:	29 f0       	breq	.+10     	; 0x776 <Endpoint_Write_Control_Stream_LE+0xae>
     76c:	85 30       	cpi	r24, 0x05	; 5
     76e:	81 f6       	brne	.-96     	; 0x710 <Endpoint_Write_Control_Stream_LE+0x48>
     770:	04 c0       	rjmp	.+8      	; 0x77a <Endpoint_Write_Control_Stream_LE+0xb2>
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	08 95       	ret
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	08 95       	ret
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	08 95       	ret

0000077e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     77e:	20 91 77 01 	lds	r18, 0x0177
     782:	30 91 78 01 	lds	r19, 0x0178
     786:	26 17       	cp	r18, r22
     788:	37 07       	cpc	r19, r23
     78a:	48 f0       	brcs	.+18     	; 0x79e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     78c:	61 15       	cp	r22, r1
     78e:	71 05       	cpc	r23, r1
     790:	39 f4       	brne	.+14     	; 0x7a0 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     792:	20 91 e8 00 	lds	r18, 0x00E8
     796:	2e 77       	andi	r18, 0x7E	; 126
     798:	20 93 e8 00 	sts	0x00E8, r18
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <Endpoint_Write_Control_PStream_LE+0x22>
     79e:	b9 01       	movw	r22, r18
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7a4:	61 15       	cp	r22, r1
     7a6:	71 05       	cpc	r23, r1
     7a8:	c1 f1       	breq	.+112    	; 0x81a <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7aa:	80 91 70 01 	lds	r24, 0x0170

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7ae:	88 23       	and	r24, r24
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0x36>
     7b2:	3f c0       	rjmp	.+126    	; 0x832 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7b4:	85 30       	cpi	r24, 0x05	; 5
     7b6:	09 f4       	brne	.+2      	; 0x7ba <Endpoint_Write_Control_PStream_LE+0x3c>
     7b8:	3e c0       	rjmp	.+124    	; 0x836 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7ba:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7be:	83 fd       	sbrc	r24, 3
     7c0:	36 c0       	rjmp	.+108    	; 0x82e <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7c2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7c6:	82 ff       	sbrs	r24, 2
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <Endpoint_Write_Control_PStream_LE+0x58>
     7ca:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     7ce:	82 ff       	sbrs	r24, 2
     7d0:	27 c0       	rjmp	.+78     	; 0x820 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7d6:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     7da:	80 ff       	sbrs	r24, 0
     7dc:	e3 cf       	rjmp	.-58     	; 0x7a4 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     7de:	20 91 f3 00 	lds	r18, 0x00F3
     7e2:	80 91 f2 00 	lds	r24, 0x00F2
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7ea:	61 15       	cp	r22, r1
     7ec:	71 05       	cpc	r23, r1
     7ee:	59 f0       	breq	.+22     	; 0x806 <Endpoint_Write_Control_PStream_LE+0x88>
     7f0:	88 30       	cpi	r24, 0x08	; 8
     7f2:	91 05       	cpc	r25, r1
     7f4:	40 f4       	brcc	.+16     	; 0x806 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7f6:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7f8:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     7fc:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     7fe:	61 50       	subi	r22, 0x01	; 1
     800:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	f2 cf       	rjmp	.-28     	; 0x7ea <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	08 97       	sbiw	r24, 0x08	; 8
     80a:	09 f0       	breq	.+2      	; 0x80e <Endpoint_Write_Control_PStream_LE+0x90>
     80c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     80e:	80 91 e8 00 	lds	r24, 0x00E8
     812:	8e 77       	andi	r24, 0x7E	; 126
     814:	80 93 e8 00 	sts	0x00E8, r24
     818:	c5 cf       	rjmp	.-118    	; 0x7a4 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     81a:	21 11       	cpse	r18, r1
     81c:	c6 cf       	rjmp	.-116    	; 0x7aa <Endpoint_Write_Control_PStream_LE+0x2c>
     81e:	d5 cf       	rjmp	.-86     	; 0x7ca <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     820:	80 91 70 01 	lds	r24, 0x0170

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     824:	88 23       	and	r24, r24
     826:	29 f0       	breq	.+10     	; 0x832 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     828:	85 30       	cpi	r24, 0x05	; 5
     82a:	79 f6       	brne	.-98     	; 0x7ca <Endpoint_Write_Control_PStream_LE+0x4c>
     82c:	04 c0       	rjmp	.+8      	; 0x836 <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     836:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     838:	08 95       	ret

0000083a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     83a:	98 2f       	mov	r25, r24
     83c:	97 30       	cpi	r25, 0x07	; 7
     83e:	58 f5       	brcc	.+86     	; 0x896 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     840:	90 93 e9 00 	sts	0x00E9, r25
     844:	98 17       	cp	r25, r24
     846:	39 f0       	breq	.+14     	; 0x856 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     848:	70 91 ec 00 	lds	r23, 0x00EC
     84c:	20 91 ed 00 	lds	r18, 0x00ED
     850:	50 91 f0 00 	lds	r21, 0x00F0
     854:	03 c0       	rjmp	.+6      	; 0x85c <Endpoint_ConfigureEndpoint_Prv+0x22>
     856:	24 2f       	mov	r18, r20
     858:	76 2f       	mov	r23, r22
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	21 ff       	sbrs	r18, 1
     85e:	19 c0       	rjmp	.+50     	; 0x892 <Endpoint_ConfigureEndpoint_Prv+0x58>
     860:	30 91 eb 00 	lds	r19, 0x00EB
     864:	3e 7f       	andi	r19, 0xFE	; 254
     866:	30 93 eb 00 	sts	0x00EB, r19
     86a:	30 91 ed 00 	lds	r19, 0x00ED
     86e:	3d 7f       	andi	r19, 0xFD	; 253
     870:	30 93 ed 00 	sts	0x00ED, r19
     874:	30 91 eb 00 	lds	r19, 0x00EB
     878:	31 60       	ori	r19, 0x01	; 1
     87a:	30 93 eb 00 	sts	0x00EB, r19
     87e:	70 93 ec 00 	sts	0x00EC, r23
     882:	20 93 ed 00 	sts	0x00ED, r18
     886:	50 93 f0 00 	sts	0x00F0, r21
     88a:	20 91 ee 00 	lds	r18, 0x00EE
     88e:	27 ff       	sbrs	r18, 7
     890:	07 c0       	rjmp	.+14     	; 0x8a0 <Endpoint_ConfigureEndpoint_Prv+0x66>
     892:	9f 5f       	subi	r25, 0xFF	; 255
     894:	d3 cf       	rjmp	.-90     	; 0x83c <Endpoint_ConfigureEndpoint_Prv+0x2>
     896:	8f 70       	andi	r24, 0x0F	; 15
     898:	80 93 e9 00 	sts	0x00E9, r24
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	08 95       	ret
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	08 95       	ret

000008a4 <Endpoint_ConfigureEndpointTable>:
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	06 2f       	mov	r16, r22
     8ae:	ec 01       	movw	r28, r24
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	10 17       	cp	r17, r16
     8b4:	71 f1       	breq	.+92     	; 0x912 <Endpoint_ConfigureEndpointTable+0x6e>
     8b6:	98 81       	ld	r25, Y
     8b8:	99 23       	and	r25, r25
     8ba:	41 f1       	breq	.+80     	; 0x90c <Endpoint_ConfigureEndpointTable+0x68>
     8bc:	2c 81       	ldd	r18, Y+4	; 0x04
     8be:	e9 81       	ldd	r30, Y+1	; 0x01
     8c0:	fa 81       	ldd	r31, Y+2	; 0x02
     8c2:	7b 81       	ldd	r23, Y+3	; 0x03
     8c4:	89 2f       	mov	r24, r25
     8c6:	8f 70       	andi	r24, 0x0F	; 15
     8c8:	87 30       	cpi	r24, 0x07	; 7
     8ca:	10 f0       	brcs	.+4      	; 0x8d0 <Endpoint_ConfigureEndpointTable+0x2c>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	22 c0       	rjmp	.+68     	; 0x914 <Endpoint_ConfigureEndpointTable+0x70>
     8d0:	22 30       	cpi	r18, 0x02	; 2
     8d2:	10 f0       	brcs	.+4      	; 0x8d8 <Endpoint_ConfigureEndpointTable+0x34>
     8d4:	56 e0       	ldi	r21, 0x06	; 6
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <Endpoint_ConfigureEndpointTable+0x36>
     8d8:	52 e0       	ldi	r21, 0x02	; 2
     8da:	28 e0       	ldi	r18, 0x08	; 8
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	2e 17       	cp	r18, r30
     8e2:	3f 07       	cpc	r19, r31
     8e4:	20 f4       	brcc	.+8      	; 0x8ee <Endpoint_ConfigureEndpointTable+0x4a>
     8e6:	4f 5f       	subi	r20, 0xFF	; 255
     8e8:	22 0f       	add	r18, r18
     8ea:	33 1f       	adc	r19, r19
     8ec:	f9 cf       	rjmp	.-14     	; 0x8e0 <Endpoint_ConfigureEndpointTable+0x3c>
     8ee:	42 95       	swap	r20
     8f0:	40 7f       	andi	r20, 0xF0	; 240
     8f2:	45 2b       	or	r20, r21
     8f4:	69 2f       	mov	r22, r25
     8f6:	66 1f       	adc	r22, r22
     8f8:	66 27       	eor	r22, r22
     8fa:	66 1f       	adc	r22, r22
     8fc:	90 e4       	ldi	r25, 0x40	; 64
     8fe:	79 9f       	mul	r23, r25
     900:	90 01       	movw	r18, r0
     902:	11 24       	eor	r1, r1
     904:	62 2b       	or	r22, r18
     906:	99 df       	rcall	.-206    	; 0x83a <Endpoint_ConfigureEndpoint_Prv>
     908:	88 23       	and	r24, r24
     90a:	01 f3       	breq	.-64     	; 0x8cc <Endpoint_ConfigureEndpointTable+0x28>
     90c:	1f 5f       	subi	r17, 0xFF	; 255
     90e:	25 96       	adiw	r28, 0x05	; 5
     910:	d0 cf       	rjmp	.-96     	; 0x8b2 <Endpoint_ConfigureEndpointTable+0xe>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	08 95       	ret

0000091e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     91e:	80 91 71 01 	lds	r24, 0x0171
     922:	87 fd       	sbrc	r24, 7
     924:	05 c0       	rjmp	.+10     	; 0x930 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     926:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     92a:	80 ff       	sbrs	r24, 0
     92c:	0e c0       	rjmp	.+28     	; 0x94a <Endpoint_ClearStatusStage+0x2c>
     92e:	12 c0       	rjmp	.+36     	; 0x954 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     930:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     934:	82 fd       	sbrc	r24, 2
     936:	05 c0       	rjmp	.+10     	; 0x942 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     938:	80 91 70 01 	lds	r24, 0x0170
     93c:	81 11       	cpse	r24, r1
     93e:	f8 cf       	rjmp	.-16     	; 0x930 <Endpoint_ClearStatusStage+0x12>
     940:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     942:	80 91 e8 00 	lds	r24, 0x00E8
     946:	8b 77       	andi	r24, 0x7B	; 123
     948:	08 c0       	rjmp	.+16     	; 0x95a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     94a:	80 91 70 01 	lds	r24, 0x0170
     94e:	81 11       	cpse	r24, r1
     950:	ea cf       	rjmp	.-44     	; 0x926 <Endpoint_ClearStatusStage+0x8>
     952:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     954:	80 91 e8 00 	lds	r24, 0x00E8
     958:	8e 77       	andi	r24, 0x7E	; 126
     95a:	80 93 e8 00 	sts	0x00E8, r24
     95e:	08 95       	ret

00000960 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     960:	80 91 e4 00 	lds	r24, 0x00E4
     964:	90 91 e5 00 	lds	r25, 0x00E5
     968:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     96a:	20 91 ec 00 	lds	r18, 0x00EC
     96e:	20 ff       	sbrs	r18, 0
     970:	21 c0       	rjmp	.+66     	; 0x9b4 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     972:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     976:	20 fd       	sbrc	r18, 0
     978:	21 c0       	rjmp	.+66     	; 0x9bc <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     97a:	20 91 70 01 	lds	r18, 0x0170

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     97e:	22 23       	and	r18, r18
     980:	89 f0       	breq	.+34     	; 0x9a4 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     982:	25 30       	cpi	r18, 0x05	; 5
     984:	89 f0       	breq	.+34     	; 0x9a8 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     986:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     98a:	25 fd       	sbrc	r18, 5
     98c:	0f c0       	rjmp	.+30     	; 0x9ac <Endpoint_WaitUntilReady+0x4c>
     98e:	20 91 e4 00 	lds	r18, 0x00E4
     992:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     996:	28 17       	cp	r18, r24
     998:	39 07       	cpc	r19, r25
     99a:	39 f3       	breq	.-50     	; 0x96a <Endpoint_WaitUntilReady+0xa>
     99c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     99e:	41 f0       	breq	.+16     	; 0x9b0 <Endpoint_WaitUntilReady+0x50>
     9a0:	c9 01       	movw	r24, r18
     9a2:	e3 cf       	rjmp	.-58     	; 0x96a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     9b0:	84 e0       	ldi	r24, 0x04	; 4
     9b2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9b4:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     9b8:	22 ff       	sbrs	r18, 2
     9ba:	df cf       	rjmp	.-66     	; 0x97a <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	08 95       	ret

000009c0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     9c8:	4b d0       	rcall	.+150    	; 0xa60 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9ca:	52 d0       	rcall	.+164    	; 0xa70 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     9cc:	c8 ed       	ldi	r28, 0xD8	; 216
     9ce:	d0 e0       	ldi	r29, 0x00	; 0
     9d0:	88 81       	ld	r24, Y
     9d2:	8f 77       	andi	r24, 0x7F	; 127
     9d4:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     9d6:	88 81       	ld	r24, Y
     9d8:	80 68       	ori	r24, 0x80	; 128
     9da:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9dc:	88 81       	ld	r24, Y
     9de:	8f 7d       	andi	r24, 0xDF	; 223
     9e0:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9e2:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     9e4:	10 92 70 01 	sts	0x0170, r1
	USB_Device_ConfigurationNumber  = 0;
     9e8:	10 92 6c 01 	sts	0x016C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     9ec:	10 92 6e 01 	sts	0x016E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     9f0:	10 92 6d 01 	sts	0x016D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     9f4:	00 ee       	ldi	r16, 0xE0	; 224
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	f8 01       	movw	r30, r16
     9fa:	80 81       	ld	r24, Z
     9fc:	8b 7f       	andi	r24, 0xFB	; 251
     9fe:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     a00:	88 81       	ld	r24, Y
     a02:	81 60       	ori	r24, 0x01	; 1
     a04:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a06:	42 e0       	ldi	r20, 0x02	; 2
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	16 df       	rcall	.-468    	; 0x83a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a0e:	e1 ee       	ldi	r30, 0xE1	; 225
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	8e 7f       	andi	r24, 0xFE	; 254
     a16:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a18:	e2 ee       	ldi	r30, 0xE2	; 226
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	81 60       	ori	r24, 0x01	; 1
     a20:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a22:	80 81       	ld	r24, Z
     a24:	88 60       	ori	r24, 0x08	; 8
     a26:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a28:	f8 01       	movw	r30, r16
     a2a:	80 81       	ld	r24, Z
     a2c:	8e 7f       	andi	r24, 0xFE	; 254
     a2e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a30:	88 81       	ld	r24, Y
     a32:	80 61       	ori	r24, 0x10	; 16
     a34:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     a40:	e8 ed       	ldi	r30, 0xD8	; 216
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	8f 7e       	andi	r24, 0xEF	; 239
     a48:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     a4a:	e7 ed       	ldi	r30, 0xD7	; 215
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	81 60       	ori	r24, 0x01	; 1
     a52:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     a54:	84 e0       	ldi	r24, 0x04	; 4
     a56:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 6f 01 	sts	0x016F, r24

	USB_ResetInterface();
     a5e:	b0 cf       	rjmp	.-160    	; 0x9c0 <USB_ResetInterface>

00000a60 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     a60:	e8 ed       	ldi	r30, 0xD8	; 216
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a6a:	10 92 e2 00 	sts	0x00E2, r1
     a6e:	08 95       	ret

00000a70 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     a70:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a74:	10 92 e1 00 	sts	0x00E1, r1
     a78:	08 95       	ret

00000a7a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a7a:	1f 92       	push	r1
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	0f 92       	push	r0
     a82:	11 24       	eor	r1, r1
     a84:	2f 93       	push	r18
     a86:	3f 93       	push	r19
     a88:	4f 93       	push	r20
     a8a:	5f 93       	push	r21
     a8c:	6f 93       	push	r22
     a8e:	7f 93       	push	r23
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	af 93       	push	r26
     a96:	bf 93       	push	r27
     a98:	ef 93       	push	r30
     a9a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     a9c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     aa0:	82 ff       	sbrs	r24, 2
     aa2:	0a c0       	rjmp	.+20     	; 0xab8 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     aa4:	80 91 e2 00 	lds	r24, 0x00E2
     aa8:	82 ff       	sbrs	r24, 2
     aaa:	06 c0       	rjmp	.+12     	; 0xab8 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     aac:	80 91 e1 00 	lds	r24, 0x00E1
     ab0:	8b 7f       	andi	r24, 0xFB	; 251
     ab2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ab6:	2c d2       	rcall	.+1112   	; 0xf10 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     ab8:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     abc:	80 ff       	sbrs	r24, 0
     abe:	1d c0       	rjmp	.+58     	; 0xafa <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     ac0:	80 91 d8 00 	lds	r24, 0x00D8
     ac4:	80 ff       	sbrs	r24, 0
     ac6:	19 c0       	rjmp	.+50     	; 0xafa <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     ac8:	80 91 da 00 	lds	r24, 0x00DA
     acc:	8e 7f       	andi	r24, 0xFE	; 254
     ace:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     ad2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     ad6:	80 ff       	sbrs	r24, 0
     ad8:	0c c0       	rjmp	.+24     	; 0xaf2 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ada:	80 e1       	ldi	r24, 0x10	; 16
     adc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ade:	82 e1       	ldi	r24, 0x12	; 18
     ae0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     ae2:	09 b4       	in	r0, 0x29	; 41
     ae4:	00 fe       	sbrs	r0, 0
     ae6:	fd cf       	rjmp	.-6      	; 0xae2 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	80 93 70 01 	sts	0x0170, r24
			EVENT_USB_Device_Connect();
     aee:	09 d3       	rcall	.+1554   	; 0x1102 <EVENT_USB_Device_Connect>
     af0:	04 c0       	rjmp	.+8      	; 0xafa <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     af2:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     af4:	10 92 70 01 	sts	0x0170, r1
			EVENT_USB_Device_Disconnect();
     af8:	06 d3       	rcall	.+1548   	; 0x1106 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     afa:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     afe:	80 ff       	sbrs	r24, 0
     b00:	18 c0       	rjmp	.+48     	; 0xb32 <__stack+0x33>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     b02:	80 91 e2 00 	lds	r24, 0x00E2
     b06:	80 ff       	sbrs	r24, 0
     b08:	14 c0       	rjmp	.+40     	; 0xb32 <__stack+0x33>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b0a:	80 91 e2 00 	lds	r24, 0x00E2
     b0e:	8e 7f       	andi	r24, 0xFE	; 254
     b10:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b14:	80 91 e2 00 	lds	r24, 0x00E2
     b18:	80 61       	ori	r24, 0x10	; 16
     b1a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     b1e:	80 91 d8 00 	lds	r24, 0x00D8
     b22:	80 62       	ori	r24, 0x20	; 32
     b24:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b28:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     b2a:	85 e0       	ldi	r24, 0x05	; 5
     b2c:	80 93 70 01 	sts	0x0170, r24
		EVENT_USB_Device_Suspend();
     b30:	ef d1       	rcall	.+990    	; 0xf10 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b32:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b36:	84 ff       	sbrs	r24, 4
     b38:	2f c0       	rjmp	.+94     	; 0xb98 <__stack+0x99>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b3a:	80 91 e2 00 	lds	r24, 0x00E2
     b3e:	84 ff       	sbrs	r24, 4
     b40:	2b c0       	rjmp	.+86     	; 0xb98 <__stack+0x99>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b42:	80 e1       	ldi	r24, 0x10	; 16
     b44:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b46:	82 e1       	ldi	r24, 0x12	; 18
     b48:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b4a:	09 b4       	in	r0, 0x29	; 41
     b4c:	00 fe       	sbrs	r0, 0
     b4e:	fd cf       	rjmp	.-6      	; 0xb4a <__stack+0x4b>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b50:	80 91 d8 00 	lds	r24, 0x00D8
     b54:	8f 7d       	andi	r24, 0xDF	; 223
     b56:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     b5a:	80 91 e1 00 	lds	r24, 0x00E1
     b5e:	8f 7e       	andi	r24, 0xEF	; 239
     b60:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     b64:	80 91 e2 00 	lds	r24, 0x00E2
     b68:	8f 7e       	andi	r24, 0xEF	; 239
     b6a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b6e:	80 91 e2 00 	lds	r24, 0x00E2
     b72:	81 60       	ori	r24, 0x01	; 1
     b74:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b78:	80 91 6c 01 	lds	r24, 0x016C
     b7c:	88 23       	and	r24, r24
     b7e:	11 f0       	breq	.+4      	; 0xb84 <__stack+0x85>
		  USB_DeviceState = DEVICE_STATE_Configured;
     b80:	84 e0       	ldi	r24, 0x04	; 4
     b82:	07 c0       	rjmp	.+14     	; 0xb92 <__stack+0x93>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b84:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     b88:	87 ff       	sbrs	r24, 7
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <__stack+0x91>
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <__stack+0x93>
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	80 93 70 01 	sts	0x0170, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     b96:	bc d1       	rcall	.+888    	; 0xf10 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     b98:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b9c:	83 ff       	sbrs	r24, 3
     b9e:	27 c0       	rjmp	.+78     	; 0xbee <__stack+0xef>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     ba0:	80 91 e2 00 	lds	r24, 0x00E2
     ba4:	83 ff       	sbrs	r24, 3
     ba6:	23 c0       	rjmp	.+70     	; 0xbee <__stack+0xef>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ba8:	80 91 e1 00 	lds	r24, 0x00E1
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	80 93 70 01 	sts	0x0170, r24
		USB_Device_ConfigurationNumber = 0;
     bb8:	10 92 6c 01 	sts	0x016C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     bbc:	80 91 e1 00 	lds	r24, 0x00E1
     bc0:	8e 7f       	andi	r24, 0xFE	; 254
     bc2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     bc6:	80 91 e2 00 	lds	r24, 0x00E2
     bca:	8e 7f       	andi	r24, 0xFE	; 254
     bcc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     bd0:	80 91 e2 00 	lds	r24, 0x00E2
     bd4:	80 61       	ori	r24, 0x10	; 16
     bd6:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     bda:	42 e0       	ldi	r20, 0x02	; 2
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	2c de       	rcall	.-936    	; 0x83a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     be2:	80 91 f0 00 	lds	r24, 0x00F0
     be6:	88 60       	ori	r24, 0x08	; 8
     be8:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     bec:	91 d1       	rcall	.+802    	; 0xf10 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     bee:	ff 91       	pop	r31
     bf0:	ef 91       	pop	r30
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	0f 90       	pop	r0
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	0f 90       	pop	r0
     c0c:	1f 90       	pop	r1
     c0e:	18 95       	reti

00000c10 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     c10:	1f 92       	push	r1
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
     c1a:	2f 93       	push	r18
     c1c:	3f 93       	push	r19
     c1e:	4f 93       	push	r20
     c20:	5f 93       	push	r21
     c22:	6f 93       	push	r22
     c24:	7f 93       	push	r23
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	cf 93       	push	r28
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c34:	c0 91 e9 00 	lds	r28, 0x00E9
     c38:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c3a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c3e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     c42:	80 91 f0 00 	lds	r24, 0x00F0
     c46:	87 7f       	andi	r24, 0xF7	; 247
     c48:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     c4c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     c4e:	1b d0       	rcall	.+54     	; 0xc86 <USB_Device_ProcessControlRequest>
     c50:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c54:	80 91 f0 00 	lds	r24, 0x00F0
     c58:	88 60       	ori	r24, 0x08	; 8
     c5a:	80 93 f0 00 	sts	0x00F0, r24
     c5e:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	cf 91       	pop	r28
     c68:	bf 91       	pop	r27
     c6a:	af 91       	pop	r26
     c6c:	9f 91       	pop	r25
     c6e:	8f 91       	pop	r24
     c70:	7f 91       	pop	r23
     c72:	6f 91       	pop	r22
     c74:	5f 91       	pop	r21
     c76:	4f 91       	pop	r20
     c78:	3f 91       	pop	r19
     c7a:	2f 91       	pop	r18
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	aa 97       	sbiw	r28, 0x2a	; 42
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	e1 e7       	ldi	r30, 0x71	; 113
     c9e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ca0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     ca4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     ca6:	21 e0       	ldi	r18, 0x01	; 1
     ca8:	e9 37       	cpi	r30, 0x79	; 121
     caa:	f2 07       	cpc	r31, r18
     cac:	c9 f7       	brne	.-14     	; 0xca0 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     cae:	36 d2       	rcall	.+1132   	; 0x111c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cb0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     cb4:	83 ff       	sbrs	r24, 3
     cb6:	14 c1       	rjmp	.+552    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     cb8:	20 91 71 01 	lds	r18, 0x0171

		switch (USB_ControlRequest.bRequest)
     cbc:	30 91 72 01 	lds	r19, 0x0172
     cc0:	83 2f       	mov	r24, r19
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	8a 30       	cpi	r24, 0x0A	; 10
     cc6:	91 05       	cpc	r25, r1
     cc8:	08 f0       	brcs	.+2      	; 0xccc <USB_Device_ProcessControlRequest+0x46>
     cca:	0a c1       	rjmp	.+532    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
     ccc:	fc 01       	movw	r30, r24
     cce:	ea 5a       	subi	r30, 0xAA	; 170
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	18 c3       	rjmp	.+1584   	; 0x1304 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cd4:	20 38       	cpi	r18, 0x80	; 128
     cd6:	81 f0       	breq	.+32     	; 0xcf8 <USB_Device_ProcessControlRequest+0x72>
     cd8:	22 38       	cpi	r18, 0x82	; 130
     cda:	09 f0       	breq	.+2      	; 0xcde <USB_Device_ProcessControlRequest+0x58>
     cdc:	01 c1       	rjmp	.+514    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cde:	80 91 75 01 	lds	r24, 0x0175
     ce2:	8f 70       	andi	r24, 0x0F	; 15
     ce4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ce8:	80 91 eb 00 	lds	r24, 0x00EB
     cec:	85 fb       	bst	r24, 5
     cee:	88 27       	eor	r24, r24
     cf0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cf2:	10 92 e9 00 	sts	0x00E9, r1
     cf6:	06 c0       	rjmp	.+12     	; 0xd04 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     cf8:	80 91 6d 01 	lds	r24, 0x016D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     cfc:	90 91 6e 01 	lds	r25, 0x016E
     d00:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     d02:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d04:	90 91 e8 00 	lds	r25, 0x00E8
     d08:	97 7f       	andi	r25, 0xF7	; 247
     d0a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     d0e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     d12:	10 92 f1 00 	sts	0x00F1, r1
     d16:	c1 c0       	rjmp	.+386    	; 0xe9a <USB_Device_ProcessControlRequest+0x214>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d18:	82 2f       	mov	r24, r18
     d1a:	8d 7f       	andi	r24, 0xFD	; 253
     d1c:	09 f0       	breq	.+2      	; 0xd20 <USB_Device_ProcessControlRequest+0x9a>
     d1e:	e0 c0       	rjmp	.+448    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     d20:	22 23       	and	r18, r18
     d22:	19 f0       	breq	.+6      	; 0xd2a <USB_Device_ProcessControlRequest+0xa4>
     d24:	22 30       	cpi	r18, 0x02	; 2
     d26:	61 f0       	breq	.+24     	; 0xd40 <USB_Device_ProcessControlRequest+0xba>
     d28:	db c0       	rjmp	.+438    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     d2a:	80 91 73 01 	lds	r24, 0x0173
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	09 f0       	breq	.+2      	; 0xd34 <USB_Device_ProcessControlRequest+0xae>
     d32:	d6 c0       	rjmp	.+428    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     d34:	33 30       	cpi	r19, 0x03	; 3
     d36:	09 f0       	breq	.+2      	; 0xd3a <USB_Device_ProcessControlRequest+0xb4>
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	80 93 6e 01 	sts	0x016E, r24
     d3e:	28 c0       	rjmp	.+80     	; 0xd90 <USB_Device_ProcessControlRequest+0x10a>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     d40:	80 91 73 01 	lds	r24, 0x0173
     d44:	81 11       	cpse	r24, r1
     d46:	24 c0       	rjmp	.+72     	; 0xd90 <USB_Device_ProcessControlRequest+0x10a>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     d48:	20 91 75 01 	lds	r18, 0x0175
     d4c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     d4e:	09 f4       	brne	.+2      	; 0xd52 <USB_Device_ProcessControlRequest+0xcc>
     d50:	c7 c0       	rjmp	.+398    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d52:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     d56:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     d5a:	80 ff       	sbrs	r24, 0
     d5c:	19 c0       	rjmp	.+50     	; 0xd90 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d5e:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     d62:	33 30       	cpi	r19, 0x03	; 3
     d64:	11 f4       	brne	.+4      	; 0xd6a <USB_Device_ProcessControlRequest+0xe4>
     d66:	80 62       	ori	r24, 0x20	; 32
     d68:	11 c0       	rjmp	.+34     	; 0xd8c <USB_Device_ProcessControlRequest+0x106>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     d6a:	80 61       	ori	r24, 0x10	; 16
     d6c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <USB_Device_ProcessControlRequest+0xf4>
     d78:	88 0f       	add	r24, r24
     d7a:	0a 94       	dec	r0
     d7c:	ea f7       	brpl	.-6      	; 0xd78 <USB_Device_ProcessControlRequest+0xf2>
     d7e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     d82:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     d86:	80 91 eb 00 	lds	r24, 0x00EB
     d8a:	88 60       	ori	r24, 0x08	; 8
     d8c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d90:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d94:	80 91 e8 00 	lds	r24, 0x00E8
     d98:	87 7f       	andi	r24, 0xF7	; 247
     d9a:	82 c0       	rjmp	.+260    	; 0xea0 <USB_Device_ProcessControlRequest+0x21a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d9c:	21 11       	cpse	r18, r1
     d9e:	a0 c0       	rjmp	.+320    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     da0:	10 91 73 01 	lds	r17, 0x0173
     da4:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     da6:	80 91 e3 00 	lds	r24, 0x00E3
     daa:	80 78       	andi	r24, 0x80	; 128
     dac:	81 2b       	or	r24, r17
     dae:	80 93 e3 00 	sts	0x00E3, r24
     db2:	80 91 e8 00 	lds	r24, 0x00E8
     db6:	87 7f       	andi	r24, 0xF7	; 247
     db8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     dbc:	b0 dd       	rcall	.-1184   	; 0x91e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dbe:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     dc2:	80 ff       	sbrs	r24, 0
     dc4:	fc cf       	rjmp	.-8      	; 0xdbe <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     dc6:	80 91 e3 00 	lds	r24, 0x00E3
     dca:	80 68       	ori	r24, 0x80	; 128
     dcc:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     dd0:	11 23       	and	r17, r17
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <USB_Device_ProcessControlRequest+0x152>
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <USB_Device_ProcessControlRequest+0x154>
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	80 93 70 01 	sts	0x0170, r24
     dde:	80 c0       	rjmp	.+256    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     de0:	20 58       	subi	r18, 0x80	; 128
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	08 f0       	brcs	.+2      	; 0xde8 <USB_Device_ProcessControlRequest+0x162>
     de6:	7c c0       	rjmp	.+248    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     de8:	80 91 73 01 	lds	r24, 0x0173
     dec:	90 91 74 01 	lds	r25, 0x0174
     df0:	8c 3d       	cpi	r24, 0xDC	; 220
     df2:	23 e0       	ldi	r18, 0x03	; 3
     df4:	92 07       	cpc	r25, r18
     df6:	71 f5       	brne	.+92     	; 0xe54 <USB_Device_ProcessControlRequest+0x1ce>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     dfc:	8a e2       	ldi	r24, 0x2A	; 42
     dfe:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e00:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e02:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     e04:	de 01       	movw	r26, r28
     e06:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e08:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     e0a:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e0c:	51 e2       	ldi	r21, 0x21	; 33
     e0e:	e3 2f       	mov	r30, r19
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	50 93 57 00 	sts	0x0057, r21
     e16:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     e18:	20 ff       	sbrs	r18, 0
     e1a:	03 c0       	rjmp	.+6      	; 0xe22 <USB_Device_ProcessControlRequest+0x19c>
					{
						SerialByte >>= 4;
     e1c:	e2 95       	swap	r30
     e1e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     e20:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     e22:	ef 70       	andi	r30, 0x0F	; 15
     e24:	8e 2f       	mov	r24, r30
     e26:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     e28:	ea 30       	cpi	r30, 0x0A	; 10
     e2a:	10 f0       	brcs	.+4      	; 0xe30 <USB_Device_ProcessControlRequest+0x1aa>
     e2c:	c7 96       	adiw	r24, 0x37	; 55
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <USB_Device_ProcessControlRequest+0x1ac>
     e30:	c0 96       	adiw	r24, 0x30	; 48
     e32:	8d 93       	st	X+, r24
     e34:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e36:	2f 5f       	subi	r18, 0xFF	; 255
     e38:	24 31       	cpi	r18, 0x14	; 20
     e3a:	49 f7       	brne	.-46     	; 0xe0e <USB_Device_ProcessControlRequest+0x188>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e3c:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e3e:	80 91 e8 00 	lds	r24, 0x00E8
     e42:	87 7f       	andi	r24, 0xF7	; 247
     e44:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     e48:	6a e2       	ldi	r22, 0x2A	; 42
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	3b dc       	rcall	.-1930   	; 0x6c8 <Endpoint_Write_Control_Stream_LE>
     e52:	12 c0       	rjmp	.+36     	; 0xe78 <USB_Device_ProcessControlRequest+0x1f2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     e54:	ae 01       	movw	r20, r28
     e56:	4f 5f       	subi	r20, 0xFF	; 255
     e58:	5f 4f       	sbci	r21, 0xFF	; 255
     e5a:	60 91 75 01 	lds	r22, 0x0175
     e5e:	93 d9       	rcall	.-3290   	; 0x186 <CALLBACK_USB_GetDescriptor>
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	09 f4       	brne	.+2      	; 0xe66 <USB_Device_ProcessControlRequest+0x1e0>
     e64:	3d c0       	rjmp	.+122    	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
     e66:	20 91 e8 00 	lds	r18, 0x00E8
     e6a:	27 7f       	andi	r18, 0xF7	; 247
     e6c:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     e70:	bc 01       	movw	r22, r24
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	83 dc       	rcall	.-1786   	; 0x77e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e78:	80 91 e8 00 	lds	r24, 0x00E8
     e7c:	8b 77       	andi	r24, 0x7B	; 123
     e7e:	80 93 e8 00 	sts	0x00E8, r24
     e82:	2e c0       	rjmp	.+92     	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     e84:	20 38       	cpi	r18, 0x80	; 128
     e86:	61 f5       	brne	.+88     	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e88:	80 91 e8 00 	lds	r24, 0x00E8
     e8c:	87 7f       	andi	r24, 0xF7	; 247
     e8e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     e92:	80 91 6c 01 	lds	r24, 0x016C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e96:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e9a:	80 91 e8 00 	lds	r24, 0x00E8
     e9e:	8e 77       	andi	r24, 0x7E	; 126
     ea0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     ea4:	3c dd       	rcall	.-1416   	; 0x91e <Endpoint_ClearStatusStage>
     ea6:	1c c0       	rjmp	.+56     	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ea8:	21 11       	cpse	r18, r1
     eaa:	1a c0       	rjmp	.+52     	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     eac:	90 91 73 01 	lds	r25, 0x0173
     eb0:	92 30       	cpi	r25, 0x02	; 2
     eb2:	b0 f4       	brcc	.+44     	; 0xee0 <USB_Device_ProcessControlRequest+0x25a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eb4:	80 91 e8 00 	lds	r24, 0x00E8
     eb8:	87 7f       	andi	r24, 0xF7	; 247
     eba:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     ebe:	90 93 6c 01 	sts	0x016C, r25

	Endpoint_ClearStatusStage();
     ec2:	2d dd       	rcall	.-1446   	; 0x91e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     ec4:	80 91 6c 01 	lds	r24, 0x016C
     ec8:	81 11       	cpse	r24, r1
     eca:	04 c0       	rjmp	.+8      	; 0xed4 <USB_Device_ProcessControlRequest+0x24e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ecc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ed0:	87 ff       	sbrs	r24, 7
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <USB_Device_ProcessControlRequest+0x252>
     ed4:	84 e0       	ldi	r24, 0x04	; 4
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <USB_Device_ProcessControlRequest+0x254>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 70 01 	sts	0x0170, r24

	EVENT_USB_Device_ConfigurationChanged();
     ede:	15 d1       	rcall	.+554    	; 0x110a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ee0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     ee4:	83 ff       	sbrs	r24, 3
     ee6:	0a c0       	rjmp	.+20     	; 0xefc <USB_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ee8:	80 91 e8 00 	lds	r24, 0x00E8
     eec:	87 7f       	andi	r24, 0xF7	; 247
     eee:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ef2:	80 91 eb 00 	lds	r24, 0x00EB
     ef6:	80 62       	ori	r24, 0x20	; 32
     ef8:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     efc:	aa 96       	adiw	r28, 0x2a	; 42
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	08 95       	ret

00000f10 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     f10:	08 95       	ret

00000f12 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     f12:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     f14:	80 91 70 01 	lds	r24, 0x0170
     f18:	88 23       	and	r24, r24
     f1a:	a9 f0       	breq	.+42     	; 0xf46 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f1c:	80 91 e9 00 	lds	r24, 0x00E9
     f20:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f22:	90 91 ec 00 	lds	r25, 0x00EC
     f26:	90 ff       	sbrs	r25, 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <USB_USBTask+0x1c>
     f2a:	90 e8       	ldi	r25, 0x80	; 128
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <USB_USBTask+0x1e>
     f2e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f30:	c9 2f       	mov	r28, r25
     f32:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f34:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f38:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     f3c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     f3e:	a3 de       	rcall	.-698    	; 0xc86 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f40:	cf 70       	andi	r28, 0x0F	; 15
     f42:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <LEDs_SetAllLEDs>:
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     f4a:	25 b1       	in	r18, 0x05	; 5
     f4c:	98 2f       	mov	r25, r24
     f4e:	91 70       	andi	r25, 0x01	; 1
     f50:	90 95       	com	r25
     f52:	21 60       	ori	r18, 0x01	; 1
     f54:	92 23       	and	r25, r18
     f56:	95 b9       	out	0x05, r25	; 5
     f58:	2b b1       	in	r18, 0x0b	; 11
     f5a:	98 2f       	mov	r25, r24
     f5c:	90 72       	andi	r25, 0x20	; 32
     f5e:	90 95       	com	r25
     f60:	20 62       	ori	r18, 0x20	; 32
     f62:	92 23       	and	r25, r18
     f64:	9b b9       	out	0x0b, r25	; 11
     f66:	98 b1       	in	r25, 0x08	; 8
     f68:	80 78       	andi	r24, 0x80	; 128
     f6a:	9f 77       	andi	r25, 0x7F	; 127
     f6c:	89 2b       	or	r24, r25
     f6e:	88 b9       	out	0x08, r24	; 8
     f70:	08 95       	ret

00000f72 <SetupHardware>:
     f72:	84 b7       	in	r24, 0x34	; 52
     f74:	87 7f       	andi	r24, 0xF7	; 247
     f76:	84 bf       	out	0x34, r24	; 52
     f78:	88 e1       	ldi	r24, 0x18	; 24
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	80 93 60 00 	sts	0x0060, r24
     f82:	10 92 60 00 	sts	0x0060, r1
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	80 93 61 00 	sts	0x0061, r24
     f94:	90 93 61 00 	sts	0x0061, r25
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	20 9a       	sbi	0x04, 0	; 4
     f9c:	28 9a       	sbi	0x05, 0	; 5
     f9e:	55 9a       	sbi	0x0a, 5	; 10
     fa0:	5d 9a       	sbi	0x0b, 5	; 11
     fa2:	3f 9a       	sbi	0x07, 7	; 7
     fa4:	47 98       	cbi	0x08, 7	; 8
     fa6:	4c dd       	rcall	.-1384   	; 0xa40 <USB_Init>
     fa8:	8b d9       	rcall	.-3306   	; 0x2c0 <lcd_init>
     faa:	2f ef       	ldi	r18, 0xFF	; 255
     fac:	81 ee       	ldi	r24, 0xE1	; 225
     fae:	94 e0       	ldi	r25, 0x04	; 4
     fb0:	21 50       	subi	r18, 0x01	; 1
     fb2:	80 40       	sbci	r24, 0x00	; 0
     fb4:	90 40       	sbci	r25, 0x00	; 0
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <SetupHardware+0x3e>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <SetupHardware+0x48>
     fba:	00 00       	nop
     fbc:	72 d9       	rcall	.-3356   	; 0x2a2 <lcd_clrscr>
     fbe:	8b e1       	ldi	r24, 0x1B	; 27
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	73 d9       	rcall	.-3354   	; 0x2aa <lcd_puts>
     fc4:	3e 9a       	sbi	0x07, 6	; 7
     fc6:	46 9a       	sbi	0x08, 6	; 8
     fc8:	80 9a       	sbi	0x10, 0	; 16
     fca:	80 b3       	in	r24, 0x10	; 16
     fcc:	10 ba       	out	0x10, r1	; 16
     fce:	81 b3       	in	r24, 0x11	; 17
     fd0:	11 ba       	out	0x11, r1	; 17
     fd2:	08 95       	ret

00000fd4 <Read_DualSlope>:
{
	#define t1	80
	//Step1 
	//PINs_SetAll(PINS_In_Switch); 
	
	PORTF &= !(1<<0);
     fd4:	81 b3       	in	r24, 0x11	; 17
     fd6:	11 ba       	out	0x11, r1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd8:	2f ef       	ldi	r18, 0xFF	; 255
     fda:	87 ee       	ldi	r24, 0xE7	; 231
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	21 50       	subi	r18, 0x01	; 1
     fe0:	80 40       	sbci	r24, 0x00	; 0
     fe2:	90 40       	sbci	r25, 0x00	; 0
     fe4:	e1 f7       	brne	.-8      	; 0xfde <Read_DualSlope+0xa>
     fe6:	00 c0       	rjmp	.+0      	; 0xfe8 <Read_DualSlope+0x14>
     fe8:	00 00       	nop
	_delay_ms(t1); // wait 80mS
	PORTF |= 1<<0;
     fea:	88 9a       	sbi	0x11, 0	; 17
	//Step2
	
	
	//PINs_SetAll(PINS_Ref_Switch); // integrate and wait for zero crossing
	PORTF |= 1<<1;
     fec:	89 9a       	sbi	0x11, 1	; 17
	uint8_t t2 = 0;
	uint8_t temp;
	temp = DDRD;
     fee:	9a b1       	in	r25, 0x0a	; 10
	DDRD &= !(1<<2); // input
     ff0:	8a b1       	in	r24, 0x0a	; 10
     ff2:	1a b8       	out	0x0a, r1	; 10
	//Step2
	
	
	//PINs_SetAll(PINS_Ref_Switch); // integrate and wait for zero crossing
	PORTF |= 1<<1;
	uint8_t t2 = 0;
     ff4:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t temp;
	temp = DDRD;
	DDRD &= !(1<<2); // input
	
	while(!(PIND & (1<<2))){ // pin4 is low
     ff6:	4a 99       	sbic	0x09, 2	; 9
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <Read_DualSlope+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ffa:	ef ec       	ldi	r30, 0xCF	; 207
     ffc:	f7 e0       	ldi	r31, 0x07	; 7
     ffe:	31 97       	sbiw	r30, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <Read_DualSlope+0x2a>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <Read_DualSlope+0x30>
    1004:	00 00       	nop
		_delay_us(500);
		t2++;
    1006:	8f 5f       	subi	r24, 0xFF	; 255
		if (t2==255) break;
    1008:	8f 3f       	cpi	r24, 0xFF	; 255
    100a:	a9 f7       	brne	.-22     	; 0xff6 <Read_DualSlope+0x22>
	}
	DDRD = temp;
    100c:	9a b9       	out	0x0a, r25	; 10
	PORTF &= !(1<<1);
    100e:	91 b3       	in	r25, 0x11	; 17
    1010:	11 ba       	out	0x11, r1	; 17
	PORTF |= 1<<0;
    1012:	88 9a       	sbi	0x11, 0	; 17
	return t2;
	
	//Step4
	//Step5
	
}
    1014:	08 95       	ret

00001016 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	2a 97       	sbiw	r28, 0x0a	; 10
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
    102a:	a3 df       	rcall	.-186    	; 0xf72 <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    102c:	6e e5       	ldi	r22, 0x5E	; 94
    102e:	71 e0       	ldi	r23, 0x01	; 1
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	85 da       	rcall	.-2806   	; 0x540 <CDC_Device_CreateStream>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	88 df       	rcall	.-240    	; 0xf4a <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    103a:	78 94       	sei
	GlobalInterruptEnable();
	fputs("Welcome to Our Dual Slope Controller! \r\n", &USBSerialStream);
    103c:	6e e5       	ldi	r22, 0x5E	; 94
    103e:	71 e0       	ldi	r23, 0x01	; 1
    1040:	88 e2       	ldi	r24, 0x28	; 40
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	92 d1       	rcall	.+804    	; 0x136a <fputs>
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
    1046:	99 24       	eor	r9, r9
    1048:	93 94       	inc	r9
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
    104a:	80 e2       	ldi	r24, 0x20	; 32
    104c:	a8 2e       	mov	r10, r24
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
    104e:	90 e8       	ldi	r25, 0x80	; 128
    1050:	b9 2e       	mov	r11, r25
		time++;
		_delay_ms(250);
		lcd_clrscr();
		lcd_puts("Hi ");
		char buffer[10];
		itoa(time,buffer,10);
    1052:	8e 01       	movw	r16, r28
    1054:	0f 5f       	subi	r16, 0xFF	; 255
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_puts(buffer);
		lcd_goto(0x40); // second line
		result = Read_DualSlope();
		double result1 = result * 4.6875; // convert result to mV
		sprintf(buffer,"%f",result1); 
    1058:	25 e5       	ldi	r18, 0x55	; 85
    105a:	e2 2e       	mov	r14, r18
    105c:	21 e0       	ldi	r18, 0x01	; 1
    105e:	f2 2e       	mov	r15, r18
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
    1060:	93 b8       	out	0x03, r9	; 3
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
    1062:	a9 b8       	out	0x09, r10	; 9
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
    1064:	b6 b8       	out	0x06, r11	; 6
	uint16_t time; 
	for (;;)
	{
		//CheckJoystickMovement();
		LEDs_ToggleLEDs(LEDS_LED1|LEDS_LED2|LEDS_LED3);
		time++;
    1066:	2f ef       	ldi	r18, 0xFF	; 255
    1068:	c2 1a       	sub	r12, r18
    106a:	d2 0a       	sbc	r13, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	94 e3       	ldi	r25, 0x34	; 52
    1070:	2c e0       	ldi	r18, 0x0C	; 12
    1072:	81 50       	subi	r24, 0x01	; 1
    1074:	90 40       	sbci	r25, 0x00	; 0
    1076:	20 40       	sbci	r18, 0x00	; 0
    1078:	e1 f7       	brne	.-8      	; 0x1072 <main+0x5c>
    107a:	00 c0       	rjmp	.+0      	; 0x107c <main+0x66>
    107c:	00 00       	nop
		_delay_ms(250);
		lcd_clrscr();
    107e:	11 d9       	rcall	.-3550   	; 0x2a2 <lcd_clrscr>
		lcd_puts("Hi ");
    1080:	81 e5       	ldi	r24, 0x51	; 81
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	12 d9       	rcall	.-3548   	; 0x2aa <lcd_puts>
		char buffer[10];
		itoa(time,buffer,10);
    1086:	4a e0       	ldi	r20, 0x0A	; 10
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	b8 01       	movw	r22, r16
    108c:	c6 01       	movw	r24, r12
    108e:	40 d1       	rcall	.+640    	; 0x1310 <itoa>
		lcd_puts(buffer);
    1090:	c8 01       	movw	r24, r16
    1092:	0b d9       	rcall	.-3562   	; 0x2aa <lcd_puts>
		lcd_goto(0x40); // second line
    1094:	80 e4       	ldi	r24, 0x40	; 64
    1096:	03 d9       	rcall	.-3578   	; 0x29e <lcd_goto>
		result = Read_DualSlope();
    1098:	9d df       	rcall	.-198    	; 0xfd4 <Read_DualSlope>
    109a:	80 93 79 01 	sts	0x0179, r24
		double result1 = result * 4.6875; // convert result to mV
    109e:	68 2f       	mov	r22, r24
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	3f d0       	rcall	.+126    	; 0x1126 <__floatsisf>
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	46 e9       	ldi	r20, 0x96	; 150
    10ae:	50 e4       	ldi	r21, 0x40	; 64
    10b0:	75 d0       	rcall	.+234    	; 0x119c <__mulsf3>
		sprintf(buffer,"%f",result1); 
    10b2:	9f 93       	push	r25
    10b4:	8f 93       	push	r24
    10b6:	7f 93       	push	r23
    10b8:	6f 93       	push	r22
    10ba:	ff 92       	push	r15
    10bc:	ef 92       	push	r14
    10be:	1f 93       	push	r17
    10c0:	0f 93       	push	r16
    10c2:	7b d1       	rcall	.+758    	; 0x13ba <sprintf>
		fputs(buffer, &USBSerialStream);
    10c4:	6e e5       	ldi	r22, 0x5E	; 94
    10c6:	71 e0       	ldi	r23, 0x01	; 1
    10c8:	c8 01       	movw	r24, r16
    10ca:	4f d1       	rcall	.+670    	; 0x136a <fputs>
		fputs("mV \r\n", &USBSerialStream);
    10cc:	6e e5       	ldi	r22, 0x5E	; 94
    10ce:	71 e0       	ldi	r23, 0x01	; 1
    10d0:	88 e5       	ldi	r24, 0x58	; 88
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	4a d1       	rcall	.+660    	; 0x136a <fputs>
		itoa(result,buffer, 10);
    10d6:	80 91 79 01 	lds	r24, 0x0179
    10da:	4a e0       	ldi	r20, 0x0A	; 10
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	b8 01       	movw	r22, r16
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	16 d1       	rcall	.+556    	; 0x1310 <itoa>
		lcd_puts(buffer);
    10e4:	c8 01       	movw	r24, r16
    10e6:	e1 d8       	rcall	.-3646   	; 0x2aa <lcd_puts>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	eb d9       	rcall	.-3114   	; 0x4c4 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	d2 d9       	rcall	.-3164   	; 0x498 <CDC_Device_USBTask>
		USB_USBTask();
    10f4:	0e df       	rcall	.-484    	; 0xf12 <USB_USBTask>
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	af cf       	rjmp	.-162    	; 0x1060 <main+0x4a>

00001102 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
    1102:	80 ea       	ldi	r24, 0xA0	; 160
    1104:	22 cf       	rjmp	.-444    	; 0xf4a <LEDs_SetAllLEDs>

00001106 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	20 cf       	rjmp	.-448    	; 0xf4a <LEDs_SetAllLEDs>

0000110a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	3a d9       	rcall	.-3468   	; 0x384 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    1110:	88 23       	and	r24, r24
    1112:	11 f0       	breq	.+4      	; 0x1118 <EVENT_USB_Device_ConfigurationChanged+0xe>
    1114:	80 e2       	ldi	r24, 0x20	; 32
    1116:	01 c0       	rjmp	.+2      	; 0x111a <EVENT_USB_Device_ConfigurationChanged+0x10>
    1118:	81 e8       	ldi	r24, 0x81	; 129
    111a:	17 cf       	rjmp	.-466    	; 0xf4a <LEDs_SetAllLEDs>

0000111c <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	23 ca       	rjmp	.-3002   	; 0x568 <CDC_Device_ProcessControlRequest>

00001122 <__floatunsisf>:
    1122:	e8 94       	clt
    1124:	09 c0       	rjmp	.+18     	; 0x1138 <__floatsisf+0x12>

00001126 <__floatsisf>:
    1126:	97 fb       	bst	r25, 7
    1128:	3e f4       	brtc	.+14     	; 0x1138 <__floatsisf+0x12>
    112a:	90 95       	com	r25
    112c:	80 95       	com	r24
    112e:	70 95       	com	r23
    1130:	61 95       	neg	r22
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	99 23       	and	r25, r25
    113a:	a9 f0       	breq	.+42     	; 0x1166 <__floatsisf+0x40>
    113c:	f9 2f       	mov	r31, r25
    113e:	96 e9       	ldi	r25, 0x96	; 150
    1140:	bb 27       	eor	r27, r27
    1142:	93 95       	inc	r25
    1144:	f6 95       	lsr	r31
    1146:	87 95       	ror	r24
    1148:	77 95       	ror	r23
    114a:	67 95       	ror	r22
    114c:	b7 95       	ror	r27
    114e:	f1 11       	cpse	r31, r1
    1150:	f8 cf       	rjmp	.-16     	; 0x1142 <__floatsisf+0x1c>
    1152:	fa f4       	brpl	.+62     	; 0x1192 <__floatsisf+0x6c>
    1154:	bb 0f       	add	r27, r27
    1156:	11 f4       	brne	.+4      	; 0x115c <__floatsisf+0x36>
    1158:	60 ff       	sbrs	r22, 0
    115a:	1b c0       	rjmp	.+54     	; 0x1192 <__floatsisf+0x6c>
    115c:	6f 5f       	subi	r22, 0xFF	; 255
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	8f 4f       	sbci	r24, 0xFF	; 255
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <__floatsisf+0x6c>
    1166:	88 23       	and	r24, r24
    1168:	11 f0       	breq	.+4      	; 0x116e <__floatsisf+0x48>
    116a:	96 e9       	ldi	r25, 0x96	; 150
    116c:	11 c0       	rjmp	.+34     	; 0x1190 <__floatsisf+0x6a>
    116e:	77 23       	and	r23, r23
    1170:	21 f0       	breq	.+8      	; 0x117a <__floatsisf+0x54>
    1172:	9e e8       	ldi	r25, 0x8E	; 142
    1174:	87 2f       	mov	r24, r23
    1176:	76 2f       	mov	r23, r22
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <__floatsisf+0x5e>
    117a:	66 23       	and	r22, r22
    117c:	71 f0       	breq	.+28     	; 0x119a <__floatsisf+0x74>
    117e:	96 e8       	ldi	r25, 0x86	; 134
    1180:	86 2f       	mov	r24, r22
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	2a f0       	brmi	.+10     	; 0x1192 <__floatsisf+0x6c>
    1188:	9a 95       	dec	r25
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	da f7       	brpl	.-10     	; 0x1188 <__floatsisf+0x62>
    1192:	88 0f       	add	r24, r24
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	97 f9       	bld	r25, 7
    119a:	08 95       	ret

0000119c <__mulsf3>:
    119c:	0b d0       	rcall	.+22     	; 0x11b4 <__mulsf3x>
    119e:	78 c0       	rjmp	.+240    	; 0x1290 <__fp_round>
    11a0:	69 d0       	rcall	.+210    	; 0x1274 <__fp_pscA>
    11a2:	28 f0       	brcs	.+10     	; 0x11ae <__mulsf3+0x12>
    11a4:	6e d0       	rcall	.+220    	; 0x1282 <__fp_pscB>
    11a6:	18 f0       	brcs	.+6      	; 0x11ae <__mulsf3+0x12>
    11a8:	95 23       	and	r25, r21
    11aa:	09 f0       	breq	.+2      	; 0x11ae <__mulsf3+0x12>
    11ac:	5a c0       	rjmp	.+180    	; 0x1262 <__fp_inf>
    11ae:	5f c0       	rjmp	.+190    	; 0x126e <__fp_nan>
    11b0:	11 24       	eor	r1, r1
    11b2:	a2 c0       	rjmp	.+324    	; 0x12f8 <__fp_szero>

000011b4 <__mulsf3x>:
    11b4:	7e d0       	rcall	.+252    	; 0x12b2 <__fp_split3>
    11b6:	a0 f3       	brcs	.-24     	; 0x11a0 <__mulsf3+0x4>

000011b8 <__mulsf3_pse>:
    11b8:	95 9f       	mul	r25, r21
    11ba:	d1 f3       	breq	.-12     	; 0x11b0 <__mulsf3+0x14>
    11bc:	95 0f       	add	r25, r21
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	55 1f       	adc	r21, r21
    11c2:	62 9f       	mul	r22, r18
    11c4:	f0 01       	movw	r30, r0
    11c6:	72 9f       	mul	r23, r18
    11c8:	bb 27       	eor	r27, r27
    11ca:	f0 0d       	add	r31, r0
    11cc:	b1 1d       	adc	r27, r1
    11ce:	63 9f       	mul	r22, r19
    11d0:	aa 27       	eor	r26, r26
    11d2:	f0 0d       	add	r31, r0
    11d4:	b1 1d       	adc	r27, r1
    11d6:	aa 1f       	adc	r26, r26
    11d8:	64 9f       	mul	r22, r20
    11da:	66 27       	eor	r22, r22
    11dc:	b0 0d       	add	r27, r0
    11de:	a1 1d       	adc	r26, r1
    11e0:	66 1f       	adc	r22, r22
    11e2:	82 9f       	mul	r24, r18
    11e4:	22 27       	eor	r18, r18
    11e6:	b0 0d       	add	r27, r0
    11e8:	a1 1d       	adc	r26, r1
    11ea:	62 1f       	adc	r22, r18
    11ec:	73 9f       	mul	r23, r19
    11ee:	b0 0d       	add	r27, r0
    11f0:	a1 1d       	adc	r26, r1
    11f2:	62 1f       	adc	r22, r18
    11f4:	83 9f       	mul	r24, r19
    11f6:	a0 0d       	add	r26, r0
    11f8:	61 1d       	adc	r22, r1
    11fa:	22 1f       	adc	r18, r18
    11fc:	74 9f       	mul	r23, r20
    11fe:	33 27       	eor	r19, r19
    1200:	a0 0d       	add	r26, r0
    1202:	61 1d       	adc	r22, r1
    1204:	23 1f       	adc	r18, r19
    1206:	84 9f       	mul	r24, r20
    1208:	60 0d       	add	r22, r0
    120a:	21 1d       	adc	r18, r1
    120c:	82 2f       	mov	r24, r18
    120e:	76 2f       	mov	r23, r22
    1210:	6a 2f       	mov	r22, r26
    1212:	11 24       	eor	r1, r1
    1214:	9f 57       	subi	r25, 0x7F	; 127
    1216:	50 40       	sbci	r21, 0x00	; 0
    1218:	8a f0       	brmi	.+34     	; 0x123c <__mulsf3_pse+0x84>
    121a:	e1 f0       	breq	.+56     	; 0x1254 <__mulsf3_pse+0x9c>
    121c:	88 23       	and	r24, r24
    121e:	4a f0       	brmi	.+18     	; 0x1232 <__mulsf3_pse+0x7a>
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	bb 1f       	adc	r27, r27
    1226:	66 1f       	adc	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	88 1f       	adc	r24, r24
    122c:	91 50       	subi	r25, 0x01	; 1
    122e:	50 40       	sbci	r21, 0x00	; 0
    1230:	a9 f7       	brne	.-22     	; 0x121c <__mulsf3_pse+0x64>
    1232:	9e 3f       	cpi	r25, 0xFE	; 254
    1234:	51 05       	cpc	r21, r1
    1236:	70 f0       	brcs	.+28     	; 0x1254 <__mulsf3_pse+0x9c>
    1238:	14 c0       	rjmp	.+40     	; 0x1262 <__fp_inf>
    123a:	5e c0       	rjmp	.+188    	; 0x12f8 <__fp_szero>
    123c:	5f 3f       	cpi	r21, 0xFF	; 255
    123e:	ec f3       	brlt	.-6      	; 0x123a <__mulsf3_pse+0x82>
    1240:	98 3e       	cpi	r25, 0xE8	; 232
    1242:	dc f3       	brlt	.-10     	; 0x123a <__mulsf3_pse+0x82>
    1244:	86 95       	lsr	r24
    1246:	77 95       	ror	r23
    1248:	67 95       	ror	r22
    124a:	b7 95       	ror	r27
    124c:	f7 95       	ror	r31
    124e:	e7 95       	ror	r30
    1250:	9f 5f       	subi	r25, 0xFF	; 255
    1252:	c1 f7       	brne	.-16     	; 0x1244 <__mulsf3_pse+0x8c>
    1254:	fe 2b       	or	r31, r30
    1256:	88 0f       	add	r24, r24
    1258:	91 1d       	adc	r25, r1
    125a:	96 95       	lsr	r25
    125c:	87 95       	ror	r24
    125e:	97 f9       	bld	r25, 7
    1260:	08 95       	ret

00001262 <__fp_inf>:
    1262:	97 f9       	bld	r25, 7
    1264:	9f 67       	ori	r25, 0x7F	; 127
    1266:	80 e8       	ldi	r24, 0x80	; 128
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	08 95       	ret

0000126e <__fp_nan>:
    126e:	9f ef       	ldi	r25, 0xFF	; 255
    1270:	80 ec       	ldi	r24, 0xC0	; 192
    1272:	08 95       	ret

00001274 <__fp_pscA>:
    1274:	00 24       	eor	r0, r0
    1276:	0a 94       	dec	r0
    1278:	16 16       	cp	r1, r22
    127a:	17 06       	cpc	r1, r23
    127c:	18 06       	cpc	r1, r24
    127e:	09 06       	cpc	r0, r25
    1280:	08 95       	ret

00001282 <__fp_pscB>:
    1282:	00 24       	eor	r0, r0
    1284:	0a 94       	dec	r0
    1286:	12 16       	cp	r1, r18
    1288:	13 06       	cpc	r1, r19
    128a:	14 06       	cpc	r1, r20
    128c:	05 06       	cpc	r0, r21
    128e:	08 95       	ret

00001290 <__fp_round>:
    1290:	09 2e       	mov	r0, r25
    1292:	03 94       	inc	r0
    1294:	00 0c       	add	r0, r0
    1296:	11 f4       	brne	.+4      	; 0x129c <__fp_round+0xc>
    1298:	88 23       	and	r24, r24
    129a:	52 f0       	brmi	.+20     	; 0x12b0 <__fp_round+0x20>
    129c:	bb 0f       	add	r27, r27
    129e:	40 f4       	brcc	.+16     	; 0x12b0 <__fp_round+0x20>
    12a0:	bf 2b       	or	r27, r31
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <__fp_round+0x18>
    12a4:	60 ff       	sbrs	r22, 0
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <__fp_round+0x20>
    12a8:	6f 5f       	subi	r22, 0xFF	; 255
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	8f 4f       	sbci	r24, 0xFF	; 255
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	08 95       	ret

000012b2 <__fp_split3>:
    12b2:	57 fd       	sbrc	r21, 7
    12b4:	90 58       	subi	r25, 0x80	; 128
    12b6:	44 0f       	add	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	59 f0       	breq	.+22     	; 0x12d2 <__fp_splitA+0x10>
    12bc:	5f 3f       	cpi	r21, 0xFF	; 255
    12be:	71 f0       	breq	.+28     	; 0x12dc <__fp_splitA+0x1a>
    12c0:	47 95       	ror	r20

000012c2 <__fp_splitA>:
    12c2:	88 0f       	add	r24, r24
    12c4:	97 fb       	bst	r25, 7
    12c6:	99 1f       	adc	r25, r25
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <__fp_splitA+0x20>
    12ca:	9f 3f       	cpi	r25, 0xFF	; 255
    12cc:	79 f0       	breq	.+30     	; 0x12ec <__fp_splitA+0x2a>
    12ce:	87 95       	ror	r24
    12d0:	08 95       	ret
    12d2:	12 16       	cp	r1, r18
    12d4:	13 06       	cpc	r1, r19
    12d6:	14 06       	cpc	r1, r20
    12d8:	55 1f       	adc	r21, r21
    12da:	f2 cf       	rjmp	.-28     	; 0x12c0 <__fp_split3+0xe>
    12dc:	46 95       	lsr	r20
    12de:	f1 df       	rcall	.-30     	; 0x12c2 <__fp_splitA>
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <__fp_splitA+0x30>
    12e2:	16 16       	cp	r1, r22
    12e4:	17 06       	cpc	r1, r23
    12e6:	18 06       	cpc	r1, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	f1 cf       	rjmp	.-30     	; 0x12ce <__fp_splitA+0xc>
    12ec:	86 95       	lsr	r24
    12ee:	71 05       	cpc	r23, r1
    12f0:	61 05       	cpc	r22, r1
    12f2:	08 94       	sec
    12f4:	08 95       	ret

000012f6 <__fp_zero>:
    12f6:	e8 94       	clt

000012f8 <__fp_szero>:
    12f8:	bb 27       	eor	r27, r27
    12fa:	66 27       	eor	r22, r22
    12fc:	77 27       	eor	r23, r23
    12fe:	cb 01       	movw	r24, r22
    1300:	97 f9       	bld	r25, 7
    1302:	08 95       	ret

00001304 <__tablejump2__>:
    1304:	ee 0f       	add	r30, r30
    1306:	ff 1f       	adc	r31, r31

00001308 <__tablejump__>:
    1308:	05 90       	lpm	r0, Z+
    130a:	f4 91       	lpm	r31, Z
    130c:	e0 2d       	mov	r30, r0
    130e:	09 94       	ijmp

00001310 <itoa>:
    1310:	45 32       	cpi	r20, 0x25	; 37
    1312:	51 05       	cpc	r21, r1
    1314:	18 f4       	brcc	.+6      	; 0x131c <itoa+0xc>
    1316:	42 30       	cpi	r20, 0x02	; 2
    1318:	08 f0       	brcs	.+2      	; 0x131c <itoa+0xc>
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <__itoa_ncheck>
    131c:	fb 01       	movw	r30, r22
    131e:	10 82       	st	Z, r1
    1320:	cb 01       	movw	r24, r22
    1322:	08 95       	ret

00001324 <__itoa_ncheck>:
    1324:	bb 27       	eor	r27, r27
    1326:	4a 30       	cpi	r20, 0x0A	; 10
    1328:	31 f4       	brne	.+12     	; 0x1336 <__itoa_ncheck+0x12>
    132a:	99 23       	and	r25, r25
    132c:	22 f4       	brpl	.+8      	; 0x1336 <__itoa_ncheck+0x12>
    132e:	bd e2       	ldi	r27, 0x2D	; 45
    1330:	90 95       	com	r25
    1332:	81 95       	neg	r24
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	01 c0       	rjmp	.+2      	; 0x133a <__utoa_common>

00001338 <__utoa_ncheck>:
    1338:	bb 27       	eor	r27, r27

0000133a <__utoa_common>:
    133a:	fb 01       	movw	r30, r22
    133c:	55 27       	eor	r21, r21
    133e:	aa 27       	eor	r26, r26
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	aa 1f       	adc	r26, r26
    1346:	a4 17       	cp	r26, r20
    1348:	10 f0       	brcs	.+4      	; 0x134e <__utoa_common+0x14>
    134a:	a4 1b       	sub	r26, r20
    134c:	83 95       	inc	r24
    134e:	50 51       	subi	r21, 0x10	; 16
    1350:	b9 f7       	brne	.-18     	; 0x1340 <__utoa_common+0x6>
    1352:	a0 5d       	subi	r26, 0xD0	; 208
    1354:	aa 33       	cpi	r26, 0x3A	; 58
    1356:	08 f0       	brcs	.+2      	; 0x135a <__utoa_common+0x20>
    1358:	a9 5d       	subi	r26, 0xD9	; 217
    135a:	a1 93       	st	Z+, r26
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	79 f7       	brne	.-34     	; 0x133e <__utoa_common+0x4>
    1360:	b1 11       	cpse	r27, r1
    1362:	b1 93       	st	Z+, r27
    1364:	11 92       	st	Z+, r1
    1366:	cb 01       	movw	r24, r22
    1368:	20 c2       	rjmp	.+1088   	; 0x17aa <strrev>

0000136a <fputs>:
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	8b 01       	movw	r16, r22
    1378:	db 01       	movw	r26, r22
    137a:	13 96       	adiw	r26, 0x03	; 3
    137c:	2c 91       	ld	r18, X
    137e:	21 ff       	sbrs	r18, 1
    1380:	16 c0       	rjmp	.+44     	; 0x13ae <fputs+0x44>
    1382:	ec 01       	movw	r28, r24
    1384:	e1 2c       	mov	r14, r1
    1386:	f1 2c       	mov	r15, r1
    1388:	89 91       	ld	r24, Y+
    138a:	88 23       	and	r24, r24
    138c:	71 f0       	breq	.+28     	; 0x13aa <fputs+0x40>
    138e:	d8 01       	movw	r26, r16
    1390:	18 96       	adiw	r26, 0x08	; 8
    1392:	ed 91       	ld	r30, X+
    1394:	fc 91       	ld	r31, X
    1396:	19 97       	sbiw	r26, 0x09	; 9
    1398:	b8 01       	movw	r22, r16
    139a:	09 95       	icall
    139c:	89 2b       	or	r24, r25
    139e:	a1 f3       	breq	.-24     	; 0x1388 <fputs+0x1e>
    13a0:	ee 24       	eor	r14, r14
    13a2:	ea 94       	dec	r14
    13a4:	ff 24       	eor	r15, r15
    13a6:	fa 94       	dec	r15
    13a8:	ef cf       	rjmp	.-34     	; 0x1388 <fputs+0x1e>
    13aa:	c7 01       	movw	r24, r14
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <fputs+0x48>
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	9f ef       	ldi	r25, 0xFF	; 255
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	e6 e0       	ldi	r30, 0x06	; 6
    13b8:	c0 c2       	rjmp	.+1408   	; 0x193a <__epilogue_restores__+0x18>

000013ba <sprintf>:
    13ba:	ae e0       	ldi	r26, 0x0E	; 14
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e2 ee       	ldi	r30, 0xE2	; 226
    13c0:	f9 e0       	ldi	r31, 0x09	; 9
    13c2:	a1 c2       	rjmp	.+1346   	; 0x1906 <__prologue_saves__+0x1c>
    13c4:	0d 89       	ldd	r16, Y+21	; 0x15
    13c6:	1e 89       	ldd	r17, Y+22	; 0x16
    13c8:	86 e0       	ldi	r24, 0x06	; 6
    13ca:	8c 83       	std	Y+4, r24	; 0x04
    13cc:	1a 83       	std	Y+2, r17	; 0x02
    13ce:	09 83       	std	Y+1, r16	; 0x01
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	9f e7       	ldi	r25, 0x7F	; 127
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	ae 01       	movw	r20, r28
    13da:	47 5e       	subi	r20, 0xE7	; 231
    13dc:	5f 4f       	sbci	r21, 0xFF	; 255
    13de:	6f 89       	ldd	r22, Y+23	; 0x17
    13e0:	78 8d       	ldd	r23, Y+24	; 0x18
    13e2:	ce 01       	movw	r24, r28
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	08 d0       	rcall	.+16     	; 0x13f8 <vfprintf>
    13e8:	ef 81       	ldd	r30, Y+7	; 0x07
    13ea:	f8 85       	ldd	r31, Y+8	; 0x08
    13ec:	e0 0f       	add	r30, r16
    13ee:	f1 1f       	adc	r31, r17
    13f0:	10 82       	st	Z, r1
    13f2:	2e 96       	adiw	r28, 0x0e	; 14
    13f4:	e4 e0       	ldi	r30, 0x04	; 4
    13f6:	a3 c2       	rjmp	.+1350   	; 0x193e <__epilogue_restores__+0x1c>

000013f8 <vfprintf>:
    13f8:	ac e0       	ldi	r26, 0x0C	; 12
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e1 e0       	ldi	r30, 0x01	; 1
    13fe:	fa e0       	ldi	r31, 0x0A	; 10
    1400:	74 c2       	rjmp	.+1256   	; 0x18ea <__prologue_saves__>
    1402:	7c 01       	movw	r14, r24
    1404:	6b 01       	movw	r12, r22
    1406:	8a 01       	movw	r16, r20
    1408:	fc 01       	movw	r30, r24
    140a:	17 82       	std	Z+7, r1	; 0x07
    140c:	16 82       	std	Z+6, r1	; 0x06
    140e:	83 81       	ldd	r24, Z+3	; 0x03
    1410:	81 ff       	sbrs	r24, 1
    1412:	b0 c1       	rjmp	.+864    	; 0x1774 <vfprintf+0x37c>
    1414:	ce 01       	movw	r24, r28
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	4c 01       	movw	r8, r24
    141a:	f7 01       	movw	r30, r14
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	f6 01       	movw	r30, r12
    1420:	93 fd       	sbrc	r25, 3
    1422:	85 91       	lpm	r24, Z+
    1424:	93 ff       	sbrs	r25, 3
    1426:	81 91       	ld	r24, Z+
    1428:	6f 01       	movw	r12, r30
    142a:	88 23       	and	r24, r24
    142c:	09 f4       	brne	.+2      	; 0x1430 <vfprintf+0x38>
    142e:	9e c1       	rjmp	.+828    	; 0x176c <vfprintf+0x374>
    1430:	85 32       	cpi	r24, 0x25	; 37
    1432:	39 f4       	brne	.+14     	; 0x1442 <vfprintf+0x4a>
    1434:	93 fd       	sbrc	r25, 3
    1436:	85 91       	lpm	r24, Z+
    1438:	93 ff       	sbrs	r25, 3
    143a:	81 91       	ld	r24, Z+
    143c:	6f 01       	movw	r12, r30
    143e:	85 32       	cpi	r24, 0x25	; 37
    1440:	21 f4       	brne	.+8      	; 0x144a <vfprintf+0x52>
    1442:	b7 01       	movw	r22, r14
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	c1 d1       	rcall	.+898    	; 0x17ca <fputc>
    1448:	e8 cf       	rjmp	.-48     	; 0x141a <vfprintf+0x22>
    144a:	51 2c       	mov	r5, r1
    144c:	31 2c       	mov	r3, r1
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	20 32       	cpi	r18, 0x20	; 32
    1452:	a0 f4       	brcc	.+40     	; 0x147c <vfprintf+0x84>
    1454:	8b 32       	cpi	r24, 0x2B	; 43
    1456:	69 f0       	breq	.+26     	; 0x1472 <vfprintf+0x7a>
    1458:	30 f4       	brcc	.+12     	; 0x1466 <vfprintf+0x6e>
    145a:	80 32       	cpi	r24, 0x20	; 32
    145c:	59 f0       	breq	.+22     	; 0x1474 <vfprintf+0x7c>
    145e:	83 32       	cpi	r24, 0x23	; 35
    1460:	69 f4       	brne	.+26     	; 0x147c <vfprintf+0x84>
    1462:	20 61       	ori	r18, 0x10	; 16
    1464:	2c c0       	rjmp	.+88     	; 0x14be <vfprintf+0xc6>
    1466:	8d 32       	cpi	r24, 0x2D	; 45
    1468:	39 f0       	breq	.+14     	; 0x1478 <vfprintf+0x80>
    146a:	80 33       	cpi	r24, 0x30	; 48
    146c:	39 f4       	brne	.+14     	; 0x147c <vfprintf+0x84>
    146e:	21 60       	ori	r18, 0x01	; 1
    1470:	26 c0       	rjmp	.+76     	; 0x14be <vfprintf+0xc6>
    1472:	22 60       	ori	r18, 0x02	; 2
    1474:	24 60       	ori	r18, 0x04	; 4
    1476:	23 c0       	rjmp	.+70     	; 0x14be <vfprintf+0xc6>
    1478:	28 60       	ori	r18, 0x08	; 8
    147a:	21 c0       	rjmp	.+66     	; 0x14be <vfprintf+0xc6>
    147c:	27 fd       	sbrc	r18, 7
    147e:	27 c0       	rjmp	.+78     	; 0x14ce <vfprintf+0xd6>
    1480:	30 ed       	ldi	r19, 0xD0	; 208
    1482:	38 0f       	add	r19, r24
    1484:	3a 30       	cpi	r19, 0x0A	; 10
    1486:	78 f4       	brcc	.+30     	; 0x14a6 <vfprintf+0xae>
    1488:	26 ff       	sbrs	r18, 6
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <vfprintf+0xa0>
    148c:	fa e0       	ldi	r31, 0x0A	; 10
    148e:	5f 9e       	mul	r5, r31
    1490:	30 0d       	add	r19, r0
    1492:	11 24       	eor	r1, r1
    1494:	53 2e       	mov	r5, r19
    1496:	13 c0       	rjmp	.+38     	; 0x14be <vfprintf+0xc6>
    1498:	8a e0       	ldi	r24, 0x0A	; 10
    149a:	38 9e       	mul	r3, r24
    149c:	30 0d       	add	r19, r0
    149e:	11 24       	eor	r1, r1
    14a0:	33 2e       	mov	r3, r19
    14a2:	20 62       	ori	r18, 0x20	; 32
    14a4:	0c c0       	rjmp	.+24     	; 0x14be <vfprintf+0xc6>
    14a6:	8e 32       	cpi	r24, 0x2E	; 46
    14a8:	21 f4       	brne	.+8      	; 0x14b2 <vfprintf+0xba>
    14aa:	26 fd       	sbrc	r18, 6
    14ac:	5f c1       	rjmp	.+702    	; 0x176c <vfprintf+0x374>
    14ae:	20 64       	ori	r18, 0x40	; 64
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <vfprintf+0xc6>
    14b2:	8c 36       	cpi	r24, 0x6C	; 108
    14b4:	11 f4       	brne	.+4      	; 0x14ba <vfprintf+0xc2>
    14b6:	20 68       	ori	r18, 0x80	; 128
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <vfprintf+0xc6>
    14ba:	88 36       	cpi	r24, 0x68	; 104
    14bc:	41 f4       	brne	.+16     	; 0x14ce <vfprintf+0xd6>
    14be:	f6 01       	movw	r30, r12
    14c0:	93 fd       	sbrc	r25, 3
    14c2:	85 91       	lpm	r24, Z+
    14c4:	93 ff       	sbrs	r25, 3
    14c6:	81 91       	ld	r24, Z+
    14c8:	6f 01       	movw	r12, r30
    14ca:	81 11       	cpse	r24, r1
    14cc:	c1 cf       	rjmp	.-126    	; 0x1450 <vfprintf+0x58>
    14ce:	98 2f       	mov	r25, r24
    14d0:	9f 7d       	andi	r25, 0xDF	; 223
    14d2:	95 54       	subi	r25, 0x45	; 69
    14d4:	93 30       	cpi	r25, 0x03	; 3
    14d6:	28 f4       	brcc	.+10     	; 0x14e2 <vfprintf+0xea>
    14d8:	0c 5f       	subi	r16, 0xFC	; 252
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
    14dc:	ff e3       	ldi	r31, 0x3F	; 63
    14de:	f9 83       	std	Y+1, r31	; 0x01
    14e0:	0d c0       	rjmp	.+26     	; 0x14fc <vfprintf+0x104>
    14e2:	83 36       	cpi	r24, 0x63	; 99
    14e4:	31 f0       	breq	.+12     	; 0x14f2 <vfprintf+0xfa>
    14e6:	83 37       	cpi	r24, 0x73	; 115
    14e8:	71 f0       	breq	.+28     	; 0x1506 <vfprintf+0x10e>
    14ea:	83 35       	cpi	r24, 0x53	; 83
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <vfprintf+0xf8>
    14ee:	57 c0       	rjmp	.+174    	; 0x159e <vfprintf+0x1a6>
    14f0:	21 c0       	rjmp	.+66     	; 0x1534 <vfprintf+0x13c>
    14f2:	f8 01       	movw	r30, r16
    14f4:	80 81       	ld	r24, Z
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	0e 5f       	subi	r16, 0xFE	; 254
    14fa:	1f 4f       	sbci	r17, 0xFF	; 255
    14fc:	44 24       	eor	r4, r4
    14fe:	43 94       	inc	r4
    1500:	51 2c       	mov	r5, r1
    1502:	54 01       	movw	r10, r8
    1504:	14 c0       	rjmp	.+40     	; 0x152e <vfprintf+0x136>
    1506:	38 01       	movw	r6, r16
    1508:	f2 e0       	ldi	r31, 0x02	; 2
    150a:	6f 0e       	add	r6, r31
    150c:	71 1c       	adc	r7, r1
    150e:	f8 01       	movw	r30, r16
    1510:	a0 80       	ld	r10, Z
    1512:	b1 80       	ldd	r11, Z+1	; 0x01
    1514:	26 ff       	sbrs	r18, 6
    1516:	03 c0       	rjmp	.+6      	; 0x151e <vfprintf+0x126>
    1518:	65 2d       	mov	r22, r5
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <vfprintf+0x12a>
    151e:	6f ef       	ldi	r22, 0xFF	; 255
    1520:	7f ef       	ldi	r23, 0xFF	; 255
    1522:	c5 01       	movw	r24, r10
    1524:	2c 87       	std	Y+12, r18	; 0x0c
    1526:	36 d1       	rcall	.+620    	; 0x1794 <strnlen>
    1528:	2c 01       	movw	r4, r24
    152a:	83 01       	movw	r16, r6
    152c:	2c 85       	ldd	r18, Y+12	; 0x0c
    152e:	2f 77       	andi	r18, 0x7F	; 127
    1530:	22 2e       	mov	r2, r18
    1532:	16 c0       	rjmp	.+44     	; 0x1560 <vfprintf+0x168>
    1534:	38 01       	movw	r6, r16
    1536:	f2 e0       	ldi	r31, 0x02	; 2
    1538:	6f 0e       	add	r6, r31
    153a:	71 1c       	adc	r7, r1
    153c:	f8 01       	movw	r30, r16
    153e:	a0 80       	ld	r10, Z
    1540:	b1 80       	ldd	r11, Z+1	; 0x01
    1542:	26 ff       	sbrs	r18, 6
    1544:	03 c0       	rjmp	.+6      	; 0x154c <vfprintf+0x154>
    1546:	65 2d       	mov	r22, r5
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0x158>
    154c:	6f ef       	ldi	r22, 0xFF	; 255
    154e:	7f ef       	ldi	r23, 0xFF	; 255
    1550:	c5 01       	movw	r24, r10
    1552:	2c 87       	std	Y+12, r18	; 0x0c
    1554:	14 d1       	rcall	.+552    	; 0x177e <strnlen_P>
    1556:	2c 01       	movw	r4, r24
    1558:	2c 85       	ldd	r18, Y+12	; 0x0c
    155a:	20 68       	ori	r18, 0x80	; 128
    155c:	22 2e       	mov	r2, r18
    155e:	83 01       	movw	r16, r6
    1560:	23 fc       	sbrc	r2, 3
    1562:	19 c0       	rjmp	.+50     	; 0x1596 <vfprintf+0x19e>
    1564:	83 2d       	mov	r24, r3
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	48 16       	cp	r4, r24
    156a:	59 06       	cpc	r5, r25
    156c:	a0 f4       	brcc	.+40     	; 0x1596 <vfprintf+0x19e>
    156e:	b7 01       	movw	r22, r14
    1570:	80 e2       	ldi	r24, 0x20	; 32
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	2a d1       	rcall	.+596    	; 0x17ca <fputc>
    1576:	3a 94       	dec	r3
    1578:	f5 cf       	rjmp	.-22     	; 0x1564 <vfprintf+0x16c>
    157a:	f5 01       	movw	r30, r10
    157c:	27 fc       	sbrc	r2, 7
    157e:	85 91       	lpm	r24, Z+
    1580:	27 fe       	sbrs	r2, 7
    1582:	81 91       	ld	r24, Z+
    1584:	5f 01       	movw	r10, r30
    1586:	b7 01       	movw	r22, r14
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	1f d1       	rcall	.+574    	; 0x17ca <fputc>
    158c:	31 10       	cpse	r3, r1
    158e:	3a 94       	dec	r3
    1590:	f1 e0       	ldi	r31, 0x01	; 1
    1592:	4f 1a       	sub	r4, r31
    1594:	51 08       	sbc	r5, r1
    1596:	41 14       	cp	r4, r1
    1598:	51 04       	cpc	r5, r1
    159a:	79 f7       	brne	.-34     	; 0x157a <vfprintf+0x182>
    159c:	de c0       	rjmp	.+444    	; 0x175a <vfprintf+0x362>
    159e:	84 36       	cpi	r24, 0x64	; 100
    15a0:	11 f0       	breq	.+4      	; 0x15a6 <vfprintf+0x1ae>
    15a2:	89 36       	cpi	r24, 0x69	; 105
    15a4:	31 f5       	brne	.+76     	; 0x15f2 <vfprintf+0x1fa>
    15a6:	f8 01       	movw	r30, r16
    15a8:	27 ff       	sbrs	r18, 7
    15aa:	07 c0       	rjmp	.+14     	; 0x15ba <vfprintf+0x1c2>
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	0c 5f       	subi	r16, 0xFC	; 252
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <vfprintf+0x1d2>
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	88 27       	eor	r24, r24
    15c0:	77 fd       	sbrc	r23, 7
    15c2:	80 95       	com	r24
    15c4:	98 2f       	mov	r25, r24
    15c6:	0e 5f       	subi	r16, 0xFE	; 254
    15c8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ca:	2f 76       	andi	r18, 0x6F	; 111
    15cc:	b2 2e       	mov	r11, r18
    15ce:	97 ff       	sbrs	r25, 7
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <vfprintf+0x1ec>
    15d2:	90 95       	com	r25
    15d4:	80 95       	com	r24
    15d6:	70 95       	com	r23
    15d8:	61 95       	neg	r22
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	8f 4f       	sbci	r24, 0xFF	; 255
    15de:	9f 4f       	sbci	r25, 0xFF	; 255
    15e0:	20 68       	ori	r18, 0x80	; 128
    15e2:	b2 2e       	mov	r11, r18
    15e4:	2a e0       	ldi	r18, 0x0A	; 10
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	a4 01       	movw	r20, r8
    15ea:	21 d1       	rcall	.+578    	; 0x182e <__ultoa_invert>
    15ec:	a8 2e       	mov	r10, r24
    15ee:	a8 18       	sub	r10, r8
    15f0:	43 c0       	rjmp	.+134    	; 0x1678 <vfprintf+0x280>
    15f2:	85 37       	cpi	r24, 0x75	; 117
    15f4:	29 f4       	brne	.+10     	; 0x1600 <vfprintf+0x208>
    15f6:	2f 7e       	andi	r18, 0xEF	; 239
    15f8:	b2 2e       	mov	r11, r18
    15fa:	2a e0       	ldi	r18, 0x0A	; 10
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	25 c0       	rjmp	.+74     	; 0x164a <vfprintf+0x252>
    1600:	f2 2f       	mov	r31, r18
    1602:	f9 7f       	andi	r31, 0xF9	; 249
    1604:	bf 2e       	mov	r11, r31
    1606:	8f 36       	cpi	r24, 0x6F	; 111
    1608:	c1 f0       	breq	.+48     	; 0x163a <vfprintf+0x242>
    160a:	18 f4       	brcc	.+6      	; 0x1612 <vfprintf+0x21a>
    160c:	88 35       	cpi	r24, 0x58	; 88
    160e:	79 f0       	breq	.+30     	; 0x162e <vfprintf+0x236>
    1610:	ad c0       	rjmp	.+346    	; 0x176c <vfprintf+0x374>
    1612:	80 37       	cpi	r24, 0x70	; 112
    1614:	19 f0       	breq	.+6      	; 0x161c <vfprintf+0x224>
    1616:	88 37       	cpi	r24, 0x78	; 120
    1618:	21 f0       	breq	.+8      	; 0x1622 <vfprintf+0x22a>
    161a:	a8 c0       	rjmp	.+336    	; 0x176c <vfprintf+0x374>
    161c:	2f 2f       	mov	r18, r31
    161e:	20 61       	ori	r18, 0x10	; 16
    1620:	b2 2e       	mov	r11, r18
    1622:	b4 fe       	sbrs	r11, 4
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <vfprintf+0x248>
    1626:	8b 2d       	mov	r24, r11
    1628:	84 60       	ori	r24, 0x04	; 4
    162a:	b8 2e       	mov	r11, r24
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <vfprintf+0x248>
    162e:	24 ff       	sbrs	r18, 4
    1630:	0a c0       	rjmp	.+20     	; 0x1646 <vfprintf+0x24e>
    1632:	9f 2f       	mov	r25, r31
    1634:	96 60       	ori	r25, 0x06	; 6
    1636:	b9 2e       	mov	r11, r25
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <vfprintf+0x24e>
    163a:	28 e0       	ldi	r18, 0x08	; 8
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	05 c0       	rjmp	.+10     	; 0x164a <vfprintf+0x252>
    1640:	20 e1       	ldi	r18, 0x10	; 16
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <vfprintf+0x252>
    1646:	20 e1       	ldi	r18, 0x10	; 16
    1648:	32 e0       	ldi	r19, 0x02	; 2
    164a:	f8 01       	movw	r30, r16
    164c:	b7 fe       	sbrs	r11, 7
    164e:	07 c0       	rjmp	.+14     	; 0x165e <vfprintf+0x266>
    1650:	60 81       	ld	r22, Z
    1652:	71 81       	ldd	r23, Z+1	; 0x01
    1654:	82 81       	ldd	r24, Z+2	; 0x02
    1656:	93 81       	ldd	r25, Z+3	; 0x03
    1658:	0c 5f       	subi	r16, 0xFC	; 252
    165a:	1f 4f       	sbci	r17, 0xFF	; 255
    165c:	06 c0       	rjmp	.+12     	; 0x166a <vfprintf+0x272>
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 5f       	subi	r16, 0xFE	; 254
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	a4 01       	movw	r20, r8
    166c:	e0 d0       	rcall	.+448    	; 0x182e <__ultoa_invert>
    166e:	a8 2e       	mov	r10, r24
    1670:	a8 18       	sub	r10, r8
    1672:	fb 2d       	mov	r31, r11
    1674:	ff 77       	andi	r31, 0x7F	; 127
    1676:	bf 2e       	mov	r11, r31
    1678:	b6 fe       	sbrs	r11, 6
    167a:	0b c0       	rjmp	.+22     	; 0x1692 <vfprintf+0x29a>
    167c:	2b 2d       	mov	r18, r11
    167e:	2e 7f       	andi	r18, 0xFE	; 254
    1680:	a5 14       	cp	r10, r5
    1682:	50 f4       	brcc	.+20     	; 0x1698 <vfprintf+0x2a0>
    1684:	b4 fe       	sbrs	r11, 4
    1686:	0a c0       	rjmp	.+20     	; 0x169c <vfprintf+0x2a4>
    1688:	b2 fc       	sbrc	r11, 2
    168a:	08 c0       	rjmp	.+16     	; 0x169c <vfprintf+0x2a4>
    168c:	2b 2d       	mov	r18, r11
    168e:	2e 7e       	andi	r18, 0xEE	; 238
    1690:	05 c0       	rjmp	.+10     	; 0x169c <vfprintf+0x2a4>
    1692:	7a 2c       	mov	r7, r10
    1694:	2b 2d       	mov	r18, r11
    1696:	03 c0       	rjmp	.+6      	; 0x169e <vfprintf+0x2a6>
    1698:	7a 2c       	mov	r7, r10
    169a:	01 c0       	rjmp	.+2      	; 0x169e <vfprintf+0x2a6>
    169c:	75 2c       	mov	r7, r5
    169e:	24 ff       	sbrs	r18, 4
    16a0:	0d c0       	rjmp	.+26     	; 0x16bc <vfprintf+0x2c4>
    16a2:	fe 01       	movw	r30, r28
    16a4:	ea 0d       	add	r30, r10
    16a6:	f1 1d       	adc	r31, r1
    16a8:	80 81       	ld	r24, Z
    16aa:	80 33       	cpi	r24, 0x30	; 48
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <vfprintf+0x2ba>
    16ae:	29 7e       	andi	r18, 0xE9	; 233
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <vfprintf+0x2cc>
    16b2:	22 ff       	sbrs	r18, 2
    16b4:	06 c0       	rjmp	.+12     	; 0x16c2 <vfprintf+0x2ca>
    16b6:	73 94       	inc	r7
    16b8:	73 94       	inc	r7
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <vfprintf+0x2cc>
    16bc:	82 2f       	mov	r24, r18
    16be:	86 78       	andi	r24, 0x86	; 134
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <vfprintf+0x2cc>
    16c2:	73 94       	inc	r7
    16c4:	23 fd       	sbrc	r18, 3
    16c6:	12 c0       	rjmp	.+36     	; 0x16ec <vfprintf+0x2f4>
    16c8:	20 ff       	sbrs	r18, 0
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <vfprintf+0x2e0>
    16cc:	5a 2c       	mov	r5, r10
    16ce:	73 14       	cp	r7, r3
    16d0:	18 f4       	brcc	.+6      	; 0x16d8 <vfprintf+0x2e0>
    16d2:	53 0c       	add	r5, r3
    16d4:	57 18       	sub	r5, r7
    16d6:	73 2c       	mov	r7, r3
    16d8:	73 14       	cp	r7, r3
    16da:	60 f4       	brcc	.+24     	; 0x16f4 <vfprintf+0x2fc>
    16dc:	b7 01       	movw	r22, r14
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	2c 87       	std	Y+12, r18	; 0x0c
    16e4:	72 d0       	rcall	.+228    	; 0x17ca <fputc>
    16e6:	73 94       	inc	r7
    16e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ea:	f6 cf       	rjmp	.-20     	; 0x16d8 <vfprintf+0x2e0>
    16ec:	73 14       	cp	r7, r3
    16ee:	10 f4       	brcc	.+4      	; 0x16f4 <vfprintf+0x2fc>
    16f0:	37 18       	sub	r3, r7
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <vfprintf+0x2fe>
    16f4:	31 2c       	mov	r3, r1
    16f6:	24 ff       	sbrs	r18, 4
    16f8:	11 c0       	rjmp	.+34     	; 0x171c <vfprintf+0x324>
    16fa:	b7 01       	movw	r22, r14
    16fc:	80 e3       	ldi	r24, 0x30	; 48
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	2c 87       	std	Y+12, r18	; 0x0c
    1702:	63 d0       	rcall	.+198    	; 0x17ca <fputc>
    1704:	2c 85       	ldd	r18, Y+12	; 0x0c
    1706:	22 ff       	sbrs	r18, 2
    1708:	16 c0       	rjmp	.+44     	; 0x1736 <vfprintf+0x33e>
    170a:	21 ff       	sbrs	r18, 1
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <vfprintf+0x31c>
    170e:	88 e5       	ldi	r24, 0x58	; 88
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x320>
    1714:	88 e7       	ldi	r24, 0x78	; 120
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	b7 01       	movw	r22, r14
    171a:	0c c0       	rjmp	.+24     	; 0x1734 <vfprintf+0x33c>
    171c:	82 2f       	mov	r24, r18
    171e:	86 78       	andi	r24, 0x86	; 134
    1720:	51 f0       	breq	.+20     	; 0x1736 <vfprintf+0x33e>
    1722:	21 fd       	sbrc	r18, 1
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x332>
    1726:	80 e2       	ldi	r24, 0x20	; 32
    1728:	01 c0       	rjmp	.+2      	; 0x172c <vfprintf+0x334>
    172a:	8b e2       	ldi	r24, 0x2B	; 43
    172c:	27 fd       	sbrc	r18, 7
    172e:	8d e2       	ldi	r24, 0x2D	; 45
    1730:	b7 01       	movw	r22, r14
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	4a d0       	rcall	.+148    	; 0x17ca <fputc>
    1736:	a5 14       	cp	r10, r5
    1738:	30 f4       	brcc	.+12     	; 0x1746 <vfprintf+0x34e>
    173a:	b7 01       	movw	r22, r14
    173c:	80 e3       	ldi	r24, 0x30	; 48
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	44 d0       	rcall	.+136    	; 0x17ca <fputc>
    1742:	5a 94       	dec	r5
    1744:	f8 cf       	rjmp	.-16     	; 0x1736 <vfprintf+0x33e>
    1746:	aa 94       	dec	r10
    1748:	f4 01       	movw	r30, r8
    174a:	ea 0d       	add	r30, r10
    174c:	f1 1d       	adc	r31, r1
    174e:	80 81       	ld	r24, Z
    1750:	b7 01       	movw	r22, r14
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	3a d0       	rcall	.+116    	; 0x17ca <fputc>
    1756:	a1 10       	cpse	r10, r1
    1758:	f6 cf       	rjmp	.-20     	; 0x1746 <vfprintf+0x34e>
    175a:	33 20       	and	r3, r3
    175c:	09 f4       	brne	.+2      	; 0x1760 <vfprintf+0x368>
    175e:	5d ce       	rjmp	.-838    	; 0x141a <vfprintf+0x22>
    1760:	b7 01       	movw	r22, r14
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	31 d0       	rcall	.+98     	; 0x17ca <fputc>
    1768:	3a 94       	dec	r3
    176a:	f7 cf       	rjmp	.-18     	; 0x175a <vfprintf+0x362>
    176c:	f7 01       	movw	r30, r14
    176e:	86 81       	ldd	r24, Z+6	; 0x06
    1770:	97 81       	ldd	r25, Z+7	; 0x07
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <vfprintf+0x380>
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	9f ef       	ldi	r25, 0xFF	; 255
    1778:	2c 96       	adiw	r28, 0x0c	; 12
    177a:	e2 e1       	ldi	r30, 0x12	; 18
    177c:	d2 c0       	rjmp	.+420    	; 0x1922 <__epilogue_restores__>

0000177e <strnlen_P>:
    177e:	fc 01       	movw	r30, r24
    1780:	05 90       	lpm	r0, Z+
    1782:	61 50       	subi	r22, 0x01	; 1
    1784:	70 40       	sbci	r23, 0x00	; 0
    1786:	01 10       	cpse	r0, r1
    1788:	d8 f7       	brcc	.-10     	; 0x1780 <strnlen_P+0x2>
    178a:	80 95       	com	r24
    178c:	90 95       	com	r25
    178e:	8e 0f       	add	r24, r30
    1790:	9f 1f       	adc	r25, r31
    1792:	08 95       	ret

00001794 <strnlen>:
    1794:	fc 01       	movw	r30, r24
    1796:	61 50       	subi	r22, 0x01	; 1
    1798:	70 40       	sbci	r23, 0x00	; 0
    179a:	01 90       	ld	r0, Z+
    179c:	01 10       	cpse	r0, r1
    179e:	d8 f7       	brcc	.-10     	; 0x1796 <strnlen+0x2>
    17a0:	80 95       	com	r24
    17a2:	90 95       	com	r25
    17a4:	8e 0f       	add	r24, r30
    17a6:	9f 1f       	adc	r25, r31
    17a8:	08 95       	ret

000017aa <strrev>:
    17aa:	dc 01       	movw	r26, r24
    17ac:	fc 01       	movw	r30, r24
    17ae:	67 2f       	mov	r22, r23
    17b0:	71 91       	ld	r23, Z+
    17b2:	77 23       	and	r23, r23
    17b4:	e1 f7       	brne	.-8      	; 0x17ae <strrev+0x4>
    17b6:	32 97       	sbiw	r30, 0x02	; 2
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <strrev+0x18>
    17ba:	7c 91       	ld	r23, X
    17bc:	6d 93       	st	X+, r22
    17be:	70 83       	st	Z, r23
    17c0:	62 91       	ld	r22, -Z
    17c2:	ae 17       	cp	r26, r30
    17c4:	bf 07       	cpc	r27, r31
    17c6:	c8 f3       	brcs	.-14     	; 0x17ba <strrev+0x10>
    17c8:	08 95       	ret

000017ca <fputc>:
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	18 2f       	mov	r17, r24
    17d4:	09 2f       	mov	r16, r25
    17d6:	eb 01       	movw	r28, r22
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	81 fd       	sbrc	r24, 1
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <fputc+0x1a>
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	9f ef       	ldi	r25, 0xFF	; 255
    17e2:	20 c0       	rjmp	.+64     	; 0x1824 <fputc+0x5a>
    17e4:	82 ff       	sbrs	r24, 2
    17e6:	10 c0       	rjmp	.+32     	; 0x1808 <fputc+0x3e>
    17e8:	4e 81       	ldd	r20, Y+6	; 0x06
    17ea:	5f 81       	ldd	r21, Y+7	; 0x07
    17ec:	2c 81       	ldd	r18, Y+4	; 0x04
    17ee:	3d 81       	ldd	r19, Y+5	; 0x05
    17f0:	42 17       	cp	r20, r18
    17f2:	53 07       	cpc	r21, r19
    17f4:	7c f4       	brge	.+30     	; 0x1814 <fputc+0x4a>
    17f6:	e8 81       	ld	r30, Y
    17f8:	f9 81       	ldd	r31, Y+1	; 0x01
    17fa:	9f 01       	movw	r18, r30
    17fc:	2f 5f       	subi	r18, 0xFF	; 255
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	39 83       	std	Y+1, r19	; 0x01
    1802:	28 83       	st	Y, r18
    1804:	10 83       	st	Z, r17
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <fputc+0x4a>
    1808:	e8 85       	ldd	r30, Y+8	; 0x08
    180a:	f9 85       	ldd	r31, Y+9	; 0x09
    180c:	81 2f       	mov	r24, r17
    180e:	09 95       	icall
    1810:	89 2b       	or	r24, r25
    1812:	29 f7       	brne	.-54     	; 0x17de <fputc+0x14>
    1814:	2e 81       	ldd	r18, Y+6	; 0x06
    1816:	3f 81       	ldd	r19, Y+7	; 0x07
    1818:	2f 5f       	subi	r18, 0xFF	; 255
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	3f 83       	std	Y+7, r19	; 0x07
    181e:	2e 83       	std	Y+6, r18	; 0x06
    1820:	81 2f       	mov	r24, r17
    1822:	90 2f       	mov	r25, r16
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	08 95       	ret

0000182e <__ultoa_invert>:
    182e:	fa 01       	movw	r30, r20
    1830:	aa 27       	eor	r26, r26
    1832:	28 30       	cpi	r18, 0x08	; 8
    1834:	51 f1       	breq	.+84     	; 0x188a <__ultoa_invert+0x5c>
    1836:	20 31       	cpi	r18, 0x10	; 16
    1838:	81 f1       	breq	.+96     	; 0x189a <__ultoa_invert+0x6c>
    183a:	e8 94       	clt
    183c:	6f 93       	push	r22
    183e:	6e 7f       	andi	r22, 0xFE	; 254
    1840:	6e 5f       	subi	r22, 0xFE	; 254
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	8f 4f       	sbci	r24, 0xFF	; 255
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	af 4f       	sbci	r26, 0xFF	; 255
    184a:	b1 e0       	ldi	r27, 0x01	; 1
    184c:	3e d0       	rcall	.+124    	; 0x18ca <__ultoa_invert+0x9c>
    184e:	b4 e0       	ldi	r27, 0x04	; 4
    1850:	3c d0       	rcall	.+120    	; 0x18ca <__ultoa_invert+0x9c>
    1852:	67 0f       	add	r22, r23
    1854:	78 1f       	adc	r23, r24
    1856:	89 1f       	adc	r24, r25
    1858:	9a 1f       	adc	r25, r26
    185a:	a1 1d       	adc	r26, r1
    185c:	68 0f       	add	r22, r24
    185e:	79 1f       	adc	r23, r25
    1860:	8a 1f       	adc	r24, r26
    1862:	91 1d       	adc	r25, r1
    1864:	a1 1d       	adc	r26, r1
    1866:	6a 0f       	add	r22, r26
    1868:	71 1d       	adc	r23, r1
    186a:	81 1d       	adc	r24, r1
    186c:	91 1d       	adc	r25, r1
    186e:	a1 1d       	adc	r26, r1
    1870:	20 d0       	rcall	.+64     	; 0x18b2 <__ultoa_invert+0x84>
    1872:	09 f4       	brne	.+2      	; 0x1876 <__ultoa_invert+0x48>
    1874:	68 94       	set
    1876:	3f 91       	pop	r19
    1878:	2a e0       	ldi	r18, 0x0A	; 10
    187a:	26 9f       	mul	r18, r22
    187c:	11 24       	eor	r1, r1
    187e:	30 19       	sub	r19, r0
    1880:	30 5d       	subi	r19, 0xD0	; 208
    1882:	31 93       	st	Z+, r19
    1884:	de f6       	brtc	.-74     	; 0x183c <__ultoa_invert+0xe>
    1886:	cf 01       	movw	r24, r30
    1888:	08 95       	ret
    188a:	46 2f       	mov	r20, r22
    188c:	47 70       	andi	r20, 0x07	; 7
    188e:	40 5d       	subi	r20, 0xD0	; 208
    1890:	41 93       	st	Z+, r20
    1892:	b3 e0       	ldi	r27, 0x03	; 3
    1894:	0f d0       	rcall	.+30     	; 0x18b4 <__ultoa_invert+0x86>
    1896:	c9 f7       	brne	.-14     	; 0x188a <__ultoa_invert+0x5c>
    1898:	f6 cf       	rjmp	.-20     	; 0x1886 <__ultoa_invert+0x58>
    189a:	46 2f       	mov	r20, r22
    189c:	4f 70       	andi	r20, 0x0F	; 15
    189e:	40 5d       	subi	r20, 0xD0	; 208
    18a0:	4a 33       	cpi	r20, 0x3A	; 58
    18a2:	18 f0       	brcs	.+6      	; 0x18aa <__ultoa_invert+0x7c>
    18a4:	49 5d       	subi	r20, 0xD9	; 217
    18a6:	31 fd       	sbrc	r19, 1
    18a8:	40 52       	subi	r20, 0x20	; 32
    18aa:	41 93       	st	Z+, r20
    18ac:	02 d0       	rcall	.+4      	; 0x18b2 <__ultoa_invert+0x84>
    18ae:	a9 f7       	brne	.-22     	; 0x189a <__ultoa_invert+0x6c>
    18b0:	ea cf       	rjmp	.-44     	; 0x1886 <__ultoa_invert+0x58>
    18b2:	b4 e0       	ldi	r27, 0x04	; 4
    18b4:	a6 95       	lsr	r26
    18b6:	97 95       	ror	r25
    18b8:	87 95       	ror	r24
    18ba:	77 95       	ror	r23
    18bc:	67 95       	ror	r22
    18be:	ba 95       	dec	r27
    18c0:	c9 f7       	brne	.-14     	; 0x18b4 <__ultoa_invert+0x86>
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	61 05       	cpc	r22, r1
    18c6:	71 05       	cpc	r23, r1
    18c8:	08 95       	ret
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	0a 2e       	mov	r0, r26
    18d0:	06 94       	lsr	r0
    18d2:	57 95       	ror	r21
    18d4:	47 95       	ror	r20
    18d6:	37 95       	ror	r19
    18d8:	27 95       	ror	r18
    18da:	ba 95       	dec	r27
    18dc:	c9 f7       	brne	.-14     	; 0x18d0 <__ultoa_invert+0xa2>
    18de:	62 0f       	add	r22, r18
    18e0:	73 1f       	adc	r23, r19
    18e2:	84 1f       	adc	r24, r20
    18e4:	95 1f       	adc	r25, r21
    18e6:	a0 1d       	adc	r26, r0
    18e8:	08 95       	ret

000018ea <__prologue_saves__>:
    18ea:	2f 92       	push	r2
    18ec:	3f 92       	push	r3
    18ee:	4f 92       	push	r4
    18f0:	5f 92       	push	r5
    18f2:	6f 92       	push	r6
    18f4:	7f 92       	push	r7
    18f6:	8f 92       	push	r8
    18f8:	9f 92       	push	r9
    18fa:	af 92       	push	r10
    18fc:	bf 92       	push	r11
    18fe:	cf 92       	push	r12
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	ca 1b       	sub	r28, r26
    1914:	db 0b       	sbc	r29, r27
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	09 94       	ijmp

00001922 <__epilogue_restores__>:
    1922:	2a 88       	ldd	r2, Y+18	; 0x12
    1924:	39 88       	ldd	r3, Y+17	; 0x11
    1926:	48 88       	ldd	r4, Y+16	; 0x10
    1928:	5f 84       	ldd	r5, Y+15	; 0x0f
    192a:	6e 84       	ldd	r6, Y+14	; 0x0e
    192c:	7d 84       	ldd	r7, Y+13	; 0x0d
    192e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1930:	9b 84       	ldd	r9, Y+11	; 0x0b
    1932:	aa 84       	ldd	r10, Y+10	; 0x0a
    1934:	b9 84       	ldd	r11, Y+9	; 0x09
    1936:	c8 84       	ldd	r12, Y+8	; 0x08
    1938:	df 80       	ldd	r13, Y+7	; 0x07
    193a:	ee 80       	ldd	r14, Y+6	; 0x06
    193c:	fd 80       	ldd	r15, Y+5	; 0x05
    193e:	0c 81       	ldd	r16, Y+4	; 0x04
    1940:	1b 81       	ldd	r17, Y+3	; 0x03
    1942:	aa 81       	ldd	r26, Y+2	; 0x02
    1944:	b9 81       	ldd	r27, Y+1	; 0x01
    1946:	ce 0f       	add	r28, r30
    1948:	d1 1d       	adc	r29, r1
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	ed 01       	movw	r28, r26
    1956:	08 95       	ret

00001958 <_exit>:
    1958:	f8 94       	cli

0000195a <__stop_program>:
    195a:	ff cf       	rjmp	.-2      	; 0x195a <__stop_program>
